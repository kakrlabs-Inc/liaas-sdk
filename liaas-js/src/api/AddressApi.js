/**
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAddressdto from '../model/CreateAddressdto';
import CreateMultiSignatureAddressdto from '../model/CreateMultiSignatureAddressdto';
import GenerateDefaultAddressdto from '../model/GenerateDefaultAddressdto';
import SignMessagedto from '../model/SignMessagedto';
import VerifyMessagedto from '../model/VerifyMessagedto';

/**
* Address service.
* @module api/AddressApi
* @version 1.0
*/
export default class AddressApi {

    /**
    * Constructs a new AddressApi. 
    * @alias module:api/AddressApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiAddressAddressBalanceGet operation.
     * @callback module:api/AddressApi~apiAddressAddressBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * address balance - returns the confirmed and unconfirmed balance
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [address] 
     * @param {module:api/AddressApi~apiAddressAddressBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressAddressBalanceGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/address-balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAddressAddressDetailsGet operation.
     * @callback module:api/AddressApi~apiAddressAddressDetailsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get address details. all address details are returned.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {String} [address] 
     * @param {module:api/AddressApi~apiAddressAddressDetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressAddressDetailsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/address-details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAddressAddressPrivateKeyGet operation.
     * @callback module:api/AddressApi~apiAddressAddressPrivateKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the address private key using encrypted passphrase
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [wallet] 
     * @param {String} [encryptedPassphrase] 
     * @param {String} [address] 
     * @param {module:api/AddressApi~apiAddressAddressPrivateKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressAddressPrivateKeyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'wallet': opts['wallet'],
        'encryptedPassphrase': opts['encryptedPassphrase']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/address-private-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAddressAddressPrivateKeyV2Get operation.
     * @callback module:api/AddressApi~apiAddressAddressPrivateKeyV2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the address private key using mnemonics
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [wallet] 
     * @param {String} [mnemonics] 
     * @param {String} [address] 
     * @param {module:api/AddressApi~apiAddressAddressPrivateKeyV2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressAddressPrivateKeyV2Get(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'wallet': opts['wallet'],
        'mnemonics': opts['mnemonics']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/address-private-key-v2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAddressAddressTransactionGet operation.
     * @callback module:api/AddressApi~apiAddressAddressTransactionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retruns all transactions of an address without wallet
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [address] 
     * @param {Number} [take = 10)] 
     * @param {Number} [skip = 0)] 
     * @param {module:api/AddressApi~apiAddressAddressTransactionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressAddressTransactionGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address'],
        'take': opts['take'],
        'skip': opts['skip']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/address-transaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAddressCreateMutiSigAddressPost operation.
     * @callback module:api/AddressApi~apiAddressCreateMutiSigAddressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {String} [encryptedPassphrase] 
     * @param {module:model/CreateMultiSignatureAddressdto} [createMultiSignatureAddressdto] 
     * @param {module:api/AddressApi~apiAddressCreateMutiSigAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressCreateMutiSigAddressPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createMultiSignatureAddressdto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName'],
        'encryptedPassphrase': opts['encryptedPassphrase']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/create-muti-sig-address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAddressCreatePost operation.
     * @callback module:api/AddressApi~apiAddressCreatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new address in a particular wallet
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {String} [encryptedPassphrase] 
     * @param {module:model/CreateAddressdto} [createAddressdto] 
     * @param {module:api/AddressApi~apiAddressCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressCreatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createAddressdto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName'],
        'encryptedPassphrase': opts['encryptedPassphrase']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAddressGenerateDefaultAddressPost operation.
     * @callback module:api/AddressApi~apiAddressGenerateDefaultAddressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a default address for a wallet. This address can be imported to other wallets.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {String} [encryptedPassphrase] 
     * @param {module:model/GenerateDefaultAddressdto} [generateDefaultAddressdto] 
     * @param {module:api/AddressApi~apiAddressGenerateDefaultAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressGenerateDefaultAddressPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['generateDefaultAddressdto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName'],
        'encryptedPassphrase': opts['encryptedPassphrase']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/generate-default-address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAddressScreenAddressGet operation.
     * @callback module:api/AddressApi~apiAddressScreenAddressGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [wallet] 
     * @param {String} [mnemonics] 
     * @param {String} [address] 
     * @param {module:api/AddressApi~apiAddressScreenAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressScreenAddressGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'wallet': opts['wallet'],
        'mnemonics': opts['mnemonics']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/screen-address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAddressSignMessagePost operation.
     * @callback module:api/AddressApi~apiAddressSignMessagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sign a message with address private key
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {module:model/SignMessagedto} [signMessagedto] 
     * @param {module:api/AddressApi~apiAddressSignMessagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressSignMessagePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['signMessagedto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/sign-message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAddressVerifyMessagePost operation.
     * @callback module:api/AddressApi~apiAddressVerifyMessagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * verify signed message
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {module:model/VerifyMessagedto} [verifyMessagedto] 
     * @param {module:api/AddressApi~apiAddressVerifyMessagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAddressVerifyMessagePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['verifyMessagedto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Address/verify-message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
