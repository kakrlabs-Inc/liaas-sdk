/*
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAddressdto;
import org.openapitools.client.model.CreateMultiSignatureAddressdto;
import org.openapitools.client.model.GenerateDefaultAddressdto;
import org.openapitools.client.model.SignMessagedto;
import org.openapitools.client.model.VerifyMessagedto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AddressApi
 */
@Disabled
public class AddressApiTest {

    private final AddressApi api = new AddressApi();

    /**
     * address balance - returns the confirmed and unconfirmed balance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressAddressBalanceGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String address = null;
        api.apiAddressAddressBalanceGet(nodeUrlOrApiAccessKey, address);
        // TODO: test validations
    }

    /**
     * Get address details. all address details are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressAddressDetailsGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        String address = null;
        api.apiAddressAddressDetailsGet(nodeUrlOrApiAccessKey, walletName, address);
        // TODO: test validations
    }

    /**
     * Get the address private key using encrypted passphrase
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressAddressPrivateKeyGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String wallet = null;
        String encryptedPassphrase = null;
        String address = null;
        api.apiAddressAddressPrivateKeyGet(nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address);
        // TODO: test validations
    }

    /**
     * Get the address private key using mnemonics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressAddressPrivateKeyV2GetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String wallet = null;
        String mnemonics = null;
        String address = null;
        api.apiAddressAddressPrivateKeyV2Get(nodeUrlOrApiAccessKey, wallet, mnemonics, address);
        // TODO: test validations
    }

    /**
     * retruns all transactions of an address without wallet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressAddressTransactionGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String address = null;
        Integer take = null;
        Integer skip = null;
        api.apiAddressAddressTransactionGet(nodeUrlOrApiAccessKey, address, take, skip);
        // TODO: test validations
    }

    /**
     * Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressCreateMutiSigAddressPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        String encryptedPassphrase = null;
        CreateMultiSignatureAddressdto createMultiSignatureAddressdto = null;
        api.apiAddressCreateMutiSigAddressPost(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto);
        // TODO: test validations
    }

    /**
     * Create a new address in a particular wallet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressCreatePostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        String encryptedPassphrase = null;
        CreateAddressdto createAddressdto = null;
        api.apiAddressCreatePost(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto);
        // TODO: test validations
    }

    /**
     * Generate a default address for a wallet. This address can be imported to other wallets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressGenerateDefaultAddressPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        String encryptedPassphrase = null;
        GenerateDefaultAddressdto generateDefaultAddressdto = null;
        api.apiAddressGenerateDefaultAddressPost(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto);
        // TODO: test validations
    }

    /**
     * Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressScreenAddressGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String wallet = null;
        String mnemonics = null;
        String address = null;
        api.apiAddressScreenAddressGet(nodeUrlOrApiAccessKey, wallet, mnemonics, address);
        // TODO: test validations
    }

    /**
     * sign a message with address private key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressSignMessagePostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        SignMessagedto signMessagedto = null;
        api.apiAddressSignMessagePost(nodeUrlOrApiAccessKey, signMessagedto);
        // TODO: test validations
    }

    /**
     * verify signed message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAddressVerifyMessagePostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        VerifyMessagedto verifyMessagedto = null;
        api.apiAddressVerifyMessagePost(nodeUrlOrApiAccessKey, verifyMessagedto);
        // TODO: test validations
    }

}
