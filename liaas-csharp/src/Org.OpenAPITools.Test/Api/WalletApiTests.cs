/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing WalletApi
    /// </summary>
    public sealed class WalletApiTests : ApiTestsBase
    {
        private readonly IWalletApi _instance;

        public WalletApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IWalletApi>();
        }

        /// <summary>
        /// Test ApiWalletAddressesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletAddressesGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            await _instance.ApiWalletAddressesGetAsync(nodeUrlOrApiAccessKey, walletName);
        }

        /// <summary>
        /// Test ApiWalletBalanceGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletBalanceGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            await _instance.ApiWalletBalanceGetAsync(nodeUrlOrApiAccessKey, walletName);
        }

        /// <summary>
        /// Test ApiWalletChangePassphrasePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletChangePassphrasePostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<ChangePassphrasedto> changePassphrasedto = default!;
            await _instance.ApiWalletChangePassphrasePostAsync(nodeUrlOrApiAccessKey, changePassphrasedto);
        }

        /// <summary>
        /// Test ApiWalletCreateEncryptedWalletPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletCreateEncryptedWalletPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<CreateWalletRequest> createWalletRequest = default!;
            await _instance.ApiWalletCreateEncryptedWalletPostAsync(nodeUrlOrApiAccessKey, createWalletRequest);
        }

        /// <summary>
        /// Test ApiWalletCreateImportableEncryptedWalletPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletCreateImportableEncryptedWalletPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<CreateWalletRequest> createWalletRequest = default!;
            await _instance.ApiWalletCreateImportableEncryptedWalletPostAsync(nodeUrlOrApiAccessKey, createWalletRequest);
        }

        /// <summary>
        /// Test ApiWalletCreateImportableWalletPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletCreateImportableWalletPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<CreateWalletRequest> createWalletRequest = default!;
            await _instance.ApiWalletCreateImportableWalletPostAsync(nodeUrlOrApiAccessKey, createWalletRequest);
        }

        /// <summary>
        /// Test ApiWalletCreatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletCreatePostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<CreateWalletRequest> createWalletRequest = default!;
            await _instance.ApiWalletCreatePostAsync(nodeUrlOrApiAccessKey, createWalletRequest);
        }

        /// <summary>
        /// Test ApiWalletDetailsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletDetailsGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            await _instance.ApiWalletDetailsGetAsync(nodeUrlOrApiAccessKey, walletName);
        }

        /// <summary>
        /// Test ApiWalletEncryptWalletPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletEncryptWalletPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<EncryptWalletDto> encryptWalletDto = default!;
            await _instance.ApiWalletEncryptWalletPostAsync(nodeUrlOrApiAccessKey, walletName, encryptWalletDto);
        }

        /// <summary>
        /// Test ApiWalletImportWalletPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletImportWalletPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<ImportWalletdto> importWalletdto = default!;
            await _instance.ApiWalletImportWalletPostAsync(nodeUrlOrApiAccessKey, importWalletdto);
        }

        /// <summary>
        /// Test ApiWalletOfficialAddressGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletOfficialAddressGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            await _instance.ApiWalletOfficialAddressGetAsync(nodeUrlOrApiAccessKey, walletName);
        }

        /// <summary>
        /// Test ApiWalletSetWalletMnemonicsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletSetWalletMnemonicsPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<string> encryptedPassphrase = default!;
            Client.Option<SetWalletMnemonicsdto> setWalletMnemonicsdto = default!;
            await _instance.ApiWalletSetWalletMnemonicsPostAsync(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto);
        }

        /// <summary>
        /// Test ApiWalletSignWalletMessagePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletSignWalletMessagePostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<SignMessageUsingWalletdto> signMessageUsingWalletdto = default!;
            await _instance.ApiWalletSignWalletMessagePostAsync(nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto);
        }

        /// <summary>
        /// Test ApiWalletTransactionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletTransactionsGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<int> skip = default!;
            Client.Option<int> count = default!;
            await _instance.ApiWalletTransactionsGetAsync(nodeUrlOrApiAccessKey, walletName, skip, count);
        }

        /// <summary>
        /// Test ApiWalletWalletAddressBalanceGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletWalletAddressBalanceGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<string> address = default!;
            await _instance.ApiWalletWalletAddressBalanceGetAsync(nodeUrlOrApiAccessKey, walletName, address);
        }

        /// <summary>
        /// Test ApiWalletWalletAddressTransactionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletWalletAddressTransactionsGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<string> address = default!;
            await _instance.ApiWalletWalletAddressTransactionsGetAsync(nodeUrlOrApiAccessKey, walletName, address);
        }

        /// <summary>
        /// Test ApiWalletWalletDefaultAddressGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletWalletDefaultAddressGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> mnemonics = default!;
            Client.Option<int> addressType = default!;
            await _instance.ApiWalletWalletDefaultAddressGetAsync(nodeUrlOrApiAccessKey, mnemonics, addressType);
        }

        /// <summary>
        /// Test ApiWalletWalletDefaultAddressV2Get
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiWalletWalletDefaultAddressV2GetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> mnemonics = default!;
            Client.Option<int> addressType = default!;
            await _instance.ApiWalletWalletDefaultAddressV2GetAsync(nodeUrlOrApiAccessKey, mnemonics, addressType);
        }
    }
}
