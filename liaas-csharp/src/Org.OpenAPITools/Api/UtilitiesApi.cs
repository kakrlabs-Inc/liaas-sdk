// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUtilitiesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UtilitiesApiEvents Events { get; }

        /// <summary>
        /// Gets OTP using the blockchain information using the signature of a signed message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="signature"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiUtilitiesGetBlockchainOtpGetApiResponse"/>&gt;</returns>
        Task<IApiUtilitiesGetBlockchainOtpGetApiResponse> ApiUtilitiesGetBlockchainOtpGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets OTP using the blockchain information using the signature of a signed message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="signature"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiUtilitiesGetBlockchainOtpGetApiResponse"/>?&gt;</returns>
        Task<IApiUtilitiesGetBlockchainOtpGetApiResponse?> ApiUtilitiesGetBlockchainOtpGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verifies the OTP on the blockchain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="verifyOTPdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiUtilitiesVerifyOtpPostApiResponse"/>&gt;</returns>
        Task<IApiUtilitiesVerifyOtpPostApiResponse> ApiUtilitiesVerifyOtpPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<VerifyOTPdto> verifyOTPdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verifies the OTP on the blockchain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="verifyOTPdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiUtilitiesVerifyOtpPostApiResponse"/>?&gt;</returns>
        Task<IApiUtilitiesVerifyOtpPostApiResponse?> ApiUtilitiesVerifyOtpPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<VerifyOTPdto> verifyOTPdto = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IApiUtilitiesGetBlockchainOtpGetApiResponse"/>
    /// </summary>
    public interface IApiUtilitiesGetBlockchainOtpGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiUtilitiesVerifyOtpPostApiResponse"/>
    /// </summary>
    public interface IApiUtilitiesVerifyOtpPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UtilitiesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiUtilitiesGetBlockchainOtpGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiUtilitiesGetBlockchainOtpGet;

        internal void ExecuteOnApiUtilitiesGetBlockchainOtpGet(UtilitiesApi.ApiUtilitiesGetBlockchainOtpGetApiResponse apiResponse)
        {
            OnApiUtilitiesGetBlockchainOtpGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiUtilitiesGetBlockchainOtpGet(Exception exception)
        {
            OnErrorApiUtilitiesGetBlockchainOtpGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiUtilitiesVerifyOtpPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiUtilitiesVerifyOtpPost;

        internal void ExecuteOnApiUtilitiesVerifyOtpPost(UtilitiesApi.ApiUtilitiesVerifyOtpPostApiResponse apiResponse)
        {
            OnApiUtilitiesVerifyOtpPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiUtilitiesVerifyOtpPost(Exception exception)
        {
            OnErrorApiUtilitiesVerifyOtpPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UtilitiesApi : IUtilitiesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UtilitiesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UtilitiesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtilitiesApi(ILogger<UtilitiesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UtilitiesApiEvents utilitiesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UtilitiesApi>();
            HttpClient = httpClient;
            Events = utilitiesApiEvents;
        }

        partial void FormatApiUtilitiesGetBlockchainOtpGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> signature);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="signature"></param>
        /// <returns></returns>
        private void ValidateApiUtilitiesGetBlockchainOtpGet(Option<string> nodeUrlOrApiAccessKey, Option<string> signature)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="signature"></param>
        private void AfterApiUtilitiesGetBlockchainOtpGetDefaultImplementation(IApiUtilitiesGetBlockchainOtpGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> signature)
        {
            bool suppressDefaultLog = false;
            AfterApiUtilitiesGetBlockchainOtpGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, signature);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="signature"></param>
        partial void AfterApiUtilitiesGetBlockchainOtpGet(ref bool suppressDefaultLog, IApiUtilitiesGetBlockchainOtpGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> signature);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="signature"></param>
        private void OnErrorApiUtilitiesGetBlockchainOtpGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> signature)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiUtilitiesGetBlockchainOtpGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, signature);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="signature"></param>
        partial void OnErrorApiUtilitiesGetBlockchainOtpGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> signature);

        /// <summary>
        /// Gets OTP using the blockchain information using the signature of a signed message. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="signature"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiUtilitiesGetBlockchainOtpGetApiResponse"/>&gt;</returns>
        public async Task<IApiUtilitiesGetBlockchainOtpGetApiResponse?> ApiUtilitiesGetBlockchainOtpGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiUtilitiesGetBlockchainOtpGetAsync(nodeUrlOrApiAccessKey, signature, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets OTP using the blockchain information using the signature of a signed message. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="signature"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiUtilitiesGetBlockchainOtpGetApiResponse"/>&gt;</returns>
        public async Task<IApiUtilitiesGetBlockchainOtpGetApiResponse> ApiUtilitiesGetBlockchainOtpGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiUtilitiesGetBlockchainOtpGet(nodeUrlOrApiAccessKey, signature);

                FormatApiUtilitiesGetBlockchainOtpGet(ref nodeUrlOrApiAccessKey, ref signature);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Utilities/get-blockchain-otp"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Utilities/get-blockchain-otp");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (signature.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("signature", ClientUtils.ParameterToString(signature.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiUtilitiesGetBlockchainOtpGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiUtilitiesGetBlockchainOtpGetApiResponse>();

                        ApiUtilitiesGetBlockchainOtpGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Utilities/get-blockchain-otp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiUtilitiesGetBlockchainOtpGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, signature);

                        Events.ExecuteOnApiUtilitiesGetBlockchainOtpGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiUtilitiesGetBlockchainOtpGetDefaultImplementation(e, "/api/Utilities/get-blockchain-otp", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, signature);
                Events.ExecuteOnErrorApiUtilitiesGetBlockchainOtpGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiUtilitiesGetBlockchainOtpGetApiResponse"/>
        /// </summary>
        public partial class ApiUtilitiesGetBlockchainOtpGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiUtilitiesGetBlockchainOtpGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiUtilitiesGetBlockchainOtpGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiUtilitiesGetBlockchainOtpGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiUtilitiesGetBlockchainOtpGetApiResponse(ILogger<ApiUtilitiesGetBlockchainOtpGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiUtilitiesVerifyOtpPost(ref Option<string> nodeUrlOrApiAccessKey, Option<VerifyOTPdto> verifyOTPdto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="verifyOTPdto"></param>
        /// <returns></returns>
        private void ValidateApiUtilitiesVerifyOtpPost(Option<string> nodeUrlOrApiAccessKey, Option<VerifyOTPdto> verifyOTPdto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (verifyOTPdto.IsSet && verifyOTPdto.Value == null)
                throw new ArgumentNullException(nameof(verifyOTPdto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="verifyOTPdto"></param>
        private void AfterApiUtilitiesVerifyOtpPostDefaultImplementation(IApiUtilitiesVerifyOtpPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<VerifyOTPdto> verifyOTPdto)
        {
            bool suppressDefaultLog = false;
            AfterApiUtilitiesVerifyOtpPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, verifyOTPdto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="verifyOTPdto"></param>
        partial void AfterApiUtilitiesVerifyOtpPost(ref bool suppressDefaultLog, IApiUtilitiesVerifyOtpPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<VerifyOTPdto> verifyOTPdto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="verifyOTPdto"></param>
        private void OnErrorApiUtilitiesVerifyOtpPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<VerifyOTPdto> verifyOTPdto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiUtilitiesVerifyOtpPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, verifyOTPdto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="verifyOTPdto"></param>
        partial void OnErrorApiUtilitiesVerifyOtpPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<VerifyOTPdto> verifyOTPdto);

        /// <summary>
        /// Verifies the OTP on the blockchain. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="verifyOTPdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiUtilitiesVerifyOtpPostApiResponse"/>&gt;</returns>
        public async Task<IApiUtilitiesVerifyOtpPostApiResponse?> ApiUtilitiesVerifyOtpPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<VerifyOTPdto> verifyOTPdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiUtilitiesVerifyOtpPostAsync(nodeUrlOrApiAccessKey, verifyOTPdto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Verifies the OTP on the blockchain. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="verifyOTPdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiUtilitiesVerifyOtpPostApiResponse"/>&gt;</returns>
        public async Task<IApiUtilitiesVerifyOtpPostApiResponse> ApiUtilitiesVerifyOtpPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<VerifyOTPdto> verifyOTPdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiUtilitiesVerifyOtpPost(nodeUrlOrApiAccessKey, verifyOTPdto);

                FormatApiUtilitiesVerifyOtpPost(ref nodeUrlOrApiAccessKey, verifyOTPdto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Utilities/verify-otp"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Utilities/verify-otp");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (verifyOTPdto.IsSet)
                        httpRequestMessageLocalVar.Content = (verifyOTPdto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(verifyOTPdto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiUtilitiesVerifyOtpPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiUtilitiesVerifyOtpPostApiResponse>();

                        ApiUtilitiesVerifyOtpPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Utilities/verify-otp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiUtilitiesVerifyOtpPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, verifyOTPdto);

                        Events.ExecuteOnApiUtilitiesVerifyOtpPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiUtilitiesVerifyOtpPostDefaultImplementation(e, "/api/Utilities/verify-otp", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, verifyOTPdto);
                Events.ExecuteOnErrorApiUtilitiesVerifyOtpPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiUtilitiesVerifyOtpPostApiResponse"/>
        /// </summary>
        public partial class ApiUtilitiesVerifyOtpPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiUtilitiesVerifyOtpPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiUtilitiesVerifyOtpPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiUtilitiesVerifyOtpPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiUtilitiesVerifyOtpPostApiResponse(ILogger<ApiUtilitiesVerifyOtpPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
