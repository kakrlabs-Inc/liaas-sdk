/*
KakrLabs-SDK-Creator

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// WalletAPIService WalletAPI service
type WalletAPIService service

type ApiApiWalletAddressesGetRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
}

// 
func (r ApiApiWalletAddressesGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletAddressesGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletAddressesGetRequest) WalletName(walletName string) ApiApiWalletAddressesGetRequest {
	r.walletName = &walletName
	return r
}

func (r ApiApiWalletAddressesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletAddressesGetExecute(r)
}

/*
ApiWalletAddressesGet Get all addresses of a wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletAddressesGetRequest
*/
func (a *WalletAPIService) ApiWalletAddressesGet(ctx context.Context) ApiApiWalletAddressesGetRequest {
	return ApiApiWalletAddressesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletAddressesGetExecute(r ApiApiWalletAddressesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletAddressesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/addresses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletBalanceGetRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
}

// 
func (r ApiApiWalletBalanceGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletBalanceGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletBalanceGetRequest) WalletName(walletName string) ApiApiWalletBalanceGetRequest {
	r.walletName = &walletName
	return r
}

func (r ApiApiWalletBalanceGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletBalanceGetExecute(r)
}

/*
ApiWalletBalanceGet Get the balance of a wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletBalanceGetRequest
*/
func (a *WalletAPIService) ApiWalletBalanceGet(ctx context.Context) ApiApiWalletBalanceGetRequest {
	return ApiApiWalletBalanceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletBalanceGetExecute(r ApiApiWalletBalanceGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletBalanceGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletChangePassphrasePostRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	changePassphrasedto *ChangePassphrasedto
}

// 
func (r ApiApiWalletChangePassphrasePostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletChangePassphrasePostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletChangePassphrasePostRequest) ChangePassphrasedto(changePassphrasedto ChangePassphrasedto) ApiApiWalletChangePassphrasePostRequest {
	r.changePassphrasedto = &changePassphrasedto
	return r
}

func (r ApiApiWalletChangePassphrasePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletChangePassphrasePostExecute(r)
}

/*
ApiWalletChangePassphrasePost Change the passphrase of a wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletChangePassphrasePostRequest
*/
func (a *WalletAPIService) ApiWalletChangePassphrasePost(ctx context.Context) ApiApiWalletChangePassphrasePostRequest {
	return ApiApiWalletChangePassphrasePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletChangePassphrasePostExecute(r ApiApiWalletChangePassphrasePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletChangePassphrasePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/change-passphrase"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	// body params
	localVarPostBody = r.changePassphrasedto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletCreateEncryptedWalletPostRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	createWalletRequest *CreateWalletRequest
}

// 
func (r ApiApiWalletCreateEncryptedWalletPostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletCreateEncryptedWalletPostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletCreateEncryptedWalletPostRequest) CreateWalletRequest(createWalletRequest CreateWalletRequest) ApiApiWalletCreateEncryptedWalletPostRequest {
	r.createWalletRequest = &createWalletRequest
	return r
}

func (r ApiApiWalletCreateEncryptedWalletPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletCreateEncryptedWalletPostExecute(r)
}

/*
ApiWalletCreateEncryptedWalletPost Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletCreateEncryptedWalletPostRequest
*/
func (a *WalletAPIService) ApiWalletCreateEncryptedWalletPost(ctx context.Context) ApiApiWalletCreateEncryptedWalletPostRequest {
	return ApiApiWalletCreateEncryptedWalletPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletCreateEncryptedWalletPostExecute(r ApiApiWalletCreateEncryptedWalletPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletCreateEncryptedWalletPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/create-encrypted-wallet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	// body params
	localVarPostBody = r.createWalletRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletCreateImportableEncryptedWalletPostRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	createWalletRequest *CreateWalletRequest
}

// 
func (r ApiApiWalletCreateImportableEncryptedWalletPostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletCreateImportableEncryptedWalletPostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletCreateImportableEncryptedWalletPostRequest) CreateWalletRequest(createWalletRequest CreateWalletRequest) ApiApiWalletCreateImportableEncryptedWalletPostRequest {
	r.createWalletRequest = &createWalletRequest
	return r
}

func (r ApiApiWalletCreateImportableEncryptedWalletPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletCreateImportableEncryptedWalletPostExecute(r)
}

/*
ApiWalletCreateImportableEncryptedWalletPost Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletCreateImportableEncryptedWalletPostRequest
*/
func (a *WalletAPIService) ApiWalletCreateImportableEncryptedWalletPost(ctx context.Context) ApiApiWalletCreateImportableEncryptedWalletPostRequest {
	return ApiApiWalletCreateImportableEncryptedWalletPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletCreateImportableEncryptedWalletPostExecute(r ApiApiWalletCreateImportableEncryptedWalletPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletCreateImportableEncryptedWalletPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/create-importable-encrypted-wallet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	// body params
	localVarPostBody = r.createWalletRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletCreateImportableWalletPostRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	createWalletRequest *CreateWalletRequest
}

// 
func (r ApiApiWalletCreateImportableWalletPostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletCreateImportableWalletPostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletCreateImportableWalletPostRequest) CreateWalletRequest(createWalletRequest CreateWalletRequest) ApiApiWalletCreateImportableWalletPostRequest {
	r.createWalletRequest = &createWalletRequest
	return r
}

func (r ApiApiWalletCreateImportableWalletPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletCreateImportableWalletPostExecute(r)
}

/*
ApiWalletCreateImportableWalletPost Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletCreateImportableWalletPostRequest
*/
func (a *WalletAPIService) ApiWalletCreateImportableWalletPost(ctx context.Context) ApiApiWalletCreateImportableWalletPostRequest {
	return ApiApiWalletCreateImportableWalletPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletCreateImportableWalletPostExecute(r ApiApiWalletCreateImportableWalletPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletCreateImportableWalletPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/create-importable-wallet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	// body params
	localVarPostBody = r.createWalletRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletCreatePostRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	createWalletRequest *CreateWalletRequest
}

// 
func (r ApiApiWalletCreatePostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletCreatePostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletCreatePostRequest) CreateWalletRequest(createWalletRequest CreateWalletRequest) ApiApiWalletCreatePostRequest {
	r.createWalletRequest = &createWalletRequest
	return r
}

func (r ApiApiWalletCreatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletCreatePostExecute(r)
}

/*
ApiWalletCreatePost Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletCreatePostRequest
*/
func (a *WalletAPIService) ApiWalletCreatePost(ctx context.Context) ApiApiWalletCreatePostRequest {
	return ApiApiWalletCreatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletCreatePostExecute(r ApiApiWalletCreatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletCreatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	// body params
	localVarPostBody = r.createWalletRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletDetailsGetRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
}

// 
func (r ApiApiWalletDetailsGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletDetailsGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletDetailsGetRequest) WalletName(walletName string) ApiApiWalletDetailsGetRequest {
	r.walletName = &walletName
	return r
}

func (r ApiApiWalletDetailsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletDetailsGetExecute(r)
}

/*
ApiWalletDetailsGet Get the details of a wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletDetailsGetRequest
*/
func (a *WalletAPIService) ApiWalletDetailsGet(ctx context.Context) ApiApiWalletDetailsGetRequest {
	return ApiApiWalletDetailsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletDetailsGetExecute(r ApiApiWalletDetailsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletDetailsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "form", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "walletName", r.walletName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletEncryptWalletPostRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
	encryptWalletDto *EncryptWalletDto
}

// 
func (r ApiApiWalletEncryptWalletPostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletEncryptWalletPostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletEncryptWalletPostRequest) WalletName(walletName string) ApiApiWalletEncryptWalletPostRequest {
	r.walletName = &walletName
	return r
}

// 
func (r ApiApiWalletEncryptWalletPostRequest) EncryptWalletDto(encryptWalletDto EncryptWalletDto) ApiApiWalletEncryptWalletPostRequest {
	r.encryptWalletDto = &encryptWalletDto
	return r
}

func (r ApiApiWalletEncryptWalletPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletEncryptWalletPostExecute(r)
}

/*
ApiWalletEncryptWalletPost Encrypt a wallet. this wallet created  cannot be imported to other wallets.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletEncryptWalletPostRequest
*/
func (a *WalletAPIService) ApiWalletEncryptWalletPost(ctx context.Context) ApiApiWalletEncryptWalletPostRequest {
	return ApiApiWalletEncryptWalletPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletEncryptWalletPostExecute(r ApiApiWalletEncryptWalletPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletEncryptWalletPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/encrypt-wallet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	// body params
	localVarPostBody = r.encryptWalletDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletImportWalletPostRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	importWalletdto *ImportWalletdto
}

// 
func (r ApiApiWalletImportWalletPostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletImportWalletPostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletImportWalletPostRequest) ImportWalletdto(importWalletdto ImportWalletdto) ApiApiWalletImportWalletPostRequest {
	r.importWalletdto = &importWalletdto
	return r
}

func (r ApiApiWalletImportWalletPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletImportWalletPostExecute(r)
}

/*
ApiWalletImportWalletPost Import a wallet. this wallet created will be encrypted and can be imported to other wallets.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletImportWalletPostRequest
*/
func (a *WalletAPIService) ApiWalletImportWalletPost(ctx context.Context) ApiApiWalletImportWalletPostRequest {
	return ApiApiWalletImportWalletPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletImportWalletPostExecute(r ApiApiWalletImportWalletPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletImportWalletPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/import-wallet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	// body params
	localVarPostBody = r.importWalletdto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletOfficialAddressGetRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
}

// 
func (r ApiApiWalletOfficialAddressGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletOfficialAddressGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletOfficialAddressGetRequest) WalletName(walletName string) ApiApiWalletOfficialAddressGetRequest {
	r.walletName = &walletName
	return r
}

func (r ApiApiWalletOfficialAddressGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletOfficialAddressGetExecute(r)
}

/*
ApiWalletOfficialAddressGet Get the official address of a wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletOfficialAddressGetRequest
*/
func (a *WalletAPIService) ApiWalletOfficialAddressGet(ctx context.Context) ApiApiWalletOfficialAddressGetRequest {
	return ApiApiWalletOfficialAddressGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletOfficialAddressGetExecute(r ApiApiWalletOfficialAddressGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletOfficialAddressGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/official-address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletSetWalletMnemonicsPostRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
	encryptedPassphrase *string
	setWalletMnemonicsdto *SetWalletMnemonicsdto
}

// 
func (r ApiApiWalletSetWalletMnemonicsPostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletSetWalletMnemonicsPostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletSetWalletMnemonicsPostRequest) WalletName(walletName string) ApiApiWalletSetWalletMnemonicsPostRequest {
	r.walletName = &walletName
	return r
}

// 
func (r ApiApiWalletSetWalletMnemonicsPostRequest) EncryptedPassphrase(encryptedPassphrase string) ApiApiWalletSetWalletMnemonicsPostRequest {
	r.encryptedPassphrase = &encryptedPassphrase
	return r
}

// 
func (r ApiApiWalletSetWalletMnemonicsPostRequest) SetWalletMnemonicsdto(setWalletMnemonicsdto SetWalletMnemonicsdto) ApiApiWalletSetWalletMnemonicsPostRequest {
	r.setWalletMnemonicsdto = &setWalletMnemonicsdto
	return r
}

func (r ApiApiWalletSetWalletMnemonicsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletSetWalletMnemonicsPostExecute(r)
}

/*
ApiWalletSetWalletMnemonicsPost Set the mnemonics of a wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletSetWalletMnemonicsPostRequest
*/
func (a *WalletAPIService) ApiWalletSetWalletMnemonicsPost(ctx context.Context) ApiApiWalletSetWalletMnemonicsPostRequest {
	return ApiApiWalletSetWalletMnemonicsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletSetWalletMnemonicsPostExecute(r ApiApiWalletSetWalletMnemonicsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletSetWalletMnemonicsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/set-wallet-mnemonics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	if r.encryptedPassphrase != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "encryptedPassphrase", r.encryptedPassphrase, "simple", "")
	}
	// body params
	localVarPostBody = r.setWalletMnemonicsdto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletSignWalletMessagePostRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
	signMessageUsingWalletdto *SignMessageUsingWalletdto
}

// 
func (r ApiApiWalletSignWalletMessagePostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletSignWalletMessagePostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletSignWalletMessagePostRequest) WalletName(walletName string) ApiApiWalletSignWalletMessagePostRequest {
	r.walletName = &walletName
	return r
}

// 
func (r ApiApiWalletSignWalletMessagePostRequest) SignMessageUsingWalletdto(signMessageUsingWalletdto SignMessageUsingWalletdto) ApiApiWalletSignWalletMessagePostRequest {
	r.signMessageUsingWalletdto = &signMessageUsingWalletdto
	return r
}

func (r ApiApiWalletSignWalletMessagePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletSignWalletMessagePostExecute(r)
}

/*
ApiWalletSignWalletMessagePost Sign a message using the wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletSignWalletMessagePostRequest
*/
func (a *WalletAPIService) ApiWalletSignWalletMessagePost(ctx context.Context) ApiApiWalletSignWalletMessagePostRequest {
	return ApiApiWalletSignWalletMessagePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletSignWalletMessagePostExecute(r ApiApiWalletSignWalletMessagePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletSignWalletMessagePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/sign-wallet-message"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	// body params
	localVarPostBody = r.signMessageUsingWalletdto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletTransactionsGetRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
	skip *int32
	count *int32
}

// 
func (r ApiApiWalletTransactionsGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletTransactionsGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletTransactionsGetRequest) WalletName(walletName string) ApiApiWalletTransactionsGetRequest {
	r.walletName = &walletName
	return r
}

// 
func (r ApiApiWalletTransactionsGetRequest) Skip(skip int32) ApiApiWalletTransactionsGetRequest {
	r.skip = &skip
	return r
}

// 
func (r ApiApiWalletTransactionsGetRequest) Count(count int32) ApiApiWalletTransactionsGetRequest {
	r.count = &count
	return r
}

func (r ApiApiWalletTransactionsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletTransactionsGetExecute(r)
}

/*
ApiWalletTransactionsGet Get the transactions of a wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletTransactionsGetRequest
*/
func (a *WalletAPIService) ApiWalletTransactionsGet(ctx context.Context) ApiApiWalletTransactionsGetRequest {
	return ApiApiWalletTransactionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletTransactionsGetExecute(r ApiApiWalletTransactionsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletTransactionsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/transactions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "form", "")
	} else {
		var defaultValue int32 = 10
		r.skip = &defaultValue
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	} else {
		var defaultValue int32 = 1
		r.count = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletWalletAddressBalanceGetRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
	address *string
}

// 
func (r ApiApiWalletWalletAddressBalanceGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletWalletAddressBalanceGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletWalletAddressBalanceGetRequest) WalletName(walletName string) ApiApiWalletWalletAddressBalanceGetRequest {
	r.walletName = &walletName
	return r
}

// 
func (r ApiApiWalletWalletAddressBalanceGetRequest) Address(address string) ApiApiWalletWalletAddressBalanceGetRequest {
	r.address = &address
	return r
}

func (r ApiApiWalletWalletAddressBalanceGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletWalletAddressBalanceGetExecute(r)
}

/*
ApiWalletWalletAddressBalanceGet Get the balance of a specific address in a wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletWalletAddressBalanceGetRequest
*/
func (a *WalletAPIService) ApiWalletWalletAddressBalanceGet(ctx context.Context) ApiApiWalletWalletAddressBalanceGetRequest {
	return ApiApiWalletWalletAddressBalanceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletWalletAddressBalanceGetExecute(r ApiApiWalletWalletAddressBalanceGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletWalletAddressBalanceGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/wallet-address-balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletWalletAddressTransactionsGetRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
	address *string
}

// 
func (r ApiApiWalletWalletAddressTransactionsGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletWalletAddressTransactionsGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletWalletAddressTransactionsGetRequest) WalletName(walletName string) ApiApiWalletWalletAddressTransactionsGetRequest {
	r.walletName = &walletName
	return r
}

// 
func (r ApiApiWalletWalletAddressTransactionsGetRequest) Address(address string) ApiApiWalletWalletAddressTransactionsGetRequest {
	r.address = &address
	return r
}

func (r ApiApiWalletWalletAddressTransactionsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletWalletAddressTransactionsGetExecute(r)
}

/*
ApiWalletWalletAddressTransactionsGet Get the transactions of a specific address in a wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletWalletAddressTransactionsGetRequest
*/
func (a *WalletAPIService) ApiWalletWalletAddressTransactionsGet(ctx context.Context) ApiApiWalletWalletAddressTransactionsGetRequest {
	return ApiApiWalletWalletAddressTransactionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletWalletAddressTransactionsGetExecute(r ApiApiWalletWalletAddressTransactionsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletWalletAddressTransactionsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/wallet-address-transactions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "walletName", r.walletName, "form", "")
	}
	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletWalletDefaultAddressGetRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	mnemonics *string
	addressType *int32
}

// 
func (r ApiApiWalletWalletDefaultAddressGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletWalletDefaultAddressGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletWalletDefaultAddressGetRequest) Mnemonics(mnemonics string) ApiApiWalletWalletDefaultAddressGetRequest {
	r.mnemonics = &mnemonics
	return r
}

// 
func (r ApiApiWalletWalletDefaultAddressGetRequest) AddressType(addressType int32) ApiApiWalletWalletDefaultAddressGetRequest {
	r.addressType = &addressType
	return r
}

func (r ApiApiWalletWalletDefaultAddressGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletWalletDefaultAddressGetExecute(r)
}

/*
ApiWalletWalletDefaultAddressGet default addresss of a wallet without private key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletWalletDefaultAddressGetRequest
*/
func (a *WalletAPIService) ApiWalletWalletDefaultAddressGet(ctx context.Context) ApiApiWalletWalletDefaultAddressGetRequest {
	return ApiApiWalletWalletDefaultAddressGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletWalletDefaultAddressGetExecute(r ApiApiWalletWalletDefaultAddressGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletWalletDefaultAddressGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/wallet-default-address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.addressType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addressType", r.addressType, "form", "")
	} else {
		var defaultValue int32 = 1
		r.addressType = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.mnemonics != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "mnemonics", r.mnemonics, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiWalletWalletDefaultAddressV2GetRequest struct {
	ctx context.Context
	ApiService *WalletAPIService
	nodeUrlOrApiAccessKey *string
	mnemonics *string
	addressType *int32
}

// 
func (r ApiApiWalletWalletDefaultAddressV2GetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiWalletWalletDefaultAddressV2GetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiWalletWalletDefaultAddressV2GetRequest) Mnemonics(mnemonics string) ApiApiWalletWalletDefaultAddressV2GetRequest {
	r.mnemonics = &mnemonics
	return r
}

// 
func (r ApiApiWalletWalletDefaultAddressV2GetRequest) AddressType(addressType int32) ApiApiWalletWalletDefaultAddressV2GetRequest {
	r.addressType = &addressType
	return r
}

func (r ApiApiWalletWalletDefaultAddressV2GetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWalletWalletDefaultAddressV2GetExecute(r)
}

/*
ApiWalletWalletDefaultAddressV2Get default addresss of a wallet with private key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiWalletWalletDefaultAddressV2GetRequest
*/
func (a *WalletAPIService) ApiWalletWalletDefaultAddressV2Get(ctx context.Context) ApiApiWalletWalletDefaultAddressV2GetRequest {
	return ApiApiWalletWalletDefaultAddressV2GetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WalletAPIService) ApiWalletWalletDefaultAddressV2GetExecute(r ApiApiWalletWalletDefaultAddressV2GetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.ApiWalletWalletDefaultAddressV2Get")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Wallet/wallet-default-address-v2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.addressType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addressType", r.addressType, "form", "")
	} else {
		var defaultValue int32 = 1
		r.addressType = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.mnemonics != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "mnemonics", r.mnemonics, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
