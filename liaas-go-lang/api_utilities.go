/*
KakrLabs-SDK-Creator

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// UtilitiesAPIService UtilitiesAPI service
type UtilitiesAPIService service

type ApiApiUtilitiesGetBlockchainOtpGetRequest struct {
	ctx context.Context
	ApiService *UtilitiesAPIService
	nodeUrlOrApiAccessKey *string
	signature *string
}

// 
func (r ApiApiUtilitiesGetBlockchainOtpGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiUtilitiesGetBlockchainOtpGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiUtilitiesGetBlockchainOtpGetRequest) Signature(signature string) ApiApiUtilitiesGetBlockchainOtpGetRequest {
	r.signature = &signature
	return r
}

func (r ApiApiUtilitiesGetBlockchainOtpGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiUtilitiesGetBlockchainOtpGetExecute(r)
}

/*
ApiUtilitiesGetBlockchainOtpGet Gets OTP using the blockchain information using the signature of a signed message.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiUtilitiesGetBlockchainOtpGetRequest
*/
func (a *UtilitiesAPIService) ApiUtilitiesGetBlockchainOtpGet(ctx context.Context) ApiApiUtilitiesGetBlockchainOtpGetRequest {
	return ApiApiUtilitiesGetBlockchainOtpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UtilitiesAPIService) ApiUtilitiesGetBlockchainOtpGetExecute(r ApiApiUtilitiesGetBlockchainOtpGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UtilitiesAPIService.ApiUtilitiesGetBlockchainOtpGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Utilities/get-blockchain-otp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.signature != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "signature", r.signature, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiUtilitiesVerifyOtpPostRequest struct {
	ctx context.Context
	ApiService *UtilitiesAPIService
	nodeUrlOrApiAccessKey *string
	verifyOTPdto *VerifyOTPdto
}

// 
func (r ApiApiUtilitiesVerifyOtpPostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiUtilitiesVerifyOtpPostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiUtilitiesVerifyOtpPostRequest) VerifyOTPdto(verifyOTPdto VerifyOTPdto) ApiApiUtilitiesVerifyOtpPostRequest {
	r.verifyOTPdto = &verifyOTPdto
	return r
}

func (r ApiApiUtilitiesVerifyOtpPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiUtilitiesVerifyOtpPostExecute(r)
}

/*
ApiUtilitiesVerifyOtpPost Verifies the OTP on the blockchain.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiUtilitiesVerifyOtpPostRequest
*/
func (a *UtilitiesAPIService) ApiUtilitiesVerifyOtpPost(ctx context.Context) ApiApiUtilitiesVerifyOtpPostRequest {
	return ApiApiUtilitiesVerifyOtpPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UtilitiesAPIService) ApiUtilitiesVerifyOtpPostExecute(r ApiApiUtilitiesVerifyOtpPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UtilitiesAPIService.ApiUtilitiesVerifyOtpPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Utilities/verify-otp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	// body params
	localVarPostBody = r.verifyOTPdto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
