// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SignMessagedto
    /// </summary>
    public partial class SignMessagedto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignMessagedto" /> class.
        /// </summary>
        /// <param name="message">message</param>
        /// <param name="addressPrivatKey">addressPrivatKey</param>
        [JsonConstructor]
        public SignMessagedto(string message, string addressPrivatKey)
        {
            Message = message;
            AddressPrivatKey = addressPrivatKey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets AddressPrivatKey
        /// </summary>
        [JsonPropertyName("addressPrivatKey")]
        public string AddressPrivatKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignMessagedto {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  AddressPrivatKey: ").Append(AddressPrivatKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Message (string) minLength
            if (this.Message != null && this.Message.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Message, length must be greater than 1.", new [] { "Message" });
            }

            // AddressPrivatKey (string) minLength
            if (this.AddressPrivatKey != null && this.AddressPrivatKey.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AddressPrivatKey, length must be greater than 1.", new [] { "AddressPrivatKey" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SignMessagedto" />
    /// </summary>
    public class SignMessagedtoJsonConverter : JsonConverter<SignMessagedto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SignMessagedto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SignMessagedto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> message = default;
            Option<string?> addressPrivatKey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressPrivatKey":
                            addressPrivatKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class SignMessagedto.", nameof(message));

            if (!addressPrivatKey.IsSet)
                throw new ArgumentException("Property is required for class SignMessagedto.", nameof(addressPrivatKey));

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class SignMessagedto.");

            if (addressPrivatKey.IsSet && addressPrivatKey.Value == null)
                throw new ArgumentNullException(nameof(addressPrivatKey), "Property is not nullable for class SignMessagedto.");

            return new SignMessagedto(message.Value!, addressPrivatKey.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SignMessagedto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="signMessagedto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SignMessagedto signMessagedto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, signMessagedto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SignMessagedto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="signMessagedto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SignMessagedto signMessagedto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (signMessagedto.Message == null)
                throw new ArgumentNullException(nameof(signMessagedto.Message), "Property is required for class SignMessagedto.");

            if (signMessagedto.AddressPrivatKey == null)
                throw new ArgumentNullException(nameof(signMessagedto.AddressPrivatKey), "Property is required for class SignMessagedto.");

            writer.WriteString("message", signMessagedto.Message);

            writer.WriteString("addressPrivatKey", signMessagedto.AddressPrivatKey);
        }
    }
}
