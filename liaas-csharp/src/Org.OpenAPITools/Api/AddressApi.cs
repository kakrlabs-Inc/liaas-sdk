// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAddressApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AddressApiEvents Events { get; }

        /// <summary>
        /// address balance - returns the confirmed and unconfirmed balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressBalanceGetApiResponse"/>&gt;</returns>
        Task<IApiAddressAddressBalanceGetApiResponse> ApiAddressAddressBalanceGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// address balance - returns the confirmed and unconfirmed balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressBalanceGetApiResponse"/>?&gt;</returns>
        Task<IApiAddressAddressBalanceGetApiResponse?> ApiAddressAddressBalanceGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get address details. all address details are returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressDetailsGetApiResponse"/>&gt;</returns>
        Task<IApiAddressAddressDetailsGetApiResponse> ApiAddressAddressDetailsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get address details. all address details are returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressDetailsGetApiResponse"/>?&gt;</returns>
        Task<IApiAddressAddressDetailsGetApiResponse?> ApiAddressAddressDetailsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the address private key using encrypted passphrase
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressPrivateKeyGetApiResponse"/>&gt;</returns>
        Task<IApiAddressAddressPrivateKeyGetApiResponse> ApiAddressAddressPrivateKeyGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> encryptedPassphrase = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the address private key using encrypted passphrase
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressPrivateKeyGetApiResponse"/>?&gt;</returns>
        Task<IApiAddressAddressPrivateKeyGetApiResponse?> ApiAddressAddressPrivateKeyGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> encryptedPassphrase = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the address private key using mnemonics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressPrivateKeyV2GetApiResponse"/>&gt;</returns>
        Task<IApiAddressAddressPrivateKeyV2GetApiResponse> ApiAddressAddressPrivateKeyV2GetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> mnemonics = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the address private key using mnemonics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressPrivateKeyV2GetApiResponse"/>?&gt;</returns>
        Task<IApiAddressAddressPrivateKeyV2GetApiResponse?> ApiAddressAddressPrivateKeyV2GetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> mnemonics = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// retruns all transactions of an address without wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressTransactionGetApiResponse"/>&gt;</returns>
        Task<IApiAddressAddressTransactionGetApiResponse> ApiAddressAddressTransactionGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> address = default, Option<int> take = default, Option<int> skip = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// retruns all transactions of an address without wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressTransactionGetApiResponse"/>?&gt;</returns>
        Task<IApiAddressAddressTransactionGetApiResponse?> ApiAddressAddressTransactionGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> address = default, Option<int> take = default, Option<int> skip = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="createMultiSignatureAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressCreateMutiSigAddressPostApiResponse"/>&gt;</returns>
        Task<IApiAddressCreateMutiSigAddressPostApiResponse> ApiAddressCreateMutiSigAddressPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="createMultiSignatureAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressCreateMutiSigAddressPostApiResponse"/>?&gt;</returns>
        Task<IApiAddressCreateMutiSigAddressPostApiResponse?> ApiAddressCreateMutiSigAddressPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new address in a particular wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="createAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressCreatePostApiResponse"/>&gt;</returns>
        Task<IApiAddressCreatePostApiResponse> ApiAddressCreatePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<CreateAddressdto> createAddressdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new address in a particular wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="createAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressCreatePostApiResponse"/>?&gt;</returns>
        Task<IApiAddressCreatePostApiResponse?> ApiAddressCreatePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<CreateAddressdto> createAddressdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate a default address for a wallet. This address can be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="generateDefaultAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressGenerateDefaultAddressPostApiResponse"/>&gt;</returns>
        Task<IApiAddressGenerateDefaultAddressPostApiResponse> ApiAddressGenerateDefaultAddressPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<GenerateDefaultAddressdto> generateDefaultAddressdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate a default address for a wallet. This address can be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="generateDefaultAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressGenerateDefaultAddressPostApiResponse"/>?&gt;</returns>
        Task<IApiAddressGenerateDefaultAddressPostApiResponse?> ApiAddressGenerateDefaultAddressPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<GenerateDefaultAddressdto> generateDefaultAddressdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressScreenAddressGetApiResponse"/>&gt;</returns>
        Task<IApiAddressScreenAddressGetApiResponse> ApiAddressScreenAddressGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> mnemonics = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressScreenAddressGetApiResponse"/>?&gt;</returns>
        Task<IApiAddressScreenAddressGetApiResponse?> ApiAddressScreenAddressGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> mnemonics = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// sign a message with address private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="signMessagedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressSignMessagePostApiResponse"/>&gt;</returns>
        Task<IApiAddressSignMessagePostApiResponse> ApiAddressSignMessagePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<SignMessagedto> signMessagedto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// sign a message with address private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="signMessagedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressSignMessagePostApiResponse"/>?&gt;</returns>
        Task<IApiAddressSignMessagePostApiResponse?> ApiAddressSignMessagePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<SignMessagedto> signMessagedto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// verify signed message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="verifyMessagedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressVerifyMessagePostApiResponse"/>&gt;</returns>
        Task<IApiAddressVerifyMessagePostApiResponse> ApiAddressVerifyMessagePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<VerifyMessagedto> verifyMessagedto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// verify signed message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="verifyMessagedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressVerifyMessagePostApiResponse"/>?&gt;</returns>
        Task<IApiAddressVerifyMessagePostApiResponse?> ApiAddressVerifyMessagePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<VerifyMessagedto> verifyMessagedto = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IApiAddressAddressBalanceGetApiResponse"/>
    /// </summary>
    public interface IApiAddressAddressBalanceGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiAddressAddressDetailsGetApiResponse"/>
    /// </summary>
    public interface IApiAddressAddressDetailsGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiAddressAddressPrivateKeyGetApiResponse"/>
    /// </summary>
    public interface IApiAddressAddressPrivateKeyGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiAddressAddressPrivateKeyV2GetApiResponse"/>
    /// </summary>
    public interface IApiAddressAddressPrivateKeyV2GetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiAddressAddressTransactionGetApiResponse"/>
    /// </summary>
    public interface IApiAddressAddressTransactionGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiAddressCreateMutiSigAddressPostApiResponse"/>
    /// </summary>
    public interface IApiAddressCreateMutiSigAddressPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiAddressCreatePostApiResponse"/>
    /// </summary>
    public interface IApiAddressCreatePostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiAddressGenerateDefaultAddressPostApiResponse"/>
    /// </summary>
    public interface IApiAddressGenerateDefaultAddressPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiAddressScreenAddressGetApiResponse"/>
    /// </summary>
    public interface IApiAddressScreenAddressGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiAddressSignMessagePostApiResponse"/>
    /// </summary>
    public interface IApiAddressSignMessagePostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiAddressVerifyMessagePostApiResponse"/>
    /// </summary>
    public interface IApiAddressVerifyMessagePostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AddressApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressAddressBalanceGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressAddressBalanceGet;

        internal void ExecuteOnApiAddressAddressBalanceGet(AddressApi.ApiAddressAddressBalanceGetApiResponse apiResponse)
        {
            OnApiAddressAddressBalanceGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressAddressBalanceGet(Exception exception)
        {
            OnErrorApiAddressAddressBalanceGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressAddressDetailsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressAddressDetailsGet;

        internal void ExecuteOnApiAddressAddressDetailsGet(AddressApi.ApiAddressAddressDetailsGetApiResponse apiResponse)
        {
            OnApiAddressAddressDetailsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressAddressDetailsGet(Exception exception)
        {
            OnErrorApiAddressAddressDetailsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressAddressPrivateKeyGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressAddressPrivateKeyGet;

        internal void ExecuteOnApiAddressAddressPrivateKeyGet(AddressApi.ApiAddressAddressPrivateKeyGetApiResponse apiResponse)
        {
            OnApiAddressAddressPrivateKeyGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressAddressPrivateKeyGet(Exception exception)
        {
            OnErrorApiAddressAddressPrivateKeyGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressAddressPrivateKeyV2Get;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressAddressPrivateKeyV2Get;

        internal void ExecuteOnApiAddressAddressPrivateKeyV2Get(AddressApi.ApiAddressAddressPrivateKeyV2GetApiResponse apiResponse)
        {
            OnApiAddressAddressPrivateKeyV2Get?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressAddressPrivateKeyV2Get(Exception exception)
        {
            OnErrorApiAddressAddressPrivateKeyV2Get?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressAddressTransactionGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressAddressTransactionGet;

        internal void ExecuteOnApiAddressAddressTransactionGet(AddressApi.ApiAddressAddressTransactionGetApiResponse apiResponse)
        {
            OnApiAddressAddressTransactionGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressAddressTransactionGet(Exception exception)
        {
            OnErrorApiAddressAddressTransactionGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressCreateMutiSigAddressPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressCreateMutiSigAddressPost;

        internal void ExecuteOnApiAddressCreateMutiSigAddressPost(AddressApi.ApiAddressCreateMutiSigAddressPostApiResponse apiResponse)
        {
            OnApiAddressCreateMutiSigAddressPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressCreateMutiSigAddressPost(Exception exception)
        {
            OnErrorApiAddressCreateMutiSigAddressPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressCreatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressCreatePost;

        internal void ExecuteOnApiAddressCreatePost(AddressApi.ApiAddressCreatePostApiResponse apiResponse)
        {
            OnApiAddressCreatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressCreatePost(Exception exception)
        {
            OnErrorApiAddressCreatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressGenerateDefaultAddressPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressGenerateDefaultAddressPost;

        internal void ExecuteOnApiAddressGenerateDefaultAddressPost(AddressApi.ApiAddressGenerateDefaultAddressPostApiResponse apiResponse)
        {
            OnApiAddressGenerateDefaultAddressPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressGenerateDefaultAddressPost(Exception exception)
        {
            OnErrorApiAddressGenerateDefaultAddressPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressScreenAddressGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressScreenAddressGet;

        internal void ExecuteOnApiAddressScreenAddressGet(AddressApi.ApiAddressScreenAddressGetApiResponse apiResponse)
        {
            OnApiAddressScreenAddressGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressScreenAddressGet(Exception exception)
        {
            OnErrorApiAddressScreenAddressGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressSignMessagePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressSignMessagePost;

        internal void ExecuteOnApiAddressSignMessagePost(AddressApi.ApiAddressSignMessagePostApiResponse apiResponse)
        {
            OnApiAddressSignMessagePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressSignMessagePost(Exception exception)
        {
            OnErrorApiAddressSignMessagePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiAddressVerifyMessagePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiAddressVerifyMessagePost;

        internal void ExecuteOnApiAddressVerifyMessagePost(AddressApi.ApiAddressVerifyMessagePostApiResponse apiResponse)
        {
            OnApiAddressVerifyMessagePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiAddressVerifyMessagePost(Exception exception)
        {
            OnErrorApiAddressVerifyMessagePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AddressApi : IAddressApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AddressApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AddressApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressApi(ILogger<AddressApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AddressApiEvents addressApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AddressApi>();
            HttpClient = httpClient;
            Events = addressApiEvents;
        }

        partial void FormatApiAddressAddressBalanceGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> address);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        private void ValidateApiAddressAddressBalanceGet(Option<string> nodeUrlOrApiAccessKey, Option<string> address)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="address"></param>
        private void AfterApiAddressAddressBalanceGetDefaultImplementation(IApiAddressAddressBalanceGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> address)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressAddressBalanceGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, address);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="address"></param>
        partial void AfterApiAddressAddressBalanceGet(ref bool suppressDefaultLog, IApiAddressAddressBalanceGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> address);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="address"></param>
        private void OnErrorApiAddressAddressBalanceGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> address)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressAddressBalanceGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, address);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="address"></param>
        partial void OnErrorApiAddressAddressBalanceGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> address);

        /// <summary>
        /// address balance - returns the confirmed and unconfirmed balance 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressBalanceGetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressAddressBalanceGetApiResponse?> ApiAddressAddressBalanceGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressAddressBalanceGetAsync(nodeUrlOrApiAccessKey, address, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// address balance - returns the confirmed and unconfirmed balance 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressBalanceGetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressAddressBalanceGetApiResponse> ApiAddressAddressBalanceGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressAddressBalanceGet(nodeUrlOrApiAccessKey, address);

                FormatApiAddressAddressBalanceGet(ref nodeUrlOrApiAccessKey, ref address);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/address-balance"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/address-balance");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (address.IsSet)
                        parseQueryStringLocalVar["address"] = ClientUtils.ParameterToString(address.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressAddressBalanceGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressAddressBalanceGetApiResponse>();

                        ApiAddressAddressBalanceGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/address-balance", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressAddressBalanceGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, address);

                        Events.ExecuteOnApiAddressAddressBalanceGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressAddressBalanceGetDefaultImplementation(e, "/api/Address/address-balance", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, address);
                Events.ExecuteOnErrorApiAddressAddressBalanceGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressAddressBalanceGetApiResponse"/>
        /// </summary>
        public partial class ApiAddressAddressBalanceGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressAddressBalanceGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressAddressBalanceGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressAddressBalanceGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressAddressBalanceGetApiResponse(ILogger<ApiAddressAddressBalanceGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiAddressAddressDetailsGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, ref Option<string> address);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        private void ValidateApiAddressAddressDetailsGet(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        private void AfterApiAddressAddressDetailsGetDefaultImplementation(IApiAddressAddressDetailsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressAddressDetailsGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, address);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        partial void AfterApiAddressAddressDetailsGet(ref bool suppressDefaultLog, IApiAddressAddressDetailsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        private void OnErrorApiAddressAddressDetailsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressAddressDetailsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, address);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        partial void OnErrorApiAddressAddressDetailsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address);

        /// <summary>
        /// Get address details. all address details are returned. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressAddressDetailsGetApiResponse?> ApiAddressAddressDetailsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressAddressDetailsGetAsync(nodeUrlOrApiAccessKey, walletName, address, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get address details. all address details are returned. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressAddressDetailsGetApiResponse> ApiAddressAddressDetailsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressAddressDetailsGet(nodeUrlOrApiAccessKey, walletName, address);

                FormatApiAddressAddressDetailsGet(ref nodeUrlOrApiAccessKey, ref walletName, ref address);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/address-details"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/address-details");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (address.IsSet)
                        parseQueryStringLocalVar["address"] = ClientUtils.ParameterToString(address.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressAddressDetailsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressAddressDetailsGetApiResponse>();

                        ApiAddressAddressDetailsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/address-details", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressAddressDetailsGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, address);

                        Events.ExecuteOnApiAddressAddressDetailsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressAddressDetailsGetDefaultImplementation(e, "/api/Address/address-details", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, address);
                Events.ExecuteOnErrorApiAddressAddressDetailsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressAddressDetailsGetApiResponse"/>
        /// </summary>
        public partial class ApiAddressAddressDetailsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressAddressDetailsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressAddressDetailsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressAddressDetailsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressAddressDetailsGetApiResponse(ILogger<ApiAddressAddressDetailsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiAddressAddressPrivateKeyGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> wallet, ref Option<string> encryptedPassphrase, ref Option<string> address);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        private void ValidateApiAddressAddressPrivateKeyGet(Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> encryptedPassphrase, Option<string> address)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (wallet.IsSet && wallet.Value == null)
                throw new ArgumentNullException(nameof(wallet));

            if (encryptedPassphrase.IsSet && encryptedPassphrase.Value == null)
                throw new ArgumentNullException(nameof(encryptedPassphrase));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="address"></param>
        private void AfterApiAddressAddressPrivateKeyGetDefaultImplementation(IApiAddressAddressPrivateKeyGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> encryptedPassphrase, Option<string> address)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressAddressPrivateKeyGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="address"></param>
        partial void AfterApiAddressAddressPrivateKeyGet(ref bool suppressDefaultLog, IApiAddressAddressPrivateKeyGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> encryptedPassphrase, Option<string> address);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="address"></param>
        private void OnErrorApiAddressAddressPrivateKeyGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> encryptedPassphrase, Option<string> address)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressAddressPrivateKeyGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="address"></param>
        partial void OnErrorApiAddressAddressPrivateKeyGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> encryptedPassphrase, Option<string> address);

        /// <summary>
        /// Get the address private key using encrypted passphrase 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressPrivateKeyGetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressAddressPrivateKeyGetApiResponse?> ApiAddressAddressPrivateKeyGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> encryptedPassphrase = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressAddressPrivateKeyGetAsync(nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the address private key using encrypted passphrase 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressPrivateKeyGetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressAddressPrivateKeyGetApiResponse> ApiAddressAddressPrivateKeyGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> encryptedPassphrase = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressAddressPrivateKeyGet(nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address);

                FormatApiAddressAddressPrivateKeyGet(ref nodeUrlOrApiAccessKey, ref wallet, ref encryptedPassphrase, ref address);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/address-private-key"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/address-private-key");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (address.IsSet)
                        parseQueryStringLocalVar["address"] = ClientUtils.ParameterToString(address.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (wallet.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("wallet", ClientUtils.ParameterToString(wallet.Value));

                    if (encryptedPassphrase.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("encryptedPassphrase", ClientUtils.ParameterToString(encryptedPassphrase.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressAddressPrivateKeyGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressAddressPrivateKeyGetApiResponse>();

                        ApiAddressAddressPrivateKeyGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/address-private-key", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressAddressPrivateKeyGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address);

                        Events.ExecuteOnApiAddressAddressPrivateKeyGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressAddressPrivateKeyGetDefaultImplementation(e, "/api/Address/address-private-key", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address);
                Events.ExecuteOnErrorApiAddressAddressPrivateKeyGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressAddressPrivateKeyGetApiResponse"/>
        /// </summary>
        public partial class ApiAddressAddressPrivateKeyGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressAddressPrivateKeyGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressAddressPrivateKeyGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressAddressPrivateKeyGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressAddressPrivateKeyGetApiResponse(ILogger<ApiAddressAddressPrivateKeyGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiAddressAddressPrivateKeyV2Get(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> wallet, ref Option<string> mnemonics, ref Option<string> address);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="mnemonics"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        private void ValidateApiAddressAddressPrivateKeyV2Get(Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> mnemonics, Option<string> address)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (wallet.IsSet && wallet.Value == null)
                throw new ArgumentNullException(nameof(wallet));

            if (mnemonics.IsSet && mnemonics.Value == null)
                throw new ArgumentNullException(nameof(mnemonics));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="mnemonics"></param>
        /// <param name="address"></param>
        private void AfterApiAddressAddressPrivateKeyV2GetDefaultImplementation(IApiAddressAddressPrivateKeyV2GetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> mnemonics, Option<string> address)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressAddressPrivateKeyV2Get(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, wallet, mnemonics, address);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="mnemonics"></param>
        /// <param name="address"></param>
        partial void AfterApiAddressAddressPrivateKeyV2Get(ref bool suppressDefaultLog, IApiAddressAddressPrivateKeyV2GetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> mnemonics, Option<string> address);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="mnemonics"></param>
        /// <param name="address"></param>
        private void OnErrorApiAddressAddressPrivateKeyV2GetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> mnemonics, Option<string> address)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressAddressPrivateKeyV2Get(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, wallet, mnemonics, address);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="mnemonics"></param>
        /// <param name="address"></param>
        partial void OnErrorApiAddressAddressPrivateKeyV2Get(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> mnemonics, Option<string> address);

        /// <summary>
        /// Get the address private key using mnemonics 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressPrivateKeyV2GetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressAddressPrivateKeyV2GetApiResponse?> ApiAddressAddressPrivateKeyV2GetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> mnemonics = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressAddressPrivateKeyV2GetAsync(nodeUrlOrApiAccessKey, wallet, mnemonics, address, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the address private key using mnemonics 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressPrivateKeyV2GetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressAddressPrivateKeyV2GetApiResponse> ApiAddressAddressPrivateKeyV2GetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> mnemonics = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressAddressPrivateKeyV2Get(nodeUrlOrApiAccessKey, wallet, mnemonics, address);

                FormatApiAddressAddressPrivateKeyV2Get(ref nodeUrlOrApiAccessKey, ref wallet, ref mnemonics, ref address);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/address-private-key-v2"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/address-private-key-v2");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (address.IsSet)
                        parseQueryStringLocalVar["address"] = ClientUtils.ParameterToString(address.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (wallet.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("wallet", ClientUtils.ParameterToString(wallet.Value));

                    if (mnemonics.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("mnemonics", ClientUtils.ParameterToString(mnemonics.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressAddressPrivateKeyV2GetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressAddressPrivateKeyV2GetApiResponse>();

                        ApiAddressAddressPrivateKeyV2GetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/address-private-key-v2", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressAddressPrivateKeyV2GetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, wallet, mnemonics, address);

                        Events.ExecuteOnApiAddressAddressPrivateKeyV2Get(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressAddressPrivateKeyV2GetDefaultImplementation(e, "/api/Address/address-private-key-v2", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, wallet, mnemonics, address);
                Events.ExecuteOnErrorApiAddressAddressPrivateKeyV2Get(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressAddressPrivateKeyV2GetApiResponse"/>
        /// </summary>
        public partial class ApiAddressAddressPrivateKeyV2GetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressAddressPrivateKeyV2GetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressAddressPrivateKeyV2GetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressAddressPrivateKeyV2GetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressAddressPrivateKeyV2GetApiResponse(ILogger<ApiAddressAddressPrivateKeyV2GetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiAddressAddressTransactionGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> address, ref Option<int> take, ref Option<int> skip);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        private void ValidateApiAddressAddressTransactionGet(Option<string> nodeUrlOrApiAccessKey, Option<string> address)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="address"></param>
        /// <param name="take"></param>
        /// <param name="skip"></param>
        private void AfterApiAddressAddressTransactionGetDefaultImplementation(IApiAddressAddressTransactionGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> address, Option<int> take, Option<int> skip)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressAddressTransactionGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, address, take, skip);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="address"></param>
        /// <param name="take"></param>
        /// <param name="skip"></param>
        partial void AfterApiAddressAddressTransactionGet(ref bool suppressDefaultLog, IApiAddressAddressTransactionGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> address, Option<int> take, Option<int> skip);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="address"></param>
        /// <param name="take"></param>
        /// <param name="skip"></param>
        private void OnErrorApiAddressAddressTransactionGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> address, Option<int> take, Option<int> skip)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressAddressTransactionGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, address, take, skip);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="address"></param>
        /// <param name="take"></param>
        /// <param name="skip"></param>
        partial void OnErrorApiAddressAddressTransactionGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> address, Option<int> take, Option<int> skip);

        /// <summary>
        /// retruns all transactions of an address without wallet 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressTransactionGetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressAddressTransactionGetApiResponse?> ApiAddressAddressTransactionGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> address = default, Option<int> take = default, Option<int> skip = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressAddressTransactionGetAsync(nodeUrlOrApiAccessKey, address, take, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// retruns all transactions of an address without wallet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressAddressTransactionGetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressAddressTransactionGetApiResponse> ApiAddressAddressTransactionGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> address = default, Option<int> take = default, Option<int> skip = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressAddressTransactionGet(nodeUrlOrApiAccessKey, address);

                FormatApiAddressAddressTransactionGet(ref nodeUrlOrApiAccessKey, ref address, ref take, ref skip);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/address-transaction"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/address-transaction");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (address.IsSet)
                        parseQueryStringLocalVar["address"] = ClientUtils.ParameterToString(address.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressAddressTransactionGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressAddressTransactionGetApiResponse>();

                        ApiAddressAddressTransactionGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/address-transaction", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressAddressTransactionGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, address, take, skip);

                        Events.ExecuteOnApiAddressAddressTransactionGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressAddressTransactionGetDefaultImplementation(e, "/api/Address/address-transaction", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, address, take, skip);
                Events.ExecuteOnErrorApiAddressAddressTransactionGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressAddressTransactionGetApiResponse"/>
        /// </summary>
        public partial class ApiAddressAddressTransactionGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressAddressTransactionGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressAddressTransactionGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressAddressTransactionGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressAddressTransactionGetApiResponse(ILogger<ApiAddressAddressTransactionGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiAddressCreateMutiSigAddressPost(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, ref Option<string> encryptedPassphrase, Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="createMultiSignatureAddressdto"></param>
        /// <returns></returns>
        private void ValidateApiAddressCreateMutiSigAddressPost(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (encryptedPassphrase.IsSet && encryptedPassphrase.Value == null)
                throw new ArgumentNullException(nameof(encryptedPassphrase));

            if (createMultiSignatureAddressdto.IsSet && createMultiSignatureAddressdto.Value == null)
                throw new ArgumentNullException(nameof(createMultiSignatureAddressdto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="createMultiSignatureAddressdto"></param>
        private void AfterApiAddressCreateMutiSigAddressPostDefaultImplementation(IApiAddressCreateMutiSigAddressPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressCreateMutiSigAddressPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="createMultiSignatureAddressdto"></param>
        partial void AfterApiAddressCreateMutiSigAddressPost(ref bool suppressDefaultLog, IApiAddressCreateMutiSigAddressPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="createMultiSignatureAddressdto"></param>
        private void OnErrorApiAddressCreateMutiSigAddressPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressCreateMutiSigAddressPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="createMultiSignatureAddressdto"></param>
        partial void OnErrorApiAddressCreateMutiSigAddressPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto);

        /// <summary>
        /// Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="createMultiSignatureAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressCreateMutiSigAddressPostApiResponse"/>&gt;</returns>
        public async Task<IApiAddressCreateMutiSigAddressPostApiResponse?> ApiAddressCreateMutiSigAddressPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressCreateMutiSigAddressPostAsync(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="createMultiSignatureAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressCreateMutiSigAddressPostApiResponse"/>&gt;</returns>
        public async Task<IApiAddressCreateMutiSigAddressPostApiResponse> ApiAddressCreateMutiSigAddressPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressCreateMutiSigAddressPost(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto);

                FormatApiAddressCreateMutiSigAddressPost(ref nodeUrlOrApiAccessKey, ref walletName, ref encryptedPassphrase, createMultiSignatureAddressdto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/create-muti-sig-address"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/create-muti-sig-address");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    if (encryptedPassphrase.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("encryptedPassphrase", ClientUtils.ParameterToString(encryptedPassphrase.Value));

                    if (createMultiSignatureAddressdto.IsSet)
                        httpRequestMessageLocalVar.Content = (createMultiSignatureAddressdto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createMultiSignatureAddressdto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressCreateMutiSigAddressPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressCreateMutiSigAddressPostApiResponse>();

                        ApiAddressCreateMutiSigAddressPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/create-muti-sig-address", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressCreateMutiSigAddressPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto);

                        Events.ExecuteOnApiAddressCreateMutiSigAddressPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressCreateMutiSigAddressPostDefaultImplementation(e, "/api/Address/create-muti-sig-address", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto);
                Events.ExecuteOnErrorApiAddressCreateMutiSigAddressPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressCreateMutiSigAddressPostApiResponse"/>
        /// </summary>
        public partial class ApiAddressCreateMutiSigAddressPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressCreateMutiSigAddressPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressCreateMutiSigAddressPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressCreateMutiSigAddressPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressCreateMutiSigAddressPostApiResponse(ILogger<ApiAddressCreateMutiSigAddressPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiAddressCreatePost(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, ref Option<string> encryptedPassphrase, Option<CreateAddressdto> createAddressdto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="createAddressdto"></param>
        /// <returns></returns>
        private void ValidateApiAddressCreatePost(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<CreateAddressdto> createAddressdto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (encryptedPassphrase.IsSet && encryptedPassphrase.Value == null)
                throw new ArgumentNullException(nameof(encryptedPassphrase));

            if (createAddressdto.IsSet && createAddressdto.Value == null)
                throw new ArgumentNullException(nameof(createAddressdto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="createAddressdto"></param>
        private void AfterApiAddressCreatePostDefaultImplementation(IApiAddressCreatePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<CreateAddressdto> createAddressdto)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressCreatePost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="createAddressdto"></param>
        partial void AfterApiAddressCreatePost(ref bool suppressDefaultLog, IApiAddressCreatePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<CreateAddressdto> createAddressdto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="createAddressdto"></param>
        private void OnErrorApiAddressCreatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<CreateAddressdto> createAddressdto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressCreatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="createAddressdto"></param>
        partial void OnErrorApiAddressCreatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<CreateAddressdto> createAddressdto);

        /// <summary>
        /// Create a new address in a particular wallet 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="createAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressCreatePostApiResponse"/>&gt;</returns>
        public async Task<IApiAddressCreatePostApiResponse?> ApiAddressCreatePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<CreateAddressdto> createAddressdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressCreatePostAsync(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new address in a particular wallet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="createAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressCreatePostApiResponse"/>&gt;</returns>
        public async Task<IApiAddressCreatePostApiResponse> ApiAddressCreatePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<CreateAddressdto> createAddressdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressCreatePost(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto);

                FormatApiAddressCreatePost(ref nodeUrlOrApiAccessKey, ref walletName, ref encryptedPassphrase, createAddressdto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/create"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/create");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    if (encryptedPassphrase.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("encryptedPassphrase", ClientUtils.ParameterToString(encryptedPassphrase.Value));

                    if (createAddressdto.IsSet)
                        httpRequestMessageLocalVar.Content = (createAddressdto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createAddressdto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressCreatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressCreatePostApiResponse>();

                        ApiAddressCreatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressCreatePostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto);

                        Events.ExecuteOnApiAddressCreatePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressCreatePostDefaultImplementation(e, "/api/Address/create", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto);
                Events.ExecuteOnErrorApiAddressCreatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressCreatePostApiResponse"/>
        /// </summary>
        public partial class ApiAddressCreatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressCreatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressCreatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressCreatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressCreatePostApiResponse(ILogger<ApiAddressCreatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiAddressGenerateDefaultAddressPost(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, ref Option<string> encryptedPassphrase, Option<GenerateDefaultAddressdto> generateDefaultAddressdto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="generateDefaultAddressdto"></param>
        /// <returns></returns>
        private void ValidateApiAddressGenerateDefaultAddressPost(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<GenerateDefaultAddressdto> generateDefaultAddressdto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (encryptedPassphrase.IsSet && encryptedPassphrase.Value == null)
                throw new ArgumentNullException(nameof(encryptedPassphrase));

            if (generateDefaultAddressdto.IsSet && generateDefaultAddressdto.Value == null)
                throw new ArgumentNullException(nameof(generateDefaultAddressdto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="generateDefaultAddressdto"></param>
        private void AfterApiAddressGenerateDefaultAddressPostDefaultImplementation(IApiAddressGenerateDefaultAddressPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<GenerateDefaultAddressdto> generateDefaultAddressdto)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressGenerateDefaultAddressPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="generateDefaultAddressdto"></param>
        partial void AfterApiAddressGenerateDefaultAddressPost(ref bool suppressDefaultLog, IApiAddressGenerateDefaultAddressPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<GenerateDefaultAddressdto> generateDefaultAddressdto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="generateDefaultAddressdto"></param>
        private void OnErrorApiAddressGenerateDefaultAddressPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<GenerateDefaultAddressdto> generateDefaultAddressdto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressGenerateDefaultAddressPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="generateDefaultAddressdto"></param>
        partial void OnErrorApiAddressGenerateDefaultAddressPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<GenerateDefaultAddressdto> generateDefaultAddressdto);

        /// <summary>
        /// Generate a default address for a wallet. This address can be imported to other wallets. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="generateDefaultAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressGenerateDefaultAddressPostApiResponse"/>&gt;</returns>
        public async Task<IApiAddressGenerateDefaultAddressPostApiResponse?> ApiAddressGenerateDefaultAddressPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<GenerateDefaultAddressdto> generateDefaultAddressdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressGenerateDefaultAddressPostAsync(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate a default address for a wallet. This address can be imported to other wallets. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="generateDefaultAddressdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressGenerateDefaultAddressPostApiResponse"/>&gt;</returns>
        public async Task<IApiAddressGenerateDefaultAddressPostApiResponse> ApiAddressGenerateDefaultAddressPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<GenerateDefaultAddressdto> generateDefaultAddressdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressGenerateDefaultAddressPost(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto);

                FormatApiAddressGenerateDefaultAddressPost(ref nodeUrlOrApiAccessKey, ref walletName, ref encryptedPassphrase, generateDefaultAddressdto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/generate-default-address"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/generate-default-address");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    if (encryptedPassphrase.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("encryptedPassphrase", ClientUtils.ParameterToString(encryptedPassphrase.Value));

                    if (generateDefaultAddressdto.IsSet)
                        httpRequestMessageLocalVar.Content = (generateDefaultAddressdto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateDefaultAddressdto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressGenerateDefaultAddressPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressGenerateDefaultAddressPostApiResponse>();

                        ApiAddressGenerateDefaultAddressPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/generate-default-address", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressGenerateDefaultAddressPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto);

                        Events.ExecuteOnApiAddressGenerateDefaultAddressPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressGenerateDefaultAddressPostDefaultImplementation(e, "/api/Address/generate-default-address", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto);
                Events.ExecuteOnErrorApiAddressGenerateDefaultAddressPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressGenerateDefaultAddressPostApiResponse"/>
        /// </summary>
        public partial class ApiAddressGenerateDefaultAddressPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressGenerateDefaultAddressPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressGenerateDefaultAddressPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressGenerateDefaultAddressPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressGenerateDefaultAddressPostApiResponse(ILogger<ApiAddressGenerateDefaultAddressPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiAddressScreenAddressGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> wallet, ref Option<string> mnemonics, ref Option<string> address);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="mnemonics"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        private void ValidateApiAddressScreenAddressGet(Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> mnemonics, Option<string> address)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (wallet.IsSet && wallet.Value == null)
                throw new ArgumentNullException(nameof(wallet));

            if (mnemonics.IsSet && mnemonics.Value == null)
                throw new ArgumentNullException(nameof(mnemonics));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="mnemonics"></param>
        /// <param name="address"></param>
        private void AfterApiAddressScreenAddressGetDefaultImplementation(IApiAddressScreenAddressGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> mnemonics, Option<string> address)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressScreenAddressGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, wallet, mnemonics, address);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="mnemonics"></param>
        /// <param name="address"></param>
        partial void AfterApiAddressScreenAddressGet(ref bool suppressDefaultLog, IApiAddressScreenAddressGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> mnemonics, Option<string> address);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="mnemonics"></param>
        /// <param name="address"></param>
        private void OnErrorApiAddressScreenAddressGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> mnemonics, Option<string> address)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressScreenAddressGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, wallet, mnemonics, address);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="wallet"></param>
        /// <param name="mnemonics"></param>
        /// <param name="address"></param>
        partial void OnErrorApiAddressScreenAddressGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> wallet, Option<string> mnemonics, Option<string> address);

        /// <summary>
        /// Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressScreenAddressGetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressScreenAddressGetApiResponse?> ApiAddressScreenAddressGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> mnemonics = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressScreenAddressGetAsync(nodeUrlOrApiAccessKey, wallet, mnemonics, address, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="wallet"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressScreenAddressGetApiResponse"/>&gt;</returns>
        public async Task<IApiAddressScreenAddressGetApiResponse> ApiAddressScreenAddressGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> wallet = default, Option<string> mnemonics = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressScreenAddressGet(nodeUrlOrApiAccessKey, wallet, mnemonics, address);

                FormatApiAddressScreenAddressGet(ref nodeUrlOrApiAccessKey, ref wallet, ref mnemonics, ref address);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/screen-address"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/screen-address");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (address.IsSet)
                        parseQueryStringLocalVar["address"] = ClientUtils.ParameterToString(address.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (wallet.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("wallet", ClientUtils.ParameterToString(wallet.Value));

                    if (mnemonics.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("mnemonics", ClientUtils.ParameterToString(mnemonics.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressScreenAddressGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressScreenAddressGetApiResponse>();

                        ApiAddressScreenAddressGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/screen-address", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressScreenAddressGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, wallet, mnemonics, address);

                        Events.ExecuteOnApiAddressScreenAddressGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressScreenAddressGetDefaultImplementation(e, "/api/Address/screen-address", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, wallet, mnemonics, address);
                Events.ExecuteOnErrorApiAddressScreenAddressGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressScreenAddressGetApiResponse"/>
        /// </summary>
        public partial class ApiAddressScreenAddressGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressScreenAddressGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressScreenAddressGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressScreenAddressGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressScreenAddressGetApiResponse(ILogger<ApiAddressScreenAddressGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiAddressSignMessagePost(ref Option<string> nodeUrlOrApiAccessKey, Option<SignMessagedto> signMessagedto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="signMessagedto"></param>
        /// <returns></returns>
        private void ValidateApiAddressSignMessagePost(Option<string> nodeUrlOrApiAccessKey, Option<SignMessagedto> signMessagedto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (signMessagedto.IsSet && signMessagedto.Value == null)
                throw new ArgumentNullException(nameof(signMessagedto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="signMessagedto"></param>
        private void AfterApiAddressSignMessagePostDefaultImplementation(IApiAddressSignMessagePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<SignMessagedto> signMessagedto)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressSignMessagePost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, signMessagedto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="signMessagedto"></param>
        partial void AfterApiAddressSignMessagePost(ref bool suppressDefaultLog, IApiAddressSignMessagePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<SignMessagedto> signMessagedto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="signMessagedto"></param>
        private void OnErrorApiAddressSignMessagePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<SignMessagedto> signMessagedto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressSignMessagePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, signMessagedto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="signMessagedto"></param>
        partial void OnErrorApiAddressSignMessagePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<SignMessagedto> signMessagedto);

        /// <summary>
        /// sign a message with address private key 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="signMessagedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressSignMessagePostApiResponse"/>&gt;</returns>
        public async Task<IApiAddressSignMessagePostApiResponse?> ApiAddressSignMessagePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<SignMessagedto> signMessagedto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressSignMessagePostAsync(nodeUrlOrApiAccessKey, signMessagedto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// sign a message with address private key 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="signMessagedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressSignMessagePostApiResponse"/>&gt;</returns>
        public async Task<IApiAddressSignMessagePostApiResponse> ApiAddressSignMessagePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<SignMessagedto> signMessagedto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressSignMessagePost(nodeUrlOrApiAccessKey, signMessagedto);

                FormatApiAddressSignMessagePost(ref nodeUrlOrApiAccessKey, signMessagedto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/sign-message"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/sign-message");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (signMessagedto.IsSet)
                        httpRequestMessageLocalVar.Content = (signMessagedto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(signMessagedto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressSignMessagePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressSignMessagePostApiResponse>();

                        ApiAddressSignMessagePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/sign-message", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressSignMessagePostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, signMessagedto);

                        Events.ExecuteOnApiAddressSignMessagePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressSignMessagePostDefaultImplementation(e, "/api/Address/sign-message", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, signMessagedto);
                Events.ExecuteOnErrorApiAddressSignMessagePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressSignMessagePostApiResponse"/>
        /// </summary>
        public partial class ApiAddressSignMessagePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressSignMessagePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressSignMessagePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressSignMessagePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressSignMessagePostApiResponse(ILogger<ApiAddressSignMessagePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiAddressVerifyMessagePost(ref Option<string> nodeUrlOrApiAccessKey, Option<VerifyMessagedto> verifyMessagedto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="verifyMessagedto"></param>
        /// <returns></returns>
        private void ValidateApiAddressVerifyMessagePost(Option<string> nodeUrlOrApiAccessKey, Option<VerifyMessagedto> verifyMessagedto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (verifyMessagedto.IsSet && verifyMessagedto.Value == null)
                throw new ArgumentNullException(nameof(verifyMessagedto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="verifyMessagedto"></param>
        private void AfterApiAddressVerifyMessagePostDefaultImplementation(IApiAddressVerifyMessagePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<VerifyMessagedto> verifyMessagedto)
        {
            bool suppressDefaultLog = false;
            AfterApiAddressVerifyMessagePost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, verifyMessagedto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="verifyMessagedto"></param>
        partial void AfterApiAddressVerifyMessagePost(ref bool suppressDefaultLog, IApiAddressVerifyMessagePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<VerifyMessagedto> verifyMessagedto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="verifyMessagedto"></param>
        private void OnErrorApiAddressVerifyMessagePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<VerifyMessagedto> verifyMessagedto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiAddressVerifyMessagePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, verifyMessagedto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="verifyMessagedto"></param>
        partial void OnErrorApiAddressVerifyMessagePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<VerifyMessagedto> verifyMessagedto);

        /// <summary>
        /// verify signed message 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="verifyMessagedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressVerifyMessagePostApiResponse"/>&gt;</returns>
        public async Task<IApiAddressVerifyMessagePostApiResponse?> ApiAddressVerifyMessagePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<VerifyMessagedto> verifyMessagedto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiAddressVerifyMessagePostAsync(nodeUrlOrApiAccessKey, verifyMessagedto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// verify signed message 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="verifyMessagedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiAddressVerifyMessagePostApiResponse"/>&gt;</returns>
        public async Task<IApiAddressVerifyMessagePostApiResponse> ApiAddressVerifyMessagePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<VerifyMessagedto> verifyMessagedto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiAddressVerifyMessagePost(nodeUrlOrApiAccessKey, verifyMessagedto);

                FormatApiAddressVerifyMessagePost(ref nodeUrlOrApiAccessKey, verifyMessagedto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Address/verify-message"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Address/verify-message");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (verifyMessagedto.IsSet)
                        httpRequestMessageLocalVar.Content = (verifyMessagedto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(verifyMessagedto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiAddressVerifyMessagePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiAddressVerifyMessagePostApiResponse>();

                        ApiAddressVerifyMessagePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Address/verify-message", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiAddressVerifyMessagePostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, verifyMessagedto);

                        Events.ExecuteOnApiAddressVerifyMessagePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiAddressVerifyMessagePostDefaultImplementation(e, "/api/Address/verify-message", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, verifyMessagedto);
                Events.ExecuteOnErrorApiAddressVerifyMessagePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiAddressVerifyMessagePostApiResponse"/>
        /// </summary>
        public partial class ApiAddressVerifyMessagePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiAddressVerifyMessagePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiAddressVerifyMessagePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiAddressVerifyMessagePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiAddressVerifyMessagePostApiResponse(ILogger<ApiAddressVerifyMessagePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
