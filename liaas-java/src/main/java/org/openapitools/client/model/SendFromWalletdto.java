/*
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendFromWalletdto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-28T20:52:14.094532800+01:00[Africa/Lagos]", comments = "Generator version: 7.14.0")
public class SendFromWalletdto {
  public static final String SERIALIZED_NAME_RECIPIENT_ADDRESS = "recipientAddress";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ADDRESS)
  @javax.annotation.Nullable
  private String recipientAddress;

  public static final String SERIALIZED_NAME_RECIPIENT_NAME = "recipientName";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NAME)
  @javax.annotation.Nullable
  private String recipientName;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private Double amount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_AMOUNT_INCLUDE_FEES = "amountIncludeFees";
  @SerializedName(SERIALIZED_NAME_AMOUNT_INCLUDE_FEES)
  @javax.annotation.Nullable
  private Boolean amountIncludeFees;

  public SendFromWalletdto() {
  }

  public SendFromWalletdto recipientAddress(@javax.annotation.Nullable String recipientAddress) {
    this.recipientAddress = recipientAddress;
    return this;
  }

  /**
   * Get recipientAddress
   * @return recipientAddress
   */
  @javax.annotation.Nullable
  public String getRecipientAddress() {
    return recipientAddress;
  }

  public void setRecipientAddress(@javax.annotation.Nullable String recipientAddress) {
    this.recipientAddress = recipientAddress;
  }


  public SendFromWalletdto recipientName(@javax.annotation.Nullable String recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  /**
   * Get recipientName
   * @return recipientName
   */
  @javax.annotation.Nullable
  public String getRecipientName() {
    return recipientName;
  }

  public void setRecipientName(@javax.annotation.Nullable String recipientName) {
    this.recipientName = recipientName;
  }


  public SendFromWalletdto amount(@javax.annotation.Nullable Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable Double amount) {
    this.amount = amount;
  }


  public SendFromWalletdto description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public SendFromWalletdto amountIncludeFees(@javax.annotation.Nullable Boolean amountIncludeFees) {
    this.amountIncludeFees = amountIncludeFees;
    return this;
  }

  /**
   * Get amountIncludeFees
   * @return amountIncludeFees
   */
  @javax.annotation.Nullable
  public Boolean getAmountIncludeFees() {
    return amountIncludeFees;
  }

  public void setAmountIncludeFees(@javax.annotation.Nullable Boolean amountIncludeFees) {
    this.amountIncludeFees = amountIncludeFees;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendFromWalletdto sendFromWalletdto = (SendFromWalletdto) o;
    return Objects.equals(this.recipientAddress, sendFromWalletdto.recipientAddress) &&
        Objects.equals(this.recipientName, sendFromWalletdto.recipientName) &&
        Objects.equals(this.amount, sendFromWalletdto.amount) &&
        Objects.equals(this.description, sendFromWalletdto.description) &&
        Objects.equals(this.amountIncludeFees, sendFromWalletdto.amountIncludeFees);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(recipientAddress, recipientName, amount, description, amountIncludeFees);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendFromWalletdto {\n");
    sb.append("    recipientAddress: ").append(toIndentedString(recipientAddress)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    amountIncludeFees: ").append(toIndentedString(amountIncludeFees)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("recipientAddress", "recipientName", "amount", "description", "amountIncludeFees"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendFromWalletdto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendFromWalletdto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendFromWalletdto is not found in the empty JSON string", SendFromWalletdto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendFromWalletdto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendFromWalletdto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("recipientAddress") != null && !jsonObj.get("recipientAddress").isJsonNull()) && !jsonObj.get("recipientAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientAddress").toString()));
      }
      if ((jsonObj.get("recipientName") != null && !jsonObj.get("recipientName").isJsonNull()) && !jsonObj.get("recipientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendFromWalletdto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendFromWalletdto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendFromWalletdto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendFromWalletdto.class));

       return (TypeAdapter<T>) new TypeAdapter<SendFromWalletdto>() {
           @Override
           public void write(JsonWriter out, SendFromWalletdto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendFromWalletdto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendFromWalletdto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendFromWalletdto
   * @throws IOException if the JSON string is invalid with respect to SendFromWalletdto
   */
  public static SendFromWalletdto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendFromWalletdto.class);
  }

  /**
   * Convert an instance of SendFromWalletdto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

