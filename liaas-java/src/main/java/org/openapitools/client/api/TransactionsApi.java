/*
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BroadcastTransactiondto;
import org.openapitools.client.model.CreateRawTransactiondto;
import org.openapitools.client.model.CreateRawTransactiondtoV2;
import org.openapitools.client.model.CreateRawTransactiondtoV3;
import org.openapitools.client.model.SendFromWalletdto;
import org.openapitools.client.model.SignRawTransactiondto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiTransactionsBroadcastTransactionPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param broadcastTransactiondto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsBroadcastTransactionPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable BroadcastTransactiondto broadcastTransactiondto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = broadcastTransactiondto;

        // create path and map variables
        String localVarPath = "/api/Transactions/broadcast-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsBroadcastTransactionPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable BroadcastTransactiondto broadcastTransactiondto, final ApiCallback _callback) throws ApiException {
        return apiTransactionsBroadcastTransactionPostCall(nodeUrlOrApiAccessKey, broadcastTransactiondto, _callback);

    }

    /**
     * broadcast transaction on the Litecoin blockchain
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param broadcastTransactiondto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiTransactionsBroadcastTransactionPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable BroadcastTransactiondto broadcastTransactiondto) throws ApiException {
        apiTransactionsBroadcastTransactionPostWithHttpInfo(nodeUrlOrApiAccessKey, broadcastTransactiondto);
    }

    /**
     * broadcast transaction on the Litecoin blockchain
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param broadcastTransactiondto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTransactionsBroadcastTransactionPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable BroadcastTransactiondto broadcastTransactiondto) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsBroadcastTransactionPostValidateBeforeCall(nodeUrlOrApiAccessKey, broadcastTransactiondto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * broadcast transaction on the Litecoin blockchain (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param broadcastTransactiondto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsBroadcastTransactionPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable BroadcastTransactiondto broadcastTransactiondto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsBroadcastTransactionPostValidateBeforeCall(nodeUrlOrApiAccessKey, broadcastTransactiondto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsCreateRawTransactionPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param createRawTransactiondto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsCreateRawTransactionPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable CreateRawTransactiondto createRawTransactiondto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRawTransactiondto;

        // create path and map variables
        String localVarPath = "/api/Transactions/create-raw-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsCreateRawTransactionPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable CreateRawTransactiondto createRawTransactiondto, final ApiCallback _callback) throws ApiException {
        return apiTransactionsCreateRawTransactionPostCall(nodeUrlOrApiAccessKey, walletName, createRawTransactiondto, _callback);

    }

    /**
     * create raw transaction - returns the transaction hash
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param createRawTransactiondto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiTransactionsCreateRawTransactionPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable CreateRawTransactiondto createRawTransactiondto) throws ApiException {
        apiTransactionsCreateRawTransactionPostWithHttpInfo(nodeUrlOrApiAccessKey, walletName, createRawTransactiondto);
    }

    /**
     * create raw transaction - returns the transaction hash
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param createRawTransactiondto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTransactionsCreateRawTransactionPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable CreateRawTransactiondto createRawTransactiondto) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsCreateRawTransactionPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, createRawTransactiondto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create raw transaction - returns the transaction hash (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param createRawTransactiondto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsCreateRawTransactionPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable CreateRawTransactiondto createRawTransactiondto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsCreateRawTransactionPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, createRawTransactiondto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsCreateRawTransactionV2Post
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createRawTransactiondtoV2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsCreateRawTransactionV2PostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateRawTransactiondtoV2 createRawTransactiondtoV2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRawTransactiondtoV2;

        // create path and map variables
        String localVarPath = "/api/Transactions/create-raw-transaction-v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsCreateRawTransactionV2PostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateRawTransactiondtoV2 createRawTransactiondtoV2, final ApiCallback _callback) throws ApiException {
        return apiTransactionsCreateRawTransactionV2PostCall(nodeUrlOrApiAccessKey, createRawTransactiondtoV2, _callback);

    }

    /**
     * create raw transaction with the address UTXOs - returns the transaction hash
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createRawTransactiondtoV2  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiTransactionsCreateRawTransactionV2Post(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateRawTransactiondtoV2 createRawTransactiondtoV2) throws ApiException {
        apiTransactionsCreateRawTransactionV2PostWithHttpInfo(nodeUrlOrApiAccessKey, createRawTransactiondtoV2);
    }

    /**
     * create raw transaction with the address UTXOs - returns the transaction hash
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createRawTransactiondtoV2  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTransactionsCreateRawTransactionV2PostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateRawTransactiondtoV2 createRawTransactiondtoV2) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsCreateRawTransactionV2PostValidateBeforeCall(nodeUrlOrApiAccessKey, createRawTransactiondtoV2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create raw transaction with the address UTXOs - returns the transaction hash (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createRawTransactiondtoV2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsCreateRawTransactionV2PostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateRawTransactiondtoV2 createRawTransactiondtoV2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsCreateRawTransactionV2PostValidateBeforeCall(nodeUrlOrApiAccessKey, createRawTransactiondtoV2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsCreateRawTransactionV3Post
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param createRawTransactiondtoV3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsCreateRawTransactionV3PostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable CreateRawTransactiondtoV3 createRawTransactiondtoV3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRawTransactiondtoV3;

        // create path and map variables
        String localVarPath = "/api/Transactions/create-raw-transaction-v3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsCreateRawTransactionV3PostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable CreateRawTransactiondtoV3 createRawTransactiondtoV3, final ApiCallback _callback) throws ApiException {
        return apiTransactionsCreateRawTransactionV3PostCall(nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3, _callback);

    }

    /**
     * create raw transaction with the service Fee address attached - returns the transaction hash
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param createRawTransactiondtoV3  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiTransactionsCreateRawTransactionV3Post(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable CreateRawTransactiondtoV3 createRawTransactiondtoV3) throws ApiException {
        apiTransactionsCreateRawTransactionV3PostWithHttpInfo(nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3);
    }

    /**
     * create raw transaction with the service Fee address attached - returns the transaction hash
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param createRawTransactiondtoV3  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTransactionsCreateRawTransactionV3PostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable CreateRawTransactiondtoV3 createRawTransactiondtoV3) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsCreateRawTransactionV3PostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create raw transaction with the service Fee address attached - returns the transaction hash (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param createRawTransactiondtoV3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsCreateRawTransactionV3PostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable CreateRawTransactiondtoV3 createRawTransactiondtoV3, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsCreateRawTransactionV3PostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsSendFundsFromWalletPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param sendFromWalletdto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsSendFundsFromWalletPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable SendFromWalletdto sendFromWalletdto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendFromWalletdto;

        // create path and map variables
        String localVarPath = "/api/Transactions/send-funds-from-wallet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        if (encryptedPassphrase != null) {
            localVarHeaderParams.put("encryptedPassphrase", localVarApiClient.parameterToString(encryptedPassphrase));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsSendFundsFromWalletPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable SendFromWalletdto sendFromWalletdto, final ApiCallback _callback) throws ApiException {
        return apiTransactionsSendFundsFromWalletPostCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto, _callback);

    }

    /**
     * Send a funds from one address to another using wallet
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param sendFromWalletdto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiTransactionsSendFundsFromWalletPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable SendFromWalletdto sendFromWalletdto) throws ApiException {
        apiTransactionsSendFundsFromWalletPostWithHttpInfo(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto);
    }

    /**
     * Send a funds from one address to another using wallet
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param sendFromWalletdto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTransactionsSendFundsFromWalletPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable SendFromWalletdto sendFromWalletdto) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsSendFundsFromWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send a funds from one address to another using wallet (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param sendFromWalletdto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsSendFundsFromWalletPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable SendFromWalletdto sendFromWalletdto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsSendFundsFromWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsSignTransactionPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signRawTransactiondto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsSignTransactionPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable SignRawTransactiondto signRawTransactiondto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signRawTransactiondto;

        // create path and map variables
        String localVarPath = "/api/Transactions/sign-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsSignTransactionPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable SignRawTransactiondto signRawTransactiondto, final ApiCallback _callback) throws ApiException {
        return apiTransactionsSignTransactionPostCall(nodeUrlOrApiAccessKey, walletName, signRawTransactiondto, _callback);

    }

    /**
     * sign a created raw transaction - returns the signed transaction hash
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signRawTransactiondto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiTransactionsSignTransactionPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable SignRawTransactiondto signRawTransactiondto) throws ApiException {
        apiTransactionsSignTransactionPostWithHttpInfo(nodeUrlOrApiAccessKey, walletName, signRawTransactiondto);
    }

    /**
     * sign a created raw transaction - returns the signed transaction hash
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signRawTransactiondto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTransactionsSignTransactionPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable SignRawTransactiondto signRawTransactiondto) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsSignTransactionPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, signRawTransactiondto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * sign a created raw transaction - returns the signed transaction hash (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signRawTransactiondto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsSignTransactionPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable SignRawTransactiondto signRawTransactiondto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsSignTransactionPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, signRawTransactiondto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
