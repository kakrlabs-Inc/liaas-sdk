<?php
/**
 * AddressApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AddressApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AddressApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiAddressAddressBalanceGet' => [
            'application/json',
        ],
        'apiAddressAddressDetailsGet' => [
            'application/json',
        ],
        'apiAddressAddressPrivateKeyGet' => [
            'application/json',
        ],
        'apiAddressAddressPrivateKeyV2Get' => [
            'application/json',
        ],
        'apiAddressAddressTransactionGet' => [
            'application/json',
        ],
        'apiAddressCreateMutiSigAddressPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiAddressCreatePost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiAddressGenerateDefaultAddressPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiAddressScreenAddressGet' => [
            'application/json',
        ],
        'apiAddressSignMessagePost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiAddressVerifyMessagePost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiAddressAddressBalanceGet
     *
     * address balance - returns the confirmed and unconfirmed balance
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressBalanceGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressAddressBalanceGet($node_url_or_api_access_key = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressBalanceGet'][0])
    {
        $this->apiAddressAddressBalanceGetWithHttpInfo($node_url_or_api_access_key, $address, $contentType);
    }

    /**
     * Operation apiAddressAddressBalanceGetWithHttpInfo
     *
     * address balance - returns the confirmed and unconfirmed balance
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressBalanceGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressAddressBalanceGetWithHttpInfo($node_url_or_api_access_key = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressBalanceGet'][0])
    {
        $request = $this->apiAddressAddressBalanceGetRequest($node_url_or_api_access_key, $address, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressAddressBalanceGetAsync
     *
     * address balance - returns the confirmed and unconfirmed balance
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressBalanceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressAddressBalanceGetAsync($node_url_or_api_access_key = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressBalanceGet'][0])
    {
        return $this->apiAddressAddressBalanceGetAsyncWithHttpInfo($node_url_or_api_access_key, $address, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressAddressBalanceGetAsyncWithHttpInfo
     *
     * address balance - returns the confirmed and unconfirmed balance
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressBalanceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressAddressBalanceGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressBalanceGet'][0])
    {
        $returnType = '';
        $request = $this->apiAddressAddressBalanceGetRequest($node_url_or_api_access_key, $address, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressAddressBalanceGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressBalanceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressAddressBalanceGetRequest($node_url_or_api_access_key = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressBalanceGet'][0])
    {




        $resourcePath = '/api/Address/address-balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAddressAddressDetailsGet
     *
     * Get address details. all address details are returned.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressDetailsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressAddressDetailsGet($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressDetailsGet'][0])
    {
        $this->apiAddressAddressDetailsGetWithHttpInfo($node_url_or_api_access_key, $wallet_name, $address, $contentType);
    }

    /**
     * Operation apiAddressAddressDetailsGetWithHttpInfo
     *
     * Get address details. all address details are returned.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressDetailsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressAddressDetailsGetWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressDetailsGet'][0])
    {
        $request = $this->apiAddressAddressDetailsGetRequest($node_url_or_api_access_key, $wallet_name, $address, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressAddressDetailsGetAsync
     *
     * Get address details. all address details are returned.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressAddressDetailsGetAsync($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressDetailsGet'][0])
    {
        return $this->apiAddressAddressDetailsGetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $address, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressAddressDetailsGetAsyncWithHttpInfo
     *
     * Get address details. all address details are returned.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressAddressDetailsGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressDetailsGet'][0])
    {
        $returnType = '';
        $request = $this->apiAddressAddressDetailsGetRequest($node_url_or_api_access_key, $wallet_name, $address, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressAddressDetailsGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressAddressDetailsGetRequest($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressDetailsGet'][0])
    {





        $resourcePath = '/api/Address/address-details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAddressAddressPrivateKeyGet
     *
     * Get the address private key using encrypted passphrase
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressPrivateKeyGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressAddressPrivateKeyGet($node_url_or_api_access_key = null, $wallet = null, $encrypted_passphrase = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressPrivateKeyGet'][0])
    {
        $this->apiAddressAddressPrivateKeyGetWithHttpInfo($node_url_or_api_access_key, $wallet, $encrypted_passphrase, $address, $contentType);
    }

    /**
     * Operation apiAddressAddressPrivateKeyGetWithHttpInfo
     *
     * Get the address private key using encrypted passphrase
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressPrivateKeyGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressAddressPrivateKeyGetWithHttpInfo($node_url_or_api_access_key = null, $wallet = null, $encrypted_passphrase = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressPrivateKeyGet'][0])
    {
        $request = $this->apiAddressAddressPrivateKeyGetRequest($node_url_or_api_access_key, $wallet, $encrypted_passphrase, $address, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressAddressPrivateKeyGetAsync
     *
     * Get the address private key using encrypted passphrase
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressPrivateKeyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressAddressPrivateKeyGetAsync($node_url_or_api_access_key = null, $wallet = null, $encrypted_passphrase = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressPrivateKeyGet'][0])
    {
        return $this->apiAddressAddressPrivateKeyGetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet, $encrypted_passphrase, $address, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressAddressPrivateKeyGetAsyncWithHttpInfo
     *
     * Get the address private key using encrypted passphrase
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressPrivateKeyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressAddressPrivateKeyGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet = null, $encrypted_passphrase = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressPrivateKeyGet'][0])
    {
        $returnType = '';
        $request = $this->apiAddressAddressPrivateKeyGetRequest($node_url_or_api_access_key, $wallet, $encrypted_passphrase, $address, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressAddressPrivateKeyGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressPrivateKeyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressAddressPrivateKeyGetRequest($node_url_or_api_access_key = null, $wallet = null, $encrypted_passphrase = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressPrivateKeyGet'][0])
    {






        $resourcePath = '/api/Address/address-private-key';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet !== null) {
            $headerParams['wallet'] = ObjectSerializer::toHeaderValue($wallet);
        }
        // header params
        if ($encrypted_passphrase !== null) {
            $headerParams['encryptedPassphrase'] = ObjectSerializer::toHeaderValue($encrypted_passphrase);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAddressAddressPrivateKeyV2Get
     *
     * Get the address private key using mnemonics
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressPrivateKeyV2Get'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressAddressPrivateKeyV2Get($node_url_or_api_access_key = null, $wallet = null, $mnemonics = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressPrivateKeyV2Get'][0])
    {
        $this->apiAddressAddressPrivateKeyV2GetWithHttpInfo($node_url_or_api_access_key, $wallet, $mnemonics, $address, $contentType);
    }

    /**
     * Operation apiAddressAddressPrivateKeyV2GetWithHttpInfo
     *
     * Get the address private key using mnemonics
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressPrivateKeyV2Get'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressAddressPrivateKeyV2GetWithHttpInfo($node_url_or_api_access_key = null, $wallet = null, $mnemonics = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressPrivateKeyV2Get'][0])
    {
        $request = $this->apiAddressAddressPrivateKeyV2GetRequest($node_url_or_api_access_key, $wallet, $mnemonics, $address, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressAddressPrivateKeyV2GetAsync
     *
     * Get the address private key using mnemonics
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressPrivateKeyV2Get'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressAddressPrivateKeyV2GetAsync($node_url_or_api_access_key = null, $wallet = null, $mnemonics = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressPrivateKeyV2Get'][0])
    {
        return $this->apiAddressAddressPrivateKeyV2GetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet, $mnemonics, $address, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressAddressPrivateKeyV2GetAsyncWithHttpInfo
     *
     * Get the address private key using mnemonics
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressPrivateKeyV2Get'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressAddressPrivateKeyV2GetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet = null, $mnemonics = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressPrivateKeyV2Get'][0])
    {
        $returnType = '';
        $request = $this->apiAddressAddressPrivateKeyV2GetRequest($node_url_or_api_access_key, $wallet, $mnemonics, $address, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressAddressPrivateKeyV2Get'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressPrivateKeyV2Get'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressAddressPrivateKeyV2GetRequest($node_url_or_api_access_key = null, $wallet = null, $mnemonics = null, $address = null, string $contentType = self::contentTypes['apiAddressAddressPrivateKeyV2Get'][0])
    {






        $resourcePath = '/api/Address/address-private-key-v2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet !== null) {
            $headerParams['wallet'] = ObjectSerializer::toHeaderValue($wallet);
        }
        // header params
        if ($mnemonics !== null) {
            $headerParams['mnemonics'] = ObjectSerializer::toHeaderValue($mnemonics);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAddressAddressTransactionGet
     *
     * retruns all transactions of an address without wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $address  (optional)
     * @param  int|null $take  (optional, default to 10)
     * @param  int|null $skip  (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressTransactionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressAddressTransactionGet($node_url_or_api_access_key = null, $address = null, $take = 10, $skip = 0, string $contentType = self::contentTypes['apiAddressAddressTransactionGet'][0])
    {
        $this->apiAddressAddressTransactionGetWithHttpInfo($node_url_or_api_access_key, $address, $take, $skip, $contentType);
    }

    /**
     * Operation apiAddressAddressTransactionGetWithHttpInfo
     *
     * retruns all transactions of an address without wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $address  (optional)
     * @param  int|null $take  (optional, default to 10)
     * @param  int|null $skip  (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressTransactionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressAddressTransactionGetWithHttpInfo($node_url_or_api_access_key = null, $address = null, $take = 10, $skip = 0, string $contentType = self::contentTypes['apiAddressAddressTransactionGet'][0])
    {
        $request = $this->apiAddressAddressTransactionGetRequest($node_url_or_api_access_key, $address, $take, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressAddressTransactionGetAsync
     *
     * retruns all transactions of an address without wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $address  (optional)
     * @param  int|null $take  (optional, default to 10)
     * @param  int|null $skip  (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressTransactionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressAddressTransactionGetAsync($node_url_or_api_access_key = null, $address = null, $take = 10, $skip = 0, string $contentType = self::contentTypes['apiAddressAddressTransactionGet'][0])
    {
        return $this->apiAddressAddressTransactionGetAsyncWithHttpInfo($node_url_or_api_access_key, $address, $take, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressAddressTransactionGetAsyncWithHttpInfo
     *
     * retruns all transactions of an address without wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $address  (optional)
     * @param  int|null $take  (optional, default to 10)
     * @param  int|null $skip  (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressTransactionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressAddressTransactionGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $address = null, $take = 10, $skip = 0, string $contentType = self::contentTypes['apiAddressAddressTransactionGet'][0])
    {
        $returnType = '';
        $request = $this->apiAddressAddressTransactionGetRequest($node_url_or_api_access_key, $address, $take, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressAddressTransactionGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $address  (optional)
     * @param  int|null $take  (optional, default to 10)
     * @param  int|null $skip  (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressAddressTransactionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressAddressTransactionGetRequest($node_url_or_api_access_key = null, $address = null, $take = 10, $skip = 0, string $contentType = self::contentTypes['apiAddressAddressTransactionGet'][0])
    {






        $resourcePath = '/api/Address/address-transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAddressCreateMutiSigAddressPost
     *
     * Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\CreateMultiSignatureAddressdto|null $create_multi_signature_addressdto create_multi_signature_addressdto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressCreateMutiSigAddressPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressCreateMutiSigAddressPost($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $create_multi_signature_addressdto = null, string $contentType = self::contentTypes['apiAddressCreateMutiSigAddressPost'][0])
    {
        $this->apiAddressCreateMutiSigAddressPostWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $create_multi_signature_addressdto, $contentType);
    }

    /**
     * Operation apiAddressCreateMutiSigAddressPostWithHttpInfo
     *
     * Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\CreateMultiSignatureAddressdto|null $create_multi_signature_addressdto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressCreateMutiSigAddressPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressCreateMutiSigAddressPostWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $create_multi_signature_addressdto = null, string $contentType = self::contentTypes['apiAddressCreateMutiSigAddressPost'][0])
    {
        $request = $this->apiAddressCreateMutiSigAddressPostRequest($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $create_multi_signature_addressdto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressCreateMutiSigAddressPostAsync
     *
     * Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\CreateMultiSignatureAddressdto|null $create_multi_signature_addressdto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressCreateMutiSigAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressCreateMutiSigAddressPostAsync($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $create_multi_signature_addressdto = null, string $contentType = self::contentTypes['apiAddressCreateMutiSigAddressPost'][0])
    {
        return $this->apiAddressCreateMutiSigAddressPostAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $create_multi_signature_addressdto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressCreateMutiSigAddressPostAsyncWithHttpInfo
     *
     * Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\CreateMultiSignatureAddressdto|null $create_multi_signature_addressdto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressCreateMutiSigAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressCreateMutiSigAddressPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $create_multi_signature_addressdto = null, string $contentType = self::contentTypes['apiAddressCreateMutiSigAddressPost'][0])
    {
        $returnType = '';
        $request = $this->apiAddressCreateMutiSigAddressPostRequest($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $create_multi_signature_addressdto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressCreateMutiSigAddressPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\CreateMultiSignatureAddressdto|null $create_multi_signature_addressdto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressCreateMutiSigAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressCreateMutiSigAddressPostRequest($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $create_multi_signature_addressdto = null, string $contentType = self::contentTypes['apiAddressCreateMutiSigAddressPost'][0])
    {






        $resourcePath = '/api/Address/create-muti-sig-address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }
        // header params
        if ($encrypted_passphrase !== null) {
            $headerParams['encryptedPassphrase'] = ObjectSerializer::toHeaderValue($encrypted_passphrase);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_multi_signature_addressdto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_multi_signature_addressdto));
            } else {
                $httpBody = $create_multi_signature_addressdto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAddressCreatePost
     *
     * Create a new address in a particular wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\CreateAddressdto|null $create_addressdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressCreatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressCreatePost($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $create_addressdto = null, string $contentType = self::contentTypes['apiAddressCreatePost'][0])
    {
        $this->apiAddressCreatePostWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $create_addressdto, $contentType);
    }

    /**
     * Operation apiAddressCreatePostWithHttpInfo
     *
     * Create a new address in a particular wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\CreateAddressdto|null $create_addressdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressCreatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressCreatePostWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $create_addressdto = null, string $contentType = self::contentTypes['apiAddressCreatePost'][0])
    {
        $request = $this->apiAddressCreatePostRequest($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $create_addressdto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressCreatePostAsync
     *
     * Create a new address in a particular wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\CreateAddressdto|null $create_addressdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressCreatePostAsync($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $create_addressdto = null, string $contentType = self::contentTypes['apiAddressCreatePost'][0])
    {
        return $this->apiAddressCreatePostAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $create_addressdto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressCreatePostAsyncWithHttpInfo
     *
     * Create a new address in a particular wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\CreateAddressdto|null $create_addressdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressCreatePostAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $create_addressdto = null, string $contentType = self::contentTypes['apiAddressCreatePost'][0])
    {
        $returnType = '';
        $request = $this->apiAddressCreatePostRequest($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $create_addressdto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressCreatePost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\CreateAddressdto|null $create_addressdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressCreatePostRequest($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $create_addressdto = null, string $contentType = self::contentTypes['apiAddressCreatePost'][0])
    {






        $resourcePath = '/api/Address/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }
        // header params
        if ($encrypted_passphrase !== null) {
            $headerParams['encryptedPassphrase'] = ObjectSerializer::toHeaderValue($encrypted_passphrase);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_addressdto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_addressdto));
            } else {
                $httpBody = $create_addressdto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAddressGenerateDefaultAddressPost
     *
     * Generate a default address for a wallet. This address can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\GenerateDefaultAddressdto|null $generate_default_addressdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressGenerateDefaultAddressPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressGenerateDefaultAddressPost($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $generate_default_addressdto = null, string $contentType = self::contentTypes['apiAddressGenerateDefaultAddressPost'][0])
    {
        $this->apiAddressGenerateDefaultAddressPostWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $generate_default_addressdto, $contentType);
    }

    /**
     * Operation apiAddressGenerateDefaultAddressPostWithHttpInfo
     *
     * Generate a default address for a wallet. This address can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\GenerateDefaultAddressdto|null $generate_default_addressdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressGenerateDefaultAddressPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressGenerateDefaultAddressPostWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $generate_default_addressdto = null, string $contentType = self::contentTypes['apiAddressGenerateDefaultAddressPost'][0])
    {
        $request = $this->apiAddressGenerateDefaultAddressPostRequest($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $generate_default_addressdto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressGenerateDefaultAddressPostAsync
     *
     * Generate a default address for a wallet. This address can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\GenerateDefaultAddressdto|null $generate_default_addressdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressGenerateDefaultAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressGenerateDefaultAddressPostAsync($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $generate_default_addressdto = null, string $contentType = self::contentTypes['apiAddressGenerateDefaultAddressPost'][0])
    {
        return $this->apiAddressGenerateDefaultAddressPostAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $generate_default_addressdto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressGenerateDefaultAddressPostAsyncWithHttpInfo
     *
     * Generate a default address for a wallet. This address can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\GenerateDefaultAddressdto|null $generate_default_addressdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressGenerateDefaultAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressGenerateDefaultAddressPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $generate_default_addressdto = null, string $contentType = self::contentTypes['apiAddressGenerateDefaultAddressPost'][0])
    {
        $returnType = '';
        $request = $this->apiAddressGenerateDefaultAddressPostRequest($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $generate_default_addressdto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressGenerateDefaultAddressPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\GenerateDefaultAddressdto|null $generate_default_addressdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressGenerateDefaultAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressGenerateDefaultAddressPostRequest($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $generate_default_addressdto = null, string $contentType = self::contentTypes['apiAddressGenerateDefaultAddressPost'][0])
    {






        $resourcePath = '/api/Address/generate-default-address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }
        // header params
        if ($encrypted_passphrase !== null) {
            $headerParams['encryptedPassphrase'] = ObjectSerializer::toHeaderValue($encrypted_passphrase);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generate_default_addressdto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generate_default_addressdto));
            } else {
                $httpBody = $generate_default_addressdto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAddressScreenAddressGet
     *
     * Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressScreenAddressGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressScreenAddressGet($node_url_or_api_access_key = null, $wallet = null, $mnemonics = null, $address = null, string $contentType = self::contentTypes['apiAddressScreenAddressGet'][0])
    {
        $this->apiAddressScreenAddressGetWithHttpInfo($node_url_or_api_access_key, $wallet, $mnemonics, $address, $contentType);
    }

    /**
     * Operation apiAddressScreenAddressGetWithHttpInfo
     *
     * Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressScreenAddressGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressScreenAddressGetWithHttpInfo($node_url_or_api_access_key = null, $wallet = null, $mnemonics = null, $address = null, string $contentType = self::contentTypes['apiAddressScreenAddressGet'][0])
    {
        $request = $this->apiAddressScreenAddressGetRequest($node_url_or_api_access_key, $wallet, $mnemonics, $address, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressScreenAddressGetAsync
     *
     * Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressScreenAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressScreenAddressGetAsync($node_url_or_api_access_key = null, $wallet = null, $mnemonics = null, $address = null, string $contentType = self::contentTypes['apiAddressScreenAddressGet'][0])
    {
        return $this->apiAddressScreenAddressGetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet, $mnemonics, $address, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressScreenAddressGetAsyncWithHttpInfo
     *
     * Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressScreenAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressScreenAddressGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet = null, $mnemonics = null, $address = null, string $contentType = self::contentTypes['apiAddressScreenAddressGet'][0])
    {
        $returnType = '';
        $request = $this->apiAddressScreenAddressGetRequest($node_url_or_api_access_key, $wallet, $mnemonics, $address, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressScreenAddressGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressScreenAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressScreenAddressGetRequest($node_url_or_api_access_key = null, $wallet = null, $mnemonics = null, $address = null, string $contentType = self::contentTypes['apiAddressScreenAddressGet'][0])
    {






        $resourcePath = '/api/Address/screen-address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet !== null) {
            $headerParams['wallet'] = ObjectSerializer::toHeaderValue($wallet);
        }
        // header params
        if ($mnemonics !== null) {
            $headerParams['mnemonics'] = ObjectSerializer::toHeaderValue($mnemonics);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAddressSignMessagePost
     *
     * sign a message with address private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\SignMessagedto|null $sign_messagedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressSignMessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressSignMessagePost($node_url_or_api_access_key = null, $sign_messagedto = null, string $contentType = self::contentTypes['apiAddressSignMessagePost'][0])
    {
        $this->apiAddressSignMessagePostWithHttpInfo($node_url_or_api_access_key, $sign_messagedto, $contentType);
    }

    /**
     * Operation apiAddressSignMessagePostWithHttpInfo
     *
     * sign a message with address private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\SignMessagedto|null $sign_messagedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressSignMessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressSignMessagePostWithHttpInfo($node_url_or_api_access_key = null, $sign_messagedto = null, string $contentType = self::contentTypes['apiAddressSignMessagePost'][0])
    {
        $request = $this->apiAddressSignMessagePostRequest($node_url_or_api_access_key, $sign_messagedto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressSignMessagePostAsync
     *
     * sign a message with address private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\SignMessagedto|null $sign_messagedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressSignMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressSignMessagePostAsync($node_url_or_api_access_key = null, $sign_messagedto = null, string $contentType = self::contentTypes['apiAddressSignMessagePost'][0])
    {
        return $this->apiAddressSignMessagePostAsyncWithHttpInfo($node_url_or_api_access_key, $sign_messagedto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressSignMessagePostAsyncWithHttpInfo
     *
     * sign a message with address private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\SignMessagedto|null $sign_messagedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressSignMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressSignMessagePostAsyncWithHttpInfo($node_url_or_api_access_key = null, $sign_messagedto = null, string $contentType = self::contentTypes['apiAddressSignMessagePost'][0])
    {
        $returnType = '';
        $request = $this->apiAddressSignMessagePostRequest($node_url_or_api_access_key, $sign_messagedto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressSignMessagePost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\SignMessagedto|null $sign_messagedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressSignMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressSignMessagePostRequest($node_url_or_api_access_key = null, $sign_messagedto = null, string $contentType = self::contentTypes['apiAddressSignMessagePost'][0])
    {




        $resourcePath = '/api/Address/sign-message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sign_messagedto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sign_messagedto));
            } else {
                $httpBody = $sign_messagedto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAddressVerifyMessagePost
     *
     * verify signed message
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\VerifyMessagedto|null $verify_messagedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressVerifyMessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAddressVerifyMessagePost($node_url_or_api_access_key = null, $verify_messagedto = null, string $contentType = self::contentTypes['apiAddressVerifyMessagePost'][0])
    {
        $this->apiAddressVerifyMessagePostWithHttpInfo($node_url_or_api_access_key, $verify_messagedto, $contentType);
    }

    /**
     * Operation apiAddressVerifyMessagePostWithHttpInfo
     *
     * verify signed message
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\VerifyMessagedto|null $verify_messagedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressVerifyMessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAddressVerifyMessagePostWithHttpInfo($node_url_or_api_access_key = null, $verify_messagedto = null, string $contentType = self::contentTypes['apiAddressVerifyMessagePost'][0])
    {
        $request = $this->apiAddressVerifyMessagePostRequest($node_url_or_api_access_key, $verify_messagedto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAddressVerifyMessagePostAsync
     *
     * verify signed message
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\VerifyMessagedto|null $verify_messagedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressVerifyMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressVerifyMessagePostAsync($node_url_or_api_access_key = null, $verify_messagedto = null, string $contentType = self::contentTypes['apiAddressVerifyMessagePost'][0])
    {
        return $this->apiAddressVerifyMessagePostAsyncWithHttpInfo($node_url_or_api_access_key, $verify_messagedto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAddressVerifyMessagePostAsyncWithHttpInfo
     *
     * verify signed message
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\VerifyMessagedto|null $verify_messagedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressVerifyMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAddressVerifyMessagePostAsyncWithHttpInfo($node_url_or_api_access_key = null, $verify_messagedto = null, string $contentType = self::contentTypes['apiAddressVerifyMessagePost'][0])
    {
        $returnType = '';
        $request = $this->apiAddressVerifyMessagePostRequest($node_url_or_api_access_key, $verify_messagedto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAddressVerifyMessagePost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\VerifyMessagedto|null $verify_messagedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAddressVerifyMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAddressVerifyMessagePostRequest($node_url_or_api_access_key = null, $verify_messagedto = null, string $contentType = self::contentTypes['apiAddressVerifyMessagePost'][0])
    {




        $resourcePath = '/api/Address/verify-message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($verify_messagedto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($verify_messagedto));
            } else {
                $httpBody = $verify_messagedto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
