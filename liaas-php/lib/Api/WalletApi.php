<?php
/**
 * WalletApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * WalletApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WalletApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiWalletAddressesGet' => [
            'application/json',
        ],
        'apiWalletBalanceGet' => [
            'application/json',
        ],
        'apiWalletChangePassphrasePost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiWalletCreateEncryptedWalletPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiWalletCreateImportableEncryptedWalletPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiWalletCreateImportableWalletPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiWalletCreatePost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiWalletDetailsGet' => [
            'application/json',
        ],
        'apiWalletEncryptWalletPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiWalletImportWalletPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiWalletOfficialAddressGet' => [
            'application/json',
        ],
        'apiWalletSetWalletMnemonicsPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiWalletSignWalletMessagePost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiWalletTransactionsGet' => [
            'application/json',
        ],
        'apiWalletWalletAddressBalanceGet' => [
            'application/json',
        ],
        'apiWalletWalletAddressTransactionsGet' => [
            'application/json',
        ],
        'apiWalletWalletDefaultAddressGet' => [
            'application/json',
        ],
        'apiWalletWalletDefaultAddressV2Get' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiWalletAddressesGet
     *
     * Get all addresses of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletAddressesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletAddressesGet($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletAddressesGet'][0])
    {
        $this->apiWalletAddressesGetWithHttpInfo($node_url_or_api_access_key, $wallet_name, $contentType);
    }

    /**
     * Operation apiWalletAddressesGetWithHttpInfo
     *
     * Get all addresses of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletAddressesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletAddressesGetWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletAddressesGet'][0])
    {
        $request = $this->apiWalletAddressesGetRequest($node_url_or_api_access_key, $wallet_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletAddressesGetAsync
     *
     * Get all addresses of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletAddressesGetAsync($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletAddressesGet'][0])
    {
        return $this->apiWalletAddressesGetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletAddressesGetAsyncWithHttpInfo
     *
     * Get all addresses of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletAddressesGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletAddressesGet'][0])
    {
        $returnType = '';
        $request = $this->apiWalletAddressesGetRequest($node_url_or_api_access_key, $wallet_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletAddressesGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletAddressesGetRequest($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletAddressesGet'][0])
    {




        $resourcePath = '/api/Wallet/addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletBalanceGet
     *
     * Get the balance of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletBalanceGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletBalanceGet($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletBalanceGet'][0])
    {
        $this->apiWalletBalanceGetWithHttpInfo($node_url_or_api_access_key, $wallet_name, $contentType);
    }

    /**
     * Operation apiWalletBalanceGetWithHttpInfo
     *
     * Get the balance of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletBalanceGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletBalanceGetWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletBalanceGet'][0])
    {
        $request = $this->apiWalletBalanceGetRequest($node_url_or_api_access_key, $wallet_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletBalanceGetAsync
     *
     * Get the balance of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletBalanceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletBalanceGetAsync($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletBalanceGet'][0])
    {
        return $this->apiWalletBalanceGetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletBalanceGetAsyncWithHttpInfo
     *
     * Get the balance of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletBalanceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletBalanceGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletBalanceGet'][0])
    {
        $returnType = '';
        $request = $this->apiWalletBalanceGetRequest($node_url_or_api_access_key, $wallet_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletBalanceGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletBalanceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletBalanceGetRequest($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletBalanceGet'][0])
    {




        $resourcePath = '/api/Wallet/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletChangePassphrasePost
     *
     * Change the passphrase of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\ChangePassphrasedto|null $change_passphrasedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletChangePassphrasePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletChangePassphrasePost($node_url_or_api_access_key = null, $change_passphrasedto = null, string $contentType = self::contentTypes['apiWalletChangePassphrasePost'][0])
    {
        $this->apiWalletChangePassphrasePostWithHttpInfo($node_url_or_api_access_key, $change_passphrasedto, $contentType);
    }

    /**
     * Operation apiWalletChangePassphrasePostWithHttpInfo
     *
     * Change the passphrase of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\ChangePassphrasedto|null $change_passphrasedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletChangePassphrasePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletChangePassphrasePostWithHttpInfo($node_url_or_api_access_key = null, $change_passphrasedto = null, string $contentType = self::contentTypes['apiWalletChangePassphrasePost'][0])
    {
        $request = $this->apiWalletChangePassphrasePostRequest($node_url_or_api_access_key, $change_passphrasedto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletChangePassphrasePostAsync
     *
     * Change the passphrase of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\ChangePassphrasedto|null $change_passphrasedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletChangePassphrasePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletChangePassphrasePostAsync($node_url_or_api_access_key = null, $change_passphrasedto = null, string $contentType = self::contentTypes['apiWalletChangePassphrasePost'][0])
    {
        return $this->apiWalletChangePassphrasePostAsyncWithHttpInfo($node_url_or_api_access_key, $change_passphrasedto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletChangePassphrasePostAsyncWithHttpInfo
     *
     * Change the passphrase of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\ChangePassphrasedto|null $change_passphrasedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletChangePassphrasePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletChangePassphrasePostAsyncWithHttpInfo($node_url_or_api_access_key = null, $change_passphrasedto = null, string $contentType = self::contentTypes['apiWalletChangePassphrasePost'][0])
    {
        $returnType = '';
        $request = $this->apiWalletChangePassphrasePostRequest($node_url_or_api_access_key, $change_passphrasedto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletChangePassphrasePost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\ChangePassphrasedto|null $change_passphrasedto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletChangePassphrasePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletChangePassphrasePostRequest($node_url_or_api_access_key = null, $change_passphrasedto = null, string $contentType = self::contentTypes['apiWalletChangePassphrasePost'][0])
    {




        $resourcePath = '/api/Wallet/change-passphrase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($change_passphrasedto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($change_passphrasedto));
            } else {
                $httpBody = $change_passphrasedto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletCreateEncryptedWalletPost
     *
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateEncryptedWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletCreateEncryptedWalletPost($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateEncryptedWalletPost'][0])
    {
        $this->apiWalletCreateEncryptedWalletPostWithHttpInfo($node_url_or_api_access_key, $create_wallet_request, $contentType);
    }

    /**
     * Operation apiWalletCreateEncryptedWalletPostWithHttpInfo
     *
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateEncryptedWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletCreateEncryptedWalletPostWithHttpInfo($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateEncryptedWalletPost'][0])
    {
        $request = $this->apiWalletCreateEncryptedWalletPostRequest($node_url_or_api_access_key, $create_wallet_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletCreateEncryptedWalletPostAsync
     *
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateEncryptedWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletCreateEncryptedWalletPostAsync($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateEncryptedWalletPost'][0])
    {
        return $this->apiWalletCreateEncryptedWalletPostAsyncWithHttpInfo($node_url_or_api_access_key, $create_wallet_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletCreateEncryptedWalletPostAsyncWithHttpInfo
     *
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateEncryptedWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletCreateEncryptedWalletPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateEncryptedWalletPost'][0])
    {
        $returnType = '';
        $request = $this->apiWalletCreateEncryptedWalletPostRequest($node_url_or_api_access_key, $create_wallet_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletCreateEncryptedWalletPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateEncryptedWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletCreateEncryptedWalletPostRequest($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateEncryptedWalletPost'][0])
    {




        $resourcePath = '/api/Wallet/create-encrypted-wallet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_wallet_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_wallet_request));
            } else {
                $httpBody = $create_wallet_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletCreateImportableEncryptedWalletPost
     *
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateImportableEncryptedWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletCreateImportableEncryptedWalletPost($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateImportableEncryptedWalletPost'][0])
    {
        $this->apiWalletCreateImportableEncryptedWalletPostWithHttpInfo($node_url_or_api_access_key, $create_wallet_request, $contentType);
    }

    /**
     * Operation apiWalletCreateImportableEncryptedWalletPostWithHttpInfo
     *
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateImportableEncryptedWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletCreateImportableEncryptedWalletPostWithHttpInfo($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateImportableEncryptedWalletPost'][0])
    {
        $request = $this->apiWalletCreateImportableEncryptedWalletPostRequest($node_url_or_api_access_key, $create_wallet_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletCreateImportableEncryptedWalletPostAsync
     *
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateImportableEncryptedWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletCreateImportableEncryptedWalletPostAsync($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateImportableEncryptedWalletPost'][0])
    {
        return $this->apiWalletCreateImportableEncryptedWalletPostAsyncWithHttpInfo($node_url_or_api_access_key, $create_wallet_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletCreateImportableEncryptedWalletPostAsyncWithHttpInfo
     *
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateImportableEncryptedWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletCreateImportableEncryptedWalletPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateImportableEncryptedWalletPost'][0])
    {
        $returnType = '';
        $request = $this->apiWalletCreateImportableEncryptedWalletPostRequest($node_url_or_api_access_key, $create_wallet_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletCreateImportableEncryptedWalletPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateImportableEncryptedWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletCreateImportableEncryptedWalletPostRequest($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateImportableEncryptedWalletPost'][0])
    {




        $resourcePath = '/api/Wallet/create-importable-encrypted-wallet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_wallet_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_wallet_request));
            } else {
                $httpBody = $create_wallet_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletCreateImportableWalletPost
     *
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateImportableWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletCreateImportableWalletPost($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateImportableWalletPost'][0])
    {
        $this->apiWalletCreateImportableWalletPostWithHttpInfo($node_url_or_api_access_key, $create_wallet_request, $contentType);
    }

    /**
     * Operation apiWalletCreateImportableWalletPostWithHttpInfo
     *
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateImportableWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletCreateImportableWalletPostWithHttpInfo($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateImportableWalletPost'][0])
    {
        $request = $this->apiWalletCreateImportableWalletPostRequest($node_url_or_api_access_key, $create_wallet_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletCreateImportableWalletPostAsync
     *
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateImportableWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletCreateImportableWalletPostAsync($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateImportableWalletPost'][0])
    {
        return $this->apiWalletCreateImportableWalletPostAsyncWithHttpInfo($node_url_or_api_access_key, $create_wallet_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletCreateImportableWalletPostAsyncWithHttpInfo
     *
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateImportableWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletCreateImportableWalletPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateImportableWalletPost'][0])
    {
        $returnType = '';
        $request = $this->apiWalletCreateImportableWalletPostRequest($node_url_or_api_access_key, $create_wallet_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletCreateImportableWalletPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreateImportableWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletCreateImportableWalletPostRequest($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreateImportableWalletPost'][0])
    {




        $resourcePath = '/api/Wallet/create-importable-wallet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_wallet_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_wallet_request));
            } else {
                $httpBody = $create_wallet_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletCreatePost
     *
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletCreatePost($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreatePost'][0])
    {
        $this->apiWalletCreatePostWithHttpInfo($node_url_or_api_access_key, $create_wallet_request, $contentType);
    }

    /**
     * Operation apiWalletCreatePostWithHttpInfo
     *
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletCreatePostWithHttpInfo($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreatePost'][0])
    {
        $request = $this->apiWalletCreatePostRequest($node_url_or_api_access_key, $create_wallet_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletCreatePostAsync
     *
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletCreatePostAsync($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreatePost'][0])
    {
        return $this->apiWalletCreatePostAsyncWithHttpInfo($node_url_or_api_access_key, $create_wallet_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletCreatePostAsyncWithHttpInfo
     *
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletCreatePostAsyncWithHttpInfo($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreatePost'][0])
    {
        $returnType = '';
        $request = $this->apiWalletCreatePostRequest($node_url_or_api_access_key, $create_wallet_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletCreatePost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateWalletRequest|null $create_wallet_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletCreatePostRequest($node_url_or_api_access_key = null, $create_wallet_request = null, string $contentType = self::contentTypes['apiWalletCreatePost'][0])
    {




        $resourcePath = '/api/Wallet/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_wallet_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_wallet_request));
            } else {
                $httpBody = $create_wallet_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletDetailsGet
     *
     * Get the details of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletDetailsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletDetailsGet($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletDetailsGet'][0])
    {
        $this->apiWalletDetailsGetWithHttpInfo($node_url_or_api_access_key, $wallet_name, $contentType);
    }

    /**
     * Operation apiWalletDetailsGetWithHttpInfo
     *
     * Get the details of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletDetailsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletDetailsGetWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletDetailsGet'][0])
    {
        $request = $this->apiWalletDetailsGetRequest($node_url_or_api_access_key, $wallet_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletDetailsGetAsync
     *
     * Get the details of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletDetailsGetAsync($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletDetailsGet'][0])
    {
        return $this->apiWalletDetailsGetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletDetailsGetAsyncWithHttpInfo
     *
     * Get the details of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletDetailsGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletDetailsGet'][0])
    {
        $returnType = '';
        $request = $this->apiWalletDetailsGetRequest($node_url_or_api_access_key, $wallet_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletDetailsGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletDetailsGetRequest($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletDetailsGet'][0])
    {




        $resourcePath = '/api/Wallet/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $node_url_or_api_access_key,
            'nodeUrlOrApiAccessKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_name,
            'walletName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletEncryptWalletPost
     *
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\EncryptWalletDto|null $encrypt_wallet_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletEncryptWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletEncryptWalletPost($node_url_or_api_access_key = null, $wallet_name = null, $encrypt_wallet_dto = null, string $contentType = self::contentTypes['apiWalletEncryptWalletPost'][0])
    {
        $this->apiWalletEncryptWalletPostWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypt_wallet_dto, $contentType);
    }

    /**
     * Operation apiWalletEncryptWalletPostWithHttpInfo
     *
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\EncryptWalletDto|null $encrypt_wallet_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletEncryptWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletEncryptWalletPostWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypt_wallet_dto = null, string $contentType = self::contentTypes['apiWalletEncryptWalletPost'][0])
    {
        $request = $this->apiWalletEncryptWalletPostRequest($node_url_or_api_access_key, $wallet_name, $encrypt_wallet_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletEncryptWalletPostAsync
     *
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\EncryptWalletDto|null $encrypt_wallet_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletEncryptWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletEncryptWalletPostAsync($node_url_or_api_access_key = null, $wallet_name = null, $encrypt_wallet_dto = null, string $contentType = self::contentTypes['apiWalletEncryptWalletPost'][0])
    {
        return $this->apiWalletEncryptWalletPostAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypt_wallet_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletEncryptWalletPostAsyncWithHttpInfo
     *
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\EncryptWalletDto|null $encrypt_wallet_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletEncryptWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletEncryptWalletPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypt_wallet_dto = null, string $contentType = self::contentTypes['apiWalletEncryptWalletPost'][0])
    {
        $returnType = '';
        $request = $this->apiWalletEncryptWalletPostRequest($node_url_or_api_access_key, $wallet_name, $encrypt_wallet_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletEncryptWalletPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\EncryptWalletDto|null $encrypt_wallet_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletEncryptWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletEncryptWalletPostRequest($node_url_or_api_access_key = null, $wallet_name = null, $encrypt_wallet_dto = null, string $contentType = self::contentTypes['apiWalletEncryptWalletPost'][0])
    {





        $resourcePath = '/api/Wallet/encrypt-wallet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($encrypt_wallet_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($encrypt_wallet_dto));
            } else {
                $httpBody = $encrypt_wallet_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletImportWalletPost
     *
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\ImportWalletdto|null $import_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletImportWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletImportWalletPost($node_url_or_api_access_key = null, $import_walletdto = null, string $contentType = self::contentTypes['apiWalletImportWalletPost'][0])
    {
        $this->apiWalletImportWalletPostWithHttpInfo($node_url_or_api_access_key, $import_walletdto, $contentType);
    }

    /**
     * Operation apiWalletImportWalletPostWithHttpInfo
     *
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\ImportWalletdto|null $import_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletImportWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletImportWalletPostWithHttpInfo($node_url_or_api_access_key = null, $import_walletdto = null, string $contentType = self::contentTypes['apiWalletImportWalletPost'][0])
    {
        $request = $this->apiWalletImportWalletPostRequest($node_url_or_api_access_key, $import_walletdto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletImportWalletPostAsync
     *
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\ImportWalletdto|null $import_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletImportWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletImportWalletPostAsync($node_url_or_api_access_key = null, $import_walletdto = null, string $contentType = self::contentTypes['apiWalletImportWalletPost'][0])
    {
        return $this->apiWalletImportWalletPostAsyncWithHttpInfo($node_url_or_api_access_key, $import_walletdto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletImportWalletPostAsyncWithHttpInfo
     *
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\ImportWalletdto|null $import_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletImportWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletImportWalletPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $import_walletdto = null, string $contentType = self::contentTypes['apiWalletImportWalletPost'][0])
    {
        $returnType = '';
        $request = $this->apiWalletImportWalletPostRequest($node_url_or_api_access_key, $import_walletdto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletImportWalletPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\ImportWalletdto|null $import_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletImportWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletImportWalletPostRequest($node_url_or_api_access_key = null, $import_walletdto = null, string $contentType = self::contentTypes['apiWalletImportWalletPost'][0])
    {




        $resourcePath = '/api/Wallet/import-wallet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($import_walletdto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($import_walletdto));
            } else {
                $httpBody = $import_walletdto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletOfficialAddressGet
     *
     * Get the official address of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletOfficialAddressGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletOfficialAddressGet($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletOfficialAddressGet'][0])
    {
        $this->apiWalletOfficialAddressGetWithHttpInfo($node_url_or_api_access_key, $wallet_name, $contentType);
    }

    /**
     * Operation apiWalletOfficialAddressGetWithHttpInfo
     *
     * Get the official address of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletOfficialAddressGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletOfficialAddressGetWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletOfficialAddressGet'][0])
    {
        $request = $this->apiWalletOfficialAddressGetRequest($node_url_or_api_access_key, $wallet_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletOfficialAddressGetAsync
     *
     * Get the official address of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletOfficialAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletOfficialAddressGetAsync($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletOfficialAddressGet'][0])
    {
        return $this->apiWalletOfficialAddressGetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletOfficialAddressGetAsyncWithHttpInfo
     *
     * Get the official address of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletOfficialAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletOfficialAddressGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletOfficialAddressGet'][0])
    {
        $returnType = '';
        $request = $this->apiWalletOfficialAddressGetRequest($node_url_or_api_access_key, $wallet_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletOfficialAddressGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletOfficialAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletOfficialAddressGetRequest($node_url_or_api_access_key = null, $wallet_name = null, string $contentType = self::contentTypes['apiWalletOfficialAddressGet'][0])
    {




        $resourcePath = '/api/Wallet/official-address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletSetWalletMnemonicsPost
     *
     * Set the mnemonics of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\SetWalletMnemonicsdto|null $set_wallet_mnemonicsdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletSetWalletMnemonicsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletSetWalletMnemonicsPost($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $set_wallet_mnemonicsdto = null, string $contentType = self::contentTypes['apiWalletSetWalletMnemonicsPost'][0])
    {
        $this->apiWalletSetWalletMnemonicsPostWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $set_wallet_mnemonicsdto, $contentType);
    }

    /**
     * Operation apiWalletSetWalletMnemonicsPostWithHttpInfo
     *
     * Set the mnemonics of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\SetWalletMnemonicsdto|null $set_wallet_mnemonicsdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletSetWalletMnemonicsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletSetWalletMnemonicsPostWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $set_wallet_mnemonicsdto = null, string $contentType = self::contentTypes['apiWalletSetWalletMnemonicsPost'][0])
    {
        $request = $this->apiWalletSetWalletMnemonicsPostRequest($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $set_wallet_mnemonicsdto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletSetWalletMnemonicsPostAsync
     *
     * Set the mnemonics of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\SetWalletMnemonicsdto|null $set_wallet_mnemonicsdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletSetWalletMnemonicsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletSetWalletMnemonicsPostAsync($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $set_wallet_mnemonicsdto = null, string $contentType = self::contentTypes['apiWalletSetWalletMnemonicsPost'][0])
    {
        return $this->apiWalletSetWalletMnemonicsPostAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $set_wallet_mnemonicsdto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletSetWalletMnemonicsPostAsyncWithHttpInfo
     *
     * Set the mnemonics of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\SetWalletMnemonicsdto|null $set_wallet_mnemonicsdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletSetWalletMnemonicsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletSetWalletMnemonicsPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $set_wallet_mnemonicsdto = null, string $contentType = self::contentTypes['apiWalletSetWalletMnemonicsPost'][0])
    {
        $returnType = '';
        $request = $this->apiWalletSetWalletMnemonicsPostRequest($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $set_wallet_mnemonicsdto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletSetWalletMnemonicsPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\SetWalletMnemonicsdto|null $set_wallet_mnemonicsdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletSetWalletMnemonicsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletSetWalletMnemonicsPostRequest($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $set_wallet_mnemonicsdto = null, string $contentType = self::contentTypes['apiWalletSetWalletMnemonicsPost'][0])
    {






        $resourcePath = '/api/Wallet/set-wallet-mnemonics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }
        // header params
        if ($encrypted_passphrase !== null) {
            $headerParams['encryptedPassphrase'] = ObjectSerializer::toHeaderValue($encrypted_passphrase);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_wallet_mnemonicsdto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_wallet_mnemonicsdto));
            } else {
                $httpBody = $set_wallet_mnemonicsdto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletSignWalletMessagePost
     *
     * Sign a message using the wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\SignMessageUsingWalletdto|null $sign_message_using_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletSignWalletMessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletSignWalletMessagePost($node_url_or_api_access_key = null, $wallet_name = null, $sign_message_using_walletdto = null, string $contentType = self::contentTypes['apiWalletSignWalletMessagePost'][0])
    {
        $this->apiWalletSignWalletMessagePostWithHttpInfo($node_url_or_api_access_key, $wallet_name, $sign_message_using_walletdto, $contentType);
    }

    /**
     * Operation apiWalletSignWalletMessagePostWithHttpInfo
     *
     * Sign a message using the wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\SignMessageUsingWalletdto|null $sign_message_using_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletSignWalletMessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletSignWalletMessagePostWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $sign_message_using_walletdto = null, string $contentType = self::contentTypes['apiWalletSignWalletMessagePost'][0])
    {
        $request = $this->apiWalletSignWalletMessagePostRequest($node_url_or_api_access_key, $wallet_name, $sign_message_using_walletdto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletSignWalletMessagePostAsync
     *
     * Sign a message using the wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\SignMessageUsingWalletdto|null $sign_message_using_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletSignWalletMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletSignWalletMessagePostAsync($node_url_or_api_access_key = null, $wallet_name = null, $sign_message_using_walletdto = null, string $contentType = self::contentTypes['apiWalletSignWalletMessagePost'][0])
    {
        return $this->apiWalletSignWalletMessagePostAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $sign_message_using_walletdto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletSignWalletMessagePostAsyncWithHttpInfo
     *
     * Sign a message using the wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\SignMessageUsingWalletdto|null $sign_message_using_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletSignWalletMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletSignWalletMessagePostAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $sign_message_using_walletdto = null, string $contentType = self::contentTypes['apiWalletSignWalletMessagePost'][0])
    {
        $returnType = '';
        $request = $this->apiWalletSignWalletMessagePostRequest($node_url_or_api_access_key, $wallet_name, $sign_message_using_walletdto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletSignWalletMessagePost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\SignMessageUsingWalletdto|null $sign_message_using_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletSignWalletMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletSignWalletMessagePostRequest($node_url_or_api_access_key = null, $wallet_name = null, $sign_message_using_walletdto = null, string $contentType = self::contentTypes['apiWalletSignWalletMessagePost'][0])
    {





        $resourcePath = '/api/Wallet/sign-wallet-message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sign_message_using_walletdto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sign_message_using_walletdto));
            } else {
                $httpBody = $sign_message_using_walletdto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletTransactionsGet
     *
     * Get the transactions of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  int|null $skip  (optional, default to 10)
     * @param  int|null $count  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletTransactionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletTransactionsGet($node_url_or_api_access_key = null, $wallet_name = null, $skip = 10, $count = 1, string $contentType = self::contentTypes['apiWalletTransactionsGet'][0])
    {
        $this->apiWalletTransactionsGetWithHttpInfo($node_url_or_api_access_key, $wallet_name, $skip, $count, $contentType);
    }

    /**
     * Operation apiWalletTransactionsGetWithHttpInfo
     *
     * Get the transactions of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  int|null $skip  (optional, default to 10)
     * @param  int|null $count  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletTransactionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletTransactionsGetWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $skip = 10, $count = 1, string $contentType = self::contentTypes['apiWalletTransactionsGet'][0])
    {
        $request = $this->apiWalletTransactionsGetRequest($node_url_or_api_access_key, $wallet_name, $skip, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletTransactionsGetAsync
     *
     * Get the transactions of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  int|null $skip  (optional, default to 10)
     * @param  int|null $count  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletTransactionsGetAsync($node_url_or_api_access_key = null, $wallet_name = null, $skip = 10, $count = 1, string $contentType = self::contentTypes['apiWalletTransactionsGet'][0])
    {
        return $this->apiWalletTransactionsGetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $skip, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletTransactionsGetAsyncWithHttpInfo
     *
     * Get the transactions of a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  int|null $skip  (optional, default to 10)
     * @param  int|null $count  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletTransactionsGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $skip = 10, $count = 1, string $contentType = self::contentTypes['apiWalletTransactionsGet'][0])
    {
        $returnType = '';
        $request = $this->apiWalletTransactionsGetRequest($node_url_or_api_access_key, $wallet_name, $skip, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletTransactionsGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  int|null $skip  (optional, default to 10)
     * @param  int|null $count  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletTransactionsGetRequest($node_url_or_api_access_key = null, $wallet_name = null, $skip = 10, $count = 1, string $contentType = self::contentTypes['apiWalletTransactionsGet'][0])
    {






        $resourcePath = '/api/Wallet/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletWalletAddressBalanceGet
     *
     * Get the balance of a specific address in a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletAddressBalanceGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletWalletAddressBalanceGet($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiWalletWalletAddressBalanceGet'][0])
    {
        $this->apiWalletWalletAddressBalanceGetWithHttpInfo($node_url_or_api_access_key, $wallet_name, $address, $contentType);
    }

    /**
     * Operation apiWalletWalletAddressBalanceGetWithHttpInfo
     *
     * Get the balance of a specific address in a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletAddressBalanceGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletWalletAddressBalanceGetWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiWalletWalletAddressBalanceGet'][0])
    {
        $request = $this->apiWalletWalletAddressBalanceGetRequest($node_url_or_api_access_key, $wallet_name, $address, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletWalletAddressBalanceGetAsync
     *
     * Get the balance of a specific address in a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletAddressBalanceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletWalletAddressBalanceGetAsync($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiWalletWalletAddressBalanceGet'][0])
    {
        return $this->apiWalletWalletAddressBalanceGetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $address, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletWalletAddressBalanceGetAsyncWithHttpInfo
     *
     * Get the balance of a specific address in a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletAddressBalanceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletWalletAddressBalanceGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiWalletWalletAddressBalanceGet'][0])
    {
        $returnType = '';
        $request = $this->apiWalletWalletAddressBalanceGetRequest($node_url_or_api_access_key, $wallet_name, $address, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletWalletAddressBalanceGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletAddressBalanceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletWalletAddressBalanceGetRequest($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiWalletWalletAddressBalanceGet'][0])
    {





        $resourcePath = '/api/Wallet/wallet-address-balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletWalletAddressTransactionsGet
     *
     * Get the transactions of a specific address in a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletAddressTransactionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletWalletAddressTransactionsGet($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiWalletWalletAddressTransactionsGet'][0])
    {
        $this->apiWalletWalletAddressTransactionsGetWithHttpInfo($node_url_or_api_access_key, $wallet_name, $address, $contentType);
    }

    /**
     * Operation apiWalletWalletAddressTransactionsGetWithHttpInfo
     *
     * Get the transactions of a specific address in a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletAddressTransactionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletWalletAddressTransactionsGetWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiWalletWalletAddressTransactionsGet'][0])
    {
        $request = $this->apiWalletWalletAddressTransactionsGetRequest($node_url_or_api_access_key, $wallet_name, $address, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletWalletAddressTransactionsGetAsync
     *
     * Get the transactions of a specific address in a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletAddressTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletWalletAddressTransactionsGetAsync($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiWalletWalletAddressTransactionsGet'][0])
    {
        return $this->apiWalletWalletAddressTransactionsGetAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $address, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletWalletAddressTransactionsGetAsyncWithHttpInfo
     *
     * Get the transactions of a specific address in a wallet.
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletAddressTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletWalletAddressTransactionsGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiWalletWalletAddressTransactionsGet'][0])
    {
        $returnType = '';
        $request = $this->apiWalletWalletAddressTransactionsGetRequest($node_url_or_api_access_key, $wallet_name, $address, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletWalletAddressTransactionsGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $address  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletAddressTransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletWalletAddressTransactionsGetRequest($node_url_or_api_access_key = null, $wallet_name = null, $address = null, string $contentType = self::contentTypes['apiWalletWalletAddressTransactionsGet'][0])
    {





        $resourcePath = '/api/Wallet/wallet-address-transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_name,
            'walletName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletWalletDefaultAddressGet
     *
     * default addresss of a wallet without private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  int|null $address_type  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletDefaultAddressGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletWalletDefaultAddressGet($node_url_or_api_access_key = null, $mnemonics = null, $address_type = 1, string $contentType = self::contentTypes['apiWalletWalletDefaultAddressGet'][0])
    {
        $this->apiWalletWalletDefaultAddressGetWithHttpInfo($node_url_or_api_access_key, $mnemonics, $address_type, $contentType);
    }

    /**
     * Operation apiWalletWalletDefaultAddressGetWithHttpInfo
     *
     * default addresss of a wallet without private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  int|null $address_type  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletDefaultAddressGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletWalletDefaultAddressGetWithHttpInfo($node_url_or_api_access_key = null, $mnemonics = null, $address_type = 1, string $contentType = self::contentTypes['apiWalletWalletDefaultAddressGet'][0])
    {
        $request = $this->apiWalletWalletDefaultAddressGetRequest($node_url_or_api_access_key, $mnemonics, $address_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletWalletDefaultAddressGetAsync
     *
     * default addresss of a wallet without private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  int|null $address_type  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletDefaultAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletWalletDefaultAddressGetAsync($node_url_or_api_access_key = null, $mnemonics = null, $address_type = 1, string $contentType = self::contentTypes['apiWalletWalletDefaultAddressGet'][0])
    {
        return $this->apiWalletWalletDefaultAddressGetAsyncWithHttpInfo($node_url_or_api_access_key, $mnemonics, $address_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletWalletDefaultAddressGetAsyncWithHttpInfo
     *
     * default addresss of a wallet without private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  int|null $address_type  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletDefaultAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletWalletDefaultAddressGetAsyncWithHttpInfo($node_url_or_api_access_key = null, $mnemonics = null, $address_type = 1, string $contentType = self::contentTypes['apiWalletWalletDefaultAddressGet'][0])
    {
        $returnType = '';
        $request = $this->apiWalletWalletDefaultAddressGetRequest($node_url_or_api_access_key, $mnemonics, $address_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletWalletDefaultAddressGet'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  int|null $address_type  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletDefaultAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletWalletDefaultAddressGetRequest($node_url_or_api_access_key = null, $mnemonics = null, $address_type = 1, string $contentType = self::contentTypes['apiWalletWalletDefaultAddressGet'][0])
    {





        $resourcePath = '/api/Wallet/wallet-default-address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address_type,
            'addressType', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($mnemonics !== null) {
            $headerParams['mnemonics'] = ObjectSerializer::toHeaderValue($mnemonics);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWalletWalletDefaultAddressV2Get
     *
     * default addresss of a wallet with private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  int|null $address_type  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletDefaultAddressV2Get'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWalletWalletDefaultAddressV2Get($node_url_or_api_access_key = null, $mnemonics = null, $address_type = 1, string $contentType = self::contentTypes['apiWalletWalletDefaultAddressV2Get'][0])
    {
        $this->apiWalletWalletDefaultAddressV2GetWithHttpInfo($node_url_or_api_access_key, $mnemonics, $address_type, $contentType);
    }

    /**
     * Operation apiWalletWalletDefaultAddressV2GetWithHttpInfo
     *
     * default addresss of a wallet with private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  int|null $address_type  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletDefaultAddressV2Get'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWalletWalletDefaultAddressV2GetWithHttpInfo($node_url_or_api_access_key = null, $mnemonics = null, $address_type = 1, string $contentType = self::contentTypes['apiWalletWalletDefaultAddressV2Get'][0])
    {
        $request = $this->apiWalletWalletDefaultAddressV2GetRequest($node_url_or_api_access_key, $mnemonics, $address_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWalletWalletDefaultAddressV2GetAsync
     *
     * default addresss of a wallet with private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  int|null $address_type  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletDefaultAddressV2Get'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletWalletDefaultAddressV2GetAsync($node_url_or_api_access_key = null, $mnemonics = null, $address_type = 1, string $contentType = self::contentTypes['apiWalletWalletDefaultAddressV2Get'][0])
    {
        return $this->apiWalletWalletDefaultAddressV2GetAsyncWithHttpInfo($node_url_or_api_access_key, $mnemonics, $address_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWalletWalletDefaultAddressV2GetAsyncWithHttpInfo
     *
     * default addresss of a wallet with private key
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  int|null $address_type  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletDefaultAddressV2Get'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWalletWalletDefaultAddressV2GetAsyncWithHttpInfo($node_url_or_api_access_key = null, $mnemonics = null, $address_type = 1, string $contentType = self::contentTypes['apiWalletWalletDefaultAddressV2Get'][0])
    {
        $returnType = '';
        $request = $this->apiWalletWalletDefaultAddressV2GetRequest($node_url_or_api_access_key, $mnemonics, $address_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWalletWalletDefaultAddressV2Get'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $mnemonics  (optional)
     * @param  int|null $address_type  (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWalletWalletDefaultAddressV2Get'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWalletWalletDefaultAddressV2GetRequest($node_url_or_api_access_key = null, $mnemonics = null, $address_type = 1, string $contentType = self::contentTypes['apiWalletWalletDefaultAddressV2Get'][0])
    {





        $resourcePath = '/api/Wallet/wallet-default-address-v2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address_type,
            'addressType', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($mnemonics !== null) {
            $headerParams['mnemonics'] = ObjectSerializer::toHeaderValue($mnemonics);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
