// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITransactionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TransactionsApiEvents Events { get; }

        /// <summary>
        /// broadcast transaction on the Litecoin blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="broadcastTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsBroadcastTransactionPostApiResponse"/>&gt;</returns>
        Task<IApiTransactionsBroadcastTransactionPostApiResponse> ApiTransactionsBroadcastTransactionPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<BroadcastTransactiondto> broadcastTransactiondto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// broadcast transaction on the Litecoin blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="broadcastTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsBroadcastTransactionPostApiResponse"/>?&gt;</returns>
        Task<IApiTransactionsBroadcastTransactionPostApiResponse?> ApiTransactionsBroadcastTransactionPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<BroadcastTransactiondto> broadcastTransactiondto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// create raw transaction - returns the transaction hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="createRawTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionPostApiResponse"/>&gt;</returns>
        Task<IApiTransactionsCreateRawTransactionPostApiResponse> ApiTransactionsCreateRawTransactionPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<CreateRawTransactiondto> createRawTransactiondto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// create raw transaction - returns the transaction hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="createRawTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionPostApiResponse"/>?&gt;</returns>
        Task<IApiTransactionsCreateRawTransactionPostApiResponse?> ApiTransactionsCreateRawTransactionPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<CreateRawTransactiondto> createRawTransactiondto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// create raw transaction with the address UTXOs - returns the transaction hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createRawTransactiondtoV2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionV2PostApiResponse"/>&gt;</returns>
        Task<IApiTransactionsCreateRawTransactionV2PostApiResponse> ApiTransactionsCreateRawTransactionV2PostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2 = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// create raw transaction with the address UTXOs - returns the transaction hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createRawTransactiondtoV2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionV2PostApiResponse"/>?&gt;</returns>
        Task<IApiTransactionsCreateRawTransactionV2PostApiResponse?> ApiTransactionsCreateRawTransactionV2PostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2 = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// create raw transaction with the service Fee address attached - returns the transaction hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="createRawTransactiondtoV3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionV3PostApiResponse"/>&gt;</returns>
        Task<IApiTransactionsCreateRawTransactionV3PostApiResponse> ApiTransactionsCreateRawTransactionV3PostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3 = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// create raw transaction with the service Fee address attached - returns the transaction hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="createRawTransactiondtoV3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionV3PostApiResponse"/>?&gt;</returns>
        Task<IApiTransactionsCreateRawTransactionV3PostApiResponse?> ApiTransactionsCreateRawTransactionV3PostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3 = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send a funds from one address to another using wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="sendFromWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsSendFundsFromWalletPostApiResponse"/>&gt;</returns>
        Task<IApiTransactionsSendFundsFromWalletPostApiResponse> ApiTransactionsSendFundsFromWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<SendFromWalletdto> sendFromWalletdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send a funds from one address to another using wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="sendFromWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsSendFundsFromWalletPostApiResponse"/>?&gt;</returns>
        Task<IApiTransactionsSendFundsFromWalletPostApiResponse?> ApiTransactionsSendFundsFromWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<SendFromWalletdto> sendFromWalletdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// sign a created raw transaction - returns the signed transaction hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="signRawTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsSignTransactionPostApiResponse"/>&gt;</returns>
        Task<IApiTransactionsSignTransactionPostApiResponse> ApiTransactionsSignTransactionPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<SignRawTransactiondto> signRawTransactiondto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// sign a created raw transaction - returns the signed transaction hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="signRawTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsSignTransactionPostApiResponse"/>?&gt;</returns>
        Task<IApiTransactionsSignTransactionPostApiResponse?> ApiTransactionsSignTransactionPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<SignRawTransactiondto> signRawTransactiondto = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IApiTransactionsBroadcastTransactionPostApiResponse"/>
    /// </summary>
    public interface IApiTransactionsBroadcastTransactionPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiTransactionsCreateRawTransactionPostApiResponse"/>
    /// </summary>
    public interface IApiTransactionsCreateRawTransactionPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiTransactionsCreateRawTransactionV2PostApiResponse"/>
    /// </summary>
    public interface IApiTransactionsCreateRawTransactionV2PostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiTransactionsCreateRawTransactionV3PostApiResponse"/>
    /// </summary>
    public interface IApiTransactionsCreateRawTransactionV3PostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiTransactionsSendFundsFromWalletPostApiResponse"/>
    /// </summary>
    public interface IApiTransactionsSendFundsFromWalletPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiTransactionsSignTransactionPostApiResponse"/>
    /// </summary>
    public interface IApiTransactionsSignTransactionPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TransactionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiTransactionsBroadcastTransactionPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiTransactionsBroadcastTransactionPost;

        internal void ExecuteOnApiTransactionsBroadcastTransactionPost(TransactionsApi.ApiTransactionsBroadcastTransactionPostApiResponse apiResponse)
        {
            OnApiTransactionsBroadcastTransactionPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiTransactionsBroadcastTransactionPost(Exception exception)
        {
            OnErrorApiTransactionsBroadcastTransactionPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiTransactionsCreateRawTransactionPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiTransactionsCreateRawTransactionPost;

        internal void ExecuteOnApiTransactionsCreateRawTransactionPost(TransactionsApi.ApiTransactionsCreateRawTransactionPostApiResponse apiResponse)
        {
            OnApiTransactionsCreateRawTransactionPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiTransactionsCreateRawTransactionPost(Exception exception)
        {
            OnErrorApiTransactionsCreateRawTransactionPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiTransactionsCreateRawTransactionV2Post;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiTransactionsCreateRawTransactionV2Post;

        internal void ExecuteOnApiTransactionsCreateRawTransactionV2Post(TransactionsApi.ApiTransactionsCreateRawTransactionV2PostApiResponse apiResponse)
        {
            OnApiTransactionsCreateRawTransactionV2Post?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiTransactionsCreateRawTransactionV2Post(Exception exception)
        {
            OnErrorApiTransactionsCreateRawTransactionV2Post?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiTransactionsCreateRawTransactionV3Post;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiTransactionsCreateRawTransactionV3Post;

        internal void ExecuteOnApiTransactionsCreateRawTransactionV3Post(TransactionsApi.ApiTransactionsCreateRawTransactionV3PostApiResponse apiResponse)
        {
            OnApiTransactionsCreateRawTransactionV3Post?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiTransactionsCreateRawTransactionV3Post(Exception exception)
        {
            OnErrorApiTransactionsCreateRawTransactionV3Post?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiTransactionsSendFundsFromWalletPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiTransactionsSendFundsFromWalletPost;

        internal void ExecuteOnApiTransactionsSendFundsFromWalletPost(TransactionsApi.ApiTransactionsSendFundsFromWalletPostApiResponse apiResponse)
        {
            OnApiTransactionsSendFundsFromWalletPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiTransactionsSendFundsFromWalletPost(Exception exception)
        {
            OnErrorApiTransactionsSendFundsFromWalletPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiTransactionsSignTransactionPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiTransactionsSignTransactionPost;

        internal void ExecuteOnApiTransactionsSignTransactionPost(TransactionsApi.ApiTransactionsSignTransactionPostApiResponse apiResponse)
        {
            OnApiTransactionsSignTransactionPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiTransactionsSignTransactionPost(Exception exception)
        {
            OnErrorApiTransactionsSignTransactionPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TransactionsApi : ITransactionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TransactionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TransactionsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi(ILogger<TransactionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TransactionsApiEvents transactionsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TransactionsApi>();
            HttpClient = httpClient;
            Events = transactionsApiEvents;
        }

        partial void FormatApiTransactionsBroadcastTransactionPost(ref Option<string> nodeUrlOrApiAccessKey, Option<BroadcastTransactiondto> broadcastTransactiondto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="broadcastTransactiondto"></param>
        /// <returns></returns>
        private void ValidateApiTransactionsBroadcastTransactionPost(Option<string> nodeUrlOrApiAccessKey, Option<BroadcastTransactiondto> broadcastTransactiondto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (broadcastTransactiondto.IsSet && broadcastTransactiondto.Value == null)
                throw new ArgumentNullException(nameof(broadcastTransactiondto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="broadcastTransactiondto"></param>
        private void AfterApiTransactionsBroadcastTransactionPostDefaultImplementation(IApiTransactionsBroadcastTransactionPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<BroadcastTransactiondto> broadcastTransactiondto)
        {
            bool suppressDefaultLog = false;
            AfterApiTransactionsBroadcastTransactionPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, broadcastTransactiondto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="broadcastTransactiondto"></param>
        partial void AfterApiTransactionsBroadcastTransactionPost(ref bool suppressDefaultLog, IApiTransactionsBroadcastTransactionPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<BroadcastTransactiondto> broadcastTransactiondto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="broadcastTransactiondto"></param>
        private void OnErrorApiTransactionsBroadcastTransactionPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<BroadcastTransactiondto> broadcastTransactiondto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiTransactionsBroadcastTransactionPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, broadcastTransactiondto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="broadcastTransactiondto"></param>
        partial void OnErrorApiTransactionsBroadcastTransactionPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<BroadcastTransactiondto> broadcastTransactiondto);

        /// <summary>
        /// broadcast transaction on the Litecoin blockchain 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="broadcastTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsBroadcastTransactionPostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsBroadcastTransactionPostApiResponse?> ApiTransactionsBroadcastTransactionPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<BroadcastTransactiondto> broadcastTransactiondto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiTransactionsBroadcastTransactionPostAsync(nodeUrlOrApiAccessKey, broadcastTransactiondto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// broadcast transaction on the Litecoin blockchain 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="broadcastTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsBroadcastTransactionPostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsBroadcastTransactionPostApiResponse> ApiTransactionsBroadcastTransactionPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<BroadcastTransactiondto> broadcastTransactiondto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiTransactionsBroadcastTransactionPost(nodeUrlOrApiAccessKey, broadcastTransactiondto);

                FormatApiTransactionsBroadcastTransactionPost(ref nodeUrlOrApiAccessKey, broadcastTransactiondto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Transactions/broadcast-transaction"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Transactions/broadcast-transaction");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (broadcastTransactiondto.IsSet)
                        httpRequestMessageLocalVar.Content = (broadcastTransactiondto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(broadcastTransactiondto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiTransactionsBroadcastTransactionPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiTransactionsBroadcastTransactionPostApiResponse>();

                        ApiTransactionsBroadcastTransactionPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Transactions/broadcast-transaction", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiTransactionsBroadcastTransactionPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, broadcastTransactiondto);

                        Events.ExecuteOnApiTransactionsBroadcastTransactionPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiTransactionsBroadcastTransactionPostDefaultImplementation(e, "/api/Transactions/broadcast-transaction", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, broadcastTransactiondto);
                Events.ExecuteOnErrorApiTransactionsBroadcastTransactionPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiTransactionsBroadcastTransactionPostApiResponse"/>
        /// </summary>
        public partial class ApiTransactionsBroadcastTransactionPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiTransactionsBroadcastTransactionPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiTransactionsBroadcastTransactionPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiTransactionsBroadcastTransactionPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiTransactionsBroadcastTransactionPostApiResponse(ILogger<ApiTransactionsBroadcastTransactionPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiTransactionsCreateRawTransactionPost(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, Option<CreateRawTransactiondto> createRawTransactiondto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="createRawTransactiondto"></param>
        /// <returns></returns>
        private void ValidateApiTransactionsCreateRawTransactionPost(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<CreateRawTransactiondto> createRawTransactiondto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (createRawTransactiondto.IsSet && createRawTransactiondto.Value == null)
                throw new ArgumentNullException(nameof(createRawTransactiondto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="createRawTransactiondto"></param>
        private void AfterApiTransactionsCreateRawTransactionPostDefaultImplementation(IApiTransactionsCreateRawTransactionPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<CreateRawTransactiondto> createRawTransactiondto)
        {
            bool suppressDefaultLog = false;
            AfterApiTransactionsCreateRawTransactionPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, createRawTransactiondto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="createRawTransactiondto"></param>
        partial void AfterApiTransactionsCreateRawTransactionPost(ref bool suppressDefaultLog, IApiTransactionsCreateRawTransactionPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<CreateRawTransactiondto> createRawTransactiondto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="createRawTransactiondto"></param>
        private void OnErrorApiTransactionsCreateRawTransactionPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<CreateRawTransactiondto> createRawTransactiondto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiTransactionsCreateRawTransactionPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, createRawTransactiondto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="createRawTransactiondto"></param>
        partial void OnErrorApiTransactionsCreateRawTransactionPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<CreateRawTransactiondto> createRawTransactiondto);

        /// <summary>
        /// create raw transaction - returns the transaction hash 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="createRawTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionPostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsCreateRawTransactionPostApiResponse?> ApiTransactionsCreateRawTransactionPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<CreateRawTransactiondto> createRawTransactiondto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiTransactionsCreateRawTransactionPostAsync(nodeUrlOrApiAccessKey, walletName, createRawTransactiondto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// create raw transaction - returns the transaction hash 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="createRawTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionPostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsCreateRawTransactionPostApiResponse> ApiTransactionsCreateRawTransactionPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<CreateRawTransactiondto> createRawTransactiondto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiTransactionsCreateRawTransactionPost(nodeUrlOrApiAccessKey, walletName, createRawTransactiondto);

                FormatApiTransactionsCreateRawTransactionPost(ref nodeUrlOrApiAccessKey, ref walletName, createRawTransactiondto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Transactions/create-raw-transaction"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Transactions/create-raw-transaction");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    if (createRawTransactiondto.IsSet)
                        httpRequestMessageLocalVar.Content = (createRawTransactiondto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createRawTransactiondto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiTransactionsCreateRawTransactionPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiTransactionsCreateRawTransactionPostApiResponse>();

                        ApiTransactionsCreateRawTransactionPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Transactions/create-raw-transaction", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiTransactionsCreateRawTransactionPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, createRawTransactiondto);

                        Events.ExecuteOnApiTransactionsCreateRawTransactionPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiTransactionsCreateRawTransactionPostDefaultImplementation(e, "/api/Transactions/create-raw-transaction", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, createRawTransactiondto);
                Events.ExecuteOnErrorApiTransactionsCreateRawTransactionPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiTransactionsCreateRawTransactionPostApiResponse"/>
        /// </summary>
        public partial class ApiTransactionsCreateRawTransactionPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiTransactionsCreateRawTransactionPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiTransactionsCreateRawTransactionPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiTransactionsCreateRawTransactionPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiTransactionsCreateRawTransactionPostApiResponse(ILogger<ApiTransactionsCreateRawTransactionPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiTransactionsCreateRawTransactionV2Post(ref Option<string> nodeUrlOrApiAccessKey, Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createRawTransactiondtoV2"></param>
        /// <returns></returns>
        private void ValidateApiTransactionsCreateRawTransactionV2Post(Option<string> nodeUrlOrApiAccessKey, Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (createRawTransactiondtoV2.IsSet && createRawTransactiondtoV2.Value == null)
                throw new ArgumentNullException(nameof(createRawTransactiondtoV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createRawTransactiondtoV2"></param>
        private void AfterApiTransactionsCreateRawTransactionV2PostDefaultImplementation(IApiTransactionsCreateRawTransactionV2PostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2)
        {
            bool suppressDefaultLog = false;
            AfterApiTransactionsCreateRawTransactionV2Post(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, createRawTransactiondtoV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createRawTransactiondtoV2"></param>
        partial void AfterApiTransactionsCreateRawTransactionV2Post(ref bool suppressDefaultLog, IApiTransactionsCreateRawTransactionV2PostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createRawTransactiondtoV2"></param>
        private void OnErrorApiTransactionsCreateRawTransactionV2PostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiTransactionsCreateRawTransactionV2Post(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, createRawTransactiondtoV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createRawTransactiondtoV2"></param>
        partial void OnErrorApiTransactionsCreateRawTransactionV2Post(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2);

        /// <summary>
        /// create raw transaction with the address UTXOs - returns the transaction hash 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createRawTransactiondtoV2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionV2PostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsCreateRawTransactionV2PostApiResponse?> ApiTransactionsCreateRawTransactionV2PostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2 = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiTransactionsCreateRawTransactionV2PostAsync(nodeUrlOrApiAccessKey, createRawTransactiondtoV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// create raw transaction with the address UTXOs - returns the transaction hash 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createRawTransactiondtoV2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionV2PostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsCreateRawTransactionV2PostApiResponse> ApiTransactionsCreateRawTransactionV2PostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2 = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiTransactionsCreateRawTransactionV2Post(nodeUrlOrApiAccessKey, createRawTransactiondtoV2);

                FormatApiTransactionsCreateRawTransactionV2Post(ref nodeUrlOrApiAccessKey, createRawTransactiondtoV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Transactions/create-raw-transaction-v2"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Transactions/create-raw-transaction-v2");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (createRawTransactiondtoV2.IsSet)
                        httpRequestMessageLocalVar.Content = (createRawTransactiondtoV2.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createRawTransactiondtoV2.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiTransactionsCreateRawTransactionV2PostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiTransactionsCreateRawTransactionV2PostApiResponse>();

                        ApiTransactionsCreateRawTransactionV2PostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Transactions/create-raw-transaction-v2", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiTransactionsCreateRawTransactionV2PostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, createRawTransactiondtoV2);

                        Events.ExecuteOnApiTransactionsCreateRawTransactionV2Post(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiTransactionsCreateRawTransactionV2PostDefaultImplementation(e, "/api/Transactions/create-raw-transaction-v2", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, createRawTransactiondtoV2);
                Events.ExecuteOnErrorApiTransactionsCreateRawTransactionV2Post(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiTransactionsCreateRawTransactionV2PostApiResponse"/>
        /// </summary>
        public partial class ApiTransactionsCreateRawTransactionV2PostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiTransactionsCreateRawTransactionV2PostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiTransactionsCreateRawTransactionV2PostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiTransactionsCreateRawTransactionV2PostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiTransactionsCreateRawTransactionV2PostApiResponse(ILogger<ApiTransactionsCreateRawTransactionV2PostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiTransactionsCreateRawTransactionV3Post(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="createRawTransactiondtoV3"></param>
        /// <returns></returns>
        private void ValidateApiTransactionsCreateRawTransactionV3Post(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (createRawTransactiondtoV3.IsSet && createRawTransactiondtoV3.Value == null)
                throw new ArgumentNullException(nameof(createRawTransactiondtoV3));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="createRawTransactiondtoV3"></param>
        private void AfterApiTransactionsCreateRawTransactionV3PostDefaultImplementation(IApiTransactionsCreateRawTransactionV3PostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3)
        {
            bool suppressDefaultLog = false;
            AfterApiTransactionsCreateRawTransactionV3Post(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="createRawTransactiondtoV3"></param>
        partial void AfterApiTransactionsCreateRawTransactionV3Post(ref bool suppressDefaultLog, IApiTransactionsCreateRawTransactionV3PostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="createRawTransactiondtoV3"></param>
        private void OnErrorApiTransactionsCreateRawTransactionV3PostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiTransactionsCreateRawTransactionV3Post(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="createRawTransactiondtoV3"></param>
        partial void OnErrorApiTransactionsCreateRawTransactionV3Post(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3);

        /// <summary>
        /// create raw transaction with the service Fee address attached - returns the transaction hash 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="createRawTransactiondtoV3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionV3PostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsCreateRawTransactionV3PostApiResponse?> ApiTransactionsCreateRawTransactionV3PostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3 = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiTransactionsCreateRawTransactionV3PostAsync(nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// create raw transaction with the service Fee address attached - returns the transaction hash 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="createRawTransactiondtoV3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsCreateRawTransactionV3PostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsCreateRawTransactionV3PostApiResponse> ApiTransactionsCreateRawTransactionV3PostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3 = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiTransactionsCreateRawTransactionV3Post(nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3);

                FormatApiTransactionsCreateRawTransactionV3Post(ref nodeUrlOrApiAccessKey, ref walletName, createRawTransactiondtoV3);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Transactions/create-raw-transaction-v3"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Transactions/create-raw-transaction-v3");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    if (createRawTransactiondtoV3.IsSet)
                        httpRequestMessageLocalVar.Content = (createRawTransactiondtoV3.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createRawTransactiondtoV3.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiTransactionsCreateRawTransactionV3PostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiTransactionsCreateRawTransactionV3PostApiResponse>();

                        ApiTransactionsCreateRawTransactionV3PostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Transactions/create-raw-transaction-v3", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiTransactionsCreateRawTransactionV3PostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3);

                        Events.ExecuteOnApiTransactionsCreateRawTransactionV3Post(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiTransactionsCreateRawTransactionV3PostDefaultImplementation(e, "/api/Transactions/create-raw-transaction-v3", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3);
                Events.ExecuteOnErrorApiTransactionsCreateRawTransactionV3Post(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiTransactionsCreateRawTransactionV3PostApiResponse"/>
        /// </summary>
        public partial class ApiTransactionsCreateRawTransactionV3PostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiTransactionsCreateRawTransactionV3PostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiTransactionsCreateRawTransactionV3PostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiTransactionsCreateRawTransactionV3PostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiTransactionsCreateRawTransactionV3PostApiResponse(ILogger<ApiTransactionsCreateRawTransactionV3PostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiTransactionsSendFundsFromWalletPost(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, ref Option<string> encryptedPassphrase, Option<SendFromWalletdto> sendFromWalletdto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="sendFromWalletdto"></param>
        /// <returns></returns>
        private void ValidateApiTransactionsSendFundsFromWalletPost(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<SendFromWalletdto> sendFromWalletdto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (encryptedPassphrase.IsSet && encryptedPassphrase.Value == null)
                throw new ArgumentNullException(nameof(encryptedPassphrase));

            if (sendFromWalletdto.IsSet && sendFromWalletdto.Value == null)
                throw new ArgumentNullException(nameof(sendFromWalletdto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="sendFromWalletdto"></param>
        private void AfterApiTransactionsSendFundsFromWalletPostDefaultImplementation(IApiTransactionsSendFundsFromWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<SendFromWalletdto> sendFromWalletdto)
        {
            bool suppressDefaultLog = false;
            AfterApiTransactionsSendFundsFromWalletPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="sendFromWalletdto"></param>
        partial void AfterApiTransactionsSendFundsFromWalletPost(ref bool suppressDefaultLog, IApiTransactionsSendFundsFromWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<SendFromWalletdto> sendFromWalletdto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="sendFromWalletdto"></param>
        private void OnErrorApiTransactionsSendFundsFromWalletPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<SendFromWalletdto> sendFromWalletdto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiTransactionsSendFundsFromWalletPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="sendFromWalletdto"></param>
        partial void OnErrorApiTransactionsSendFundsFromWalletPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<SendFromWalletdto> sendFromWalletdto);

        /// <summary>
        /// Send a funds from one address to another using wallet 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="sendFromWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsSendFundsFromWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsSendFundsFromWalletPostApiResponse?> ApiTransactionsSendFundsFromWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<SendFromWalletdto> sendFromWalletdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiTransactionsSendFundsFromWalletPostAsync(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send a funds from one address to another using wallet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="sendFromWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsSendFundsFromWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsSendFundsFromWalletPostApiResponse> ApiTransactionsSendFundsFromWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<SendFromWalletdto> sendFromWalletdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiTransactionsSendFundsFromWalletPost(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto);

                FormatApiTransactionsSendFundsFromWalletPost(ref nodeUrlOrApiAccessKey, ref walletName, ref encryptedPassphrase, sendFromWalletdto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Transactions/send-funds-from-wallet"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Transactions/send-funds-from-wallet");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    if (encryptedPassphrase.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("encryptedPassphrase", ClientUtils.ParameterToString(encryptedPassphrase.Value));

                    if (sendFromWalletdto.IsSet)
                        httpRequestMessageLocalVar.Content = (sendFromWalletdto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sendFromWalletdto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiTransactionsSendFundsFromWalletPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiTransactionsSendFundsFromWalletPostApiResponse>();

                        ApiTransactionsSendFundsFromWalletPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Transactions/send-funds-from-wallet", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiTransactionsSendFundsFromWalletPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto);

                        Events.ExecuteOnApiTransactionsSendFundsFromWalletPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiTransactionsSendFundsFromWalletPostDefaultImplementation(e, "/api/Transactions/send-funds-from-wallet", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto);
                Events.ExecuteOnErrorApiTransactionsSendFundsFromWalletPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiTransactionsSendFundsFromWalletPostApiResponse"/>
        /// </summary>
        public partial class ApiTransactionsSendFundsFromWalletPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiTransactionsSendFundsFromWalletPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiTransactionsSendFundsFromWalletPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiTransactionsSendFundsFromWalletPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiTransactionsSendFundsFromWalletPostApiResponse(ILogger<ApiTransactionsSendFundsFromWalletPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiTransactionsSignTransactionPost(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, Option<SignRawTransactiondto> signRawTransactiondto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="signRawTransactiondto"></param>
        /// <returns></returns>
        private void ValidateApiTransactionsSignTransactionPost(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<SignRawTransactiondto> signRawTransactiondto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (signRawTransactiondto.IsSet && signRawTransactiondto.Value == null)
                throw new ArgumentNullException(nameof(signRawTransactiondto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="signRawTransactiondto"></param>
        private void AfterApiTransactionsSignTransactionPostDefaultImplementation(IApiTransactionsSignTransactionPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<SignRawTransactiondto> signRawTransactiondto)
        {
            bool suppressDefaultLog = false;
            AfterApiTransactionsSignTransactionPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, signRawTransactiondto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="signRawTransactiondto"></param>
        partial void AfterApiTransactionsSignTransactionPost(ref bool suppressDefaultLog, IApiTransactionsSignTransactionPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<SignRawTransactiondto> signRawTransactiondto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="signRawTransactiondto"></param>
        private void OnErrorApiTransactionsSignTransactionPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<SignRawTransactiondto> signRawTransactiondto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiTransactionsSignTransactionPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, signRawTransactiondto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="signRawTransactiondto"></param>
        partial void OnErrorApiTransactionsSignTransactionPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<SignRawTransactiondto> signRawTransactiondto);

        /// <summary>
        /// sign a created raw transaction - returns the signed transaction hash 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="signRawTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsSignTransactionPostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsSignTransactionPostApiResponse?> ApiTransactionsSignTransactionPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<SignRawTransactiondto> signRawTransactiondto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiTransactionsSignTransactionPostAsync(nodeUrlOrApiAccessKey, walletName, signRawTransactiondto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// sign a created raw transaction - returns the signed transaction hash 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="signRawTransactiondto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiTransactionsSignTransactionPostApiResponse"/>&gt;</returns>
        public async Task<IApiTransactionsSignTransactionPostApiResponse> ApiTransactionsSignTransactionPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<SignRawTransactiondto> signRawTransactiondto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiTransactionsSignTransactionPost(nodeUrlOrApiAccessKey, walletName, signRawTransactiondto);

                FormatApiTransactionsSignTransactionPost(ref nodeUrlOrApiAccessKey, ref walletName, signRawTransactiondto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Transactions/sign-transaction"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Transactions/sign-transaction");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    if (signRawTransactiondto.IsSet)
                        httpRequestMessageLocalVar.Content = (signRawTransactiondto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(signRawTransactiondto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiTransactionsSignTransactionPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiTransactionsSignTransactionPostApiResponse>();

                        ApiTransactionsSignTransactionPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Transactions/sign-transaction", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiTransactionsSignTransactionPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, signRawTransactiondto);

                        Events.ExecuteOnApiTransactionsSignTransactionPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiTransactionsSignTransactionPostDefaultImplementation(e, "/api/Transactions/sign-transaction", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, signRawTransactiondto);
                Events.ExecuteOnErrorApiTransactionsSignTransactionPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiTransactionsSignTransactionPostApiResponse"/>
        /// </summary>
        public partial class ApiTransactionsSignTransactionPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiTransactionsSignTransactionPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiTransactionsSignTransactionPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiTransactionsSignTransactionPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiTransactionsSignTransactionPostApiResponse(ILogger<ApiTransactionsSignTransactionPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
