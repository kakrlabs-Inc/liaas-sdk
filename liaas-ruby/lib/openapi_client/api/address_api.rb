=begin
#KakrLabs-SDK-Creator

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module OpenapiClient
  class AddressApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # address balance - returns the confirmed and unconfirmed balance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :address 
    # @return [nil]
    def api_address_address_balance_get(opts = {})
      api_address_address_balance_get_with_http_info(opts)
      nil
    end

    # address balance - returns the confirmed and unconfirmed balance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :address 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_address_balance_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_address_balance_get ...'
      end
      # resource path
      local_var_path = '/api/Address/address-balance'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_address_balance_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_address_balance_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get address details. all address details are returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :address 
    # @return [nil]
    def api_address_address_details_get(opts = {})
      api_address_address_details_get_with_http_info(opts)
      nil
    end

    # Get address details. all address details are returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :address 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_address_details_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_address_details_get ...'
      end
      # resource path
      local_var_path = '/api/Address/address-details'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_address_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_address_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the address private key using encrypted passphrase
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet 
    # @option opts [String] :encrypted_passphrase 
    # @option opts [String] :address 
    # @return [nil]
    def api_address_address_private_key_get(opts = {})
      api_address_address_private_key_get_with_http_info(opts)
      nil
    end

    # Get the address private key using encrypted passphrase
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet 
    # @option opts [String] :encrypted_passphrase 
    # @option opts [String] :address 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_address_private_key_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_address_private_key_get ...'
      end
      # resource path
      local_var_path = '/api/Address/address-private-key'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'wallet'] = opts[:'wallet'] if !opts[:'wallet'].nil?
      header_params[:'encryptedPassphrase'] = opts[:'encrypted_passphrase'] if !opts[:'encrypted_passphrase'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_address_private_key_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_address_private_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the address private key using mnemonics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet 
    # @option opts [String] :mnemonics 
    # @option opts [String] :address 
    # @return [nil]
    def api_address_address_private_key_v2_get(opts = {})
      api_address_address_private_key_v2_get_with_http_info(opts)
      nil
    end

    # Get the address private key using mnemonics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet 
    # @option opts [String] :mnemonics 
    # @option opts [String] :address 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_address_private_key_v2_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_address_private_key_v2_get ...'
      end
      # resource path
      local_var_path = '/api/Address/address-private-key-v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'wallet'] = opts[:'wallet'] if !opts[:'wallet'].nil?
      header_params[:'mnemonics'] = opts[:'mnemonics'] if !opts[:'mnemonics'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_address_private_key_v2_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_address_private_key_v2_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retruns all transactions of an address without wallet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :address 
    # @option opts [Integer] :take  (default to 10)
    # @option opts [Integer] :skip  (default to 0)
    # @return [nil]
    def api_address_address_transaction_get(opts = {})
      api_address_address_transaction_get_with_http_info(opts)
      nil
    end

    # retruns all transactions of an address without wallet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :address 
    # @option opts [Integer] :take  (default to 10)
    # @option opts [Integer] :skip  (default to 0)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_address_transaction_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_address_transaction_get ...'
      end
      # resource path
      local_var_path = '/api/Address/address-transaction'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_address_transaction_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_address_transaction_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :encrypted_passphrase 
    # @option opts [CreateMultiSignatureAddressdto] :create_multi_signature_addressdto 
    # @return [nil]
    def api_address_create_muti_sig_address_post(opts = {})
      api_address_create_muti_sig_address_post_with_http_info(opts)
      nil
    end

    # Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :encrypted_passphrase 
    # @option opts [CreateMultiSignatureAddressdto] :create_multi_signature_addressdto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_create_muti_sig_address_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_create_muti_sig_address_post ...'
      end
      # resource path
      local_var_path = '/api/Address/create-muti-sig-address'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?
      header_params[:'encryptedPassphrase'] = opts[:'encrypted_passphrase'] if !opts[:'encrypted_passphrase'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_multi_signature_addressdto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_create_muti_sig_address_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_create_muti_sig_address_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new address in a particular wallet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :encrypted_passphrase 
    # @option opts [CreateAddressdto] :create_addressdto 
    # @return [nil]
    def api_address_create_post(opts = {})
      api_address_create_post_with_http_info(opts)
      nil
    end

    # Create a new address in a particular wallet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :encrypted_passphrase 
    # @option opts [CreateAddressdto] :create_addressdto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_create_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_create_post ...'
      end
      # resource path
      local_var_path = '/api/Address/create'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?
      header_params[:'encryptedPassphrase'] = opts[:'encrypted_passphrase'] if !opts[:'encrypted_passphrase'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_addressdto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_create_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_create_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate a default address for a wallet. This address can be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :encrypted_passphrase 
    # @option opts [GenerateDefaultAddressdto] :generate_default_addressdto 
    # @return [nil]
    def api_address_generate_default_address_post(opts = {})
      api_address_generate_default_address_post_with_http_info(opts)
      nil
    end

    # Generate a default address for a wallet. This address can be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :encrypted_passphrase 
    # @option opts [GenerateDefaultAddressdto] :generate_default_addressdto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_generate_default_address_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_generate_default_address_post ...'
      end
      # resource path
      local_var_path = '/api/Address/generate-default-address'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?
      header_params[:'encryptedPassphrase'] = opts[:'encrypted_passphrase'] if !opts[:'encrypted_passphrase'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'generate_default_addressdto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_generate_default_address_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_generate_default_address_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet 
    # @option opts [String] :mnemonics 
    # @option opts [String] :address 
    # @return [nil]
    def api_address_screen_address_get(opts = {})
      api_address_screen_address_get_with_http_info(opts)
      nil
    end

    # Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet 
    # @option opts [String] :mnemonics 
    # @option opts [String] :address 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_screen_address_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_screen_address_get ...'
      end
      # resource path
      local_var_path = '/api/Address/screen-address'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'wallet'] = opts[:'wallet'] if !opts[:'wallet'].nil?
      header_params[:'mnemonics'] = opts[:'mnemonics'] if !opts[:'mnemonics'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_screen_address_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_screen_address_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sign a message with address private key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [SignMessagedto] :sign_messagedto 
    # @return [nil]
    def api_address_sign_message_post(opts = {})
      api_address_sign_message_post_with_http_info(opts)
      nil
    end

    # sign a message with address private key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [SignMessagedto] :sign_messagedto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_sign_message_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_sign_message_post ...'
      end
      # resource path
      local_var_path = '/api/Address/sign-message'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'sign_messagedto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_sign_message_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_sign_message_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # verify signed message
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [VerifyMessagedto] :verify_messagedto 
    # @return [nil]
    def api_address_verify_message_post(opts = {})
      api_address_verify_message_post_with_http_info(opts)
      nil
    end

    # verify signed message
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [VerifyMessagedto] :verify_messagedto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_address_verify_message_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.api_address_verify_message_post ...'
      end
      # resource path
      local_var_path = '/api/Address/verify-message'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'verify_messagedto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AddressApi.api_address_verify_message_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#api_address_verify_message_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
