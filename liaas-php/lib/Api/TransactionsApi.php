<?php
/**
 * TransactionsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiTransactionsBroadcastTransactionPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiTransactionsCreateRawTransactionPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiTransactionsCreateRawTransactionV2Post' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiTransactionsCreateRawTransactionV3Post' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiTransactionsSendFundsFromWalletPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiTransactionsSignTransactionPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiTransactionsBroadcastTransactionPost
     *
     * broadcast transaction on the Litecoin blockchain
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\BroadcastTransactiondto|null $broadcast_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsBroadcastTransactionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiTransactionsBroadcastTransactionPost($node_url_or_api_access_key = null, $broadcast_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsBroadcastTransactionPost'][0])
    {
        $this->apiTransactionsBroadcastTransactionPostWithHttpInfo($node_url_or_api_access_key, $broadcast_transactiondto, $contentType);
    }

    /**
     * Operation apiTransactionsBroadcastTransactionPostWithHttpInfo
     *
     * broadcast transaction on the Litecoin blockchain
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\BroadcastTransactiondto|null $broadcast_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsBroadcastTransactionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsBroadcastTransactionPostWithHttpInfo($node_url_or_api_access_key = null, $broadcast_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsBroadcastTransactionPost'][0])
    {
        $request = $this->apiTransactionsBroadcastTransactionPostRequest($node_url_or_api_access_key, $broadcast_transactiondto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiTransactionsBroadcastTransactionPostAsync
     *
     * broadcast transaction on the Litecoin blockchain
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\BroadcastTransactiondto|null $broadcast_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsBroadcastTransactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsBroadcastTransactionPostAsync($node_url_or_api_access_key = null, $broadcast_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsBroadcastTransactionPost'][0])
    {
        return $this->apiTransactionsBroadcastTransactionPostAsyncWithHttpInfo($node_url_or_api_access_key, $broadcast_transactiondto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsBroadcastTransactionPostAsyncWithHttpInfo
     *
     * broadcast transaction on the Litecoin blockchain
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\BroadcastTransactiondto|null $broadcast_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsBroadcastTransactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsBroadcastTransactionPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $broadcast_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsBroadcastTransactionPost'][0])
    {
        $returnType = '';
        $request = $this->apiTransactionsBroadcastTransactionPostRequest($node_url_or_api_access_key, $broadcast_transactiondto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsBroadcastTransactionPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\BroadcastTransactiondto|null $broadcast_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsBroadcastTransactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsBroadcastTransactionPostRequest($node_url_or_api_access_key = null, $broadcast_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsBroadcastTransactionPost'][0])
    {




        $resourcePath = '/api/Transactions/broadcast-transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($broadcast_transactiondto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($broadcast_transactiondto));
            } else {
                $httpBody = $broadcast_transactiondto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsCreateRawTransactionPost
     *
     * create raw transaction - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondto|null $create_raw_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiTransactionsCreateRawTransactionPost($node_url_or_api_access_key = null, $wallet_name = null, $create_raw_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionPost'][0])
    {
        $this->apiTransactionsCreateRawTransactionPostWithHttpInfo($node_url_or_api_access_key, $wallet_name, $create_raw_transactiondto, $contentType);
    }

    /**
     * Operation apiTransactionsCreateRawTransactionPostWithHttpInfo
     *
     * create raw transaction - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondto|null $create_raw_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsCreateRawTransactionPostWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $create_raw_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionPost'][0])
    {
        $request = $this->apiTransactionsCreateRawTransactionPostRequest($node_url_or_api_access_key, $wallet_name, $create_raw_transactiondto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiTransactionsCreateRawTransactionPostAsync
     *
     * create raw transaction - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondto|null $create_raw_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsCreateRawTransactionPostAsync($node_url_or_api_access_key = null, $wallet_name = null, $create_raw_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionPost'][0])
    {
        return $this->apiTransactionsCreateRawTransactionPostAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $create_raw_transactiondto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsCreateRawTransactionPostAsyncWithHttpInfo
     *
     * create raw transaction - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondto|null $create_raw_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsCreateRawTransactionPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $create_raw_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionPost'][0])
    {
        $returnType = '';
        $request = $this->apiTransactionsCreateRawTransactionPostRequest($node_url_or_api_access_key, $wallet_name, $create_raw_transactiondto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsCreateRawTransactionPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondto|null $create_raw_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsCreateRawTransactionPostRequest($node_url_or_api_access_key = null, $wallet_name = null, $create_raw_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionPost'][0])
    {





        $resourcePath = '/api/Transactions/create-raw-transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_raw_transactiondto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_raw_transactiondto));
            } else {
                $httpBody = $create_raw_transactiondto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsCreateRawTransactionV2Post
     *
     * create raw transaction with the address UTXOs - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondtoV2|null $create_raw_transactiondto_v2  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionV2Post'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiTransactionsCreateRawTransactionV2Post($node_url_or_api_access_key = null, $create_raw_transactiondto_v2 = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionV2Post'][0])
    {
        $this->apiTransactionsCreateRawTransactionV2PostWithHttpInfo($node_url_or_api_access_key, $create_raw_transactiondto_v2, $contentType);
    }

    /**
     * Operation apiTransactionsCreateRawTransactionV2PostWithHttpInfo
     *
     * create raw transaction with the address UTXOs - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondtoV2|null $create_raw_transactiondto_v2  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionV2Post'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsCreateRawTransactionV2PostWithHttpInfo($node_url_or_api_access_key = null, $create_raw_transactiondto_v2 = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionV2Post'][0])
    {
        $request = $this->apiTransactionsCreateRawTransactionV2PostRequest($node_url_or_api_access_key, $create_raw_transactiondto_v2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiTransactionsCreateRawTransactionV2PostAsync
     *
     * create raw transaction with the address UTXOs - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondtoV2|null $create_raw_transactiondto_v2  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionV2Post'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsCreateRawTransactionV2PostAsync($node_url_or_api_access_key = null, $create_raw_transactiondto_v2 = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionV2Post'][0])
    {
        return $this->apiTransactionsCreateRawTransactionV2PostAsyncWithHttpInfo($node_url_or_api_access_key, $create_raw_transactiondto_v2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsCreateRawTransactionV2PostAsyncWithHttpInfo
     *
     * create raw transaction with the address UTXOs - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondtoV2|null $create_raw_transactiondto_v2  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionV2Post'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsCreateRawTransactionV2PostAsyncWithHttpInfo($node_url_or_api_access_key = null, $create_raw_transactiondto_v2 = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionV2Post'][0])
    {
        $returnType = '';
        $request = $this->apiTransactionsCreateRawTransactionV2PostRequest($node_url_or_api_access_key, $create_raw_transactiondto_v2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsCreateRawTransactionV2Post'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondtoV2|null $create_raw_transactiondto_v2  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionV2Post'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsCreateRawTransactionV2PostRequest($node_url_or_api_access_key = null, $create_raw_transactiondto_v2 = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionV2Post'][0])
    {




        $resourcePath = '/api/Transactions/create-raw-transaction-v2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_raw_transactiondto_v2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_raw_transactiondto_v2));
            } else {
                $httpBody = $create_raw_transactiondto_v2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsCreateRawTransactionV3Post
     *
     * create raw transaction with the service Fee address attached - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondtoV3|null $create_raw_transactiondto_v3  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionV3Post'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiTransactionsCreateRawTransactionV3Post($node_url_or_api_access_key = null, $wallet_name = null, $create_raw_transactiondto_v3 = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionV3Post'][0])
    {
        $this->apiTransactionsCreateRawTransactionV3PostWithHttpInfo($node_url_or_api_access_key, $wallet_name, $create_raw_transactiondto_v3, $contentType);
    }

    /**
     * Operation apiTransactionsCreateRawTransactionV3PostWithHttpInfo
     *
     * create raw transaction with the service Fee address attached - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondtoV3|null $create_raw_transactiondto_v3  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionV3Post'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsCreateRawTransactionV3PostWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $create_raw_transactiondto_v3 = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionV3Post'][0])
    {
        $request = $this->apiTransactionsCreateRawTransactionV3PostRequest($node_url_or_api_access_key, $wallet_name, $create_raw_transactiondto_v3, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiTransactionsCreateRawTransactionV3PostAsync
     *
     * create raw transaction with the service Fee address attached - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondtoV3|null $create_raw_transactiondto_v3  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionV3Post'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsCreateRawTransactionV3PostAsync($node_url_or_api_access_key = null, $wallet_name = null, $create_raw_transactiondto_v3 = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionV3Post'][0])
    {
        return $this->apiTransactionsCreateRawTransactionV3PostAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $create_raw_transactiondto_v3, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsCreateRawTransactionV3PostAsyncWithHttpInfo
     *
     * create raw transaction with the service Fee address attached - returns the transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondtoV3|null $create_raw_transactiondto_v3  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionV3Post'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsCreateRawTransactionV3PostAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $create_raw_transactiondto_v3 = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionV3Post'][0])
    {
        $returnType = '';
        $request = $this->apiTransactionsCreateRawTransactionV3PostRequest($node_url_or_api_access_key, $wallet_name, $create_raw_transactiondto_v3, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsCreateRawTransactionV3Post'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\CreateRawTransactiondtoV3|null $create_raw_transactiondto_v3  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsCreateRawTransactionV3Post'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsCreateRawTransactionV3PostRequest($node_url_or_api_access_key = null, $wallet_name = null, $create_raw_transactiondto_v3 = null, string $contentType = self::contentTypes['apiTransactionsCreateRawTransactionV3Post'][0])
    {





        $resourcePath = '/api/Transactions/create-raw-transaction-v3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_raw_transactiondto_v3)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_raw_transactiondto_v3));
            } else {
                $httpBody = $create_raw_transactiondto_v3;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsSendFundsFromWalletPost
     *
     * Send a funds from one address to another using wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\SendFromWalletdto|null $send_from_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsSendFundsFromWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiTransactionsSendFundsFromWalletPost($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $send_from_walletdto = null, string $contentType = self::contentTypes['apiTransactionsSendFundsFromWalletPost'][0])
    {
        $this->apiTransactionsSendFundsFromWalletPostWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $send_from_walletdto, $contentType);
    }

    /**
     * Operation apiTransactionsSendFundsFromWalletPostWithHttpInfo
     *
     * Send a funds from one address to another using wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\SendFromWalletdto|null $send_from_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsSendFundsFromWalletPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsSendFundsFromWalletPostWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $send_from_walletdto = null, string $contentType = self::contentTypes['apiTransactionsSendFundsFromWalletPost'][0])
    {
        $request = $this->apiTransactionsSendFundsFromWalletPostRequest($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $send_from_walletdto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiTransactionsSendFundsFromWalletPostAsync
     *
     * Send a funds from one address to another using wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\SendFromWalletdto|null $send_from_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsSendFundsFromWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsSendFundsFromWalletPostAsync($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $send_from_walletdto = null, string $contentType = self::contentTypes['apiTransactionsSendFundsFromWalletPost'][0])
    {
        return $this->apiTransactionsSendFundsFromWalletPostAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $send_from_walletdto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsSendFundsFromWalletPostAsyncWithHttpInfo
     *
     * Send a funds from one address to another using wallet
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\SendFromWalletdto|null $send_from_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsSendFundsFromWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsSendFundsFromWalletPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $send_from_walletdto = null, string $contentType = self::contentTypes['apiTransactionsSendFundsFromWalletPost'][0])
    {
        $returnType = '';
        $request = $this->apiTransactionsSendFundsFromWalletPostRequest($node_url_or_api_access_key, $wallet_name, $encrypted_passphrase, $send_from_walletdto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsSendFundsFromWalletPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  string|null $encrypted_passphrase  (optional)
     * @param  \OpenAPI\Client\Model\SendFromWalletdto|null $send_from_walletdto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsSendFundsFromWalletPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsSendFundsFromWalletPostRequest($node_url_or_api_access_key = null, $wallet_name = null, $encrypted_passphrase = null, $send_from_walletdto = null, string $contentType = self::contentTypes['apiTransactionsSendFundsFromWalletPost'][0])
    {






        $resourcePath = '/api/Transactions/send-funds-from-wallet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }
        // header params
        if ($encrypted_passphrase !== null) {
            $headerParams['encryptedPassphrase'] = ObjectSerializer::toHeaderValue($encrypted_passphrase);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send_from_walletdto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send_from_walletdto));
            } else {
                $httpBody = $send_from_walletdto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsSignTransactionPost
     *
     * sign a created raw transaction - returns the signed transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\SignRawTransactiondto|null $sign_raw_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsSignTransactionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiTransactionsSignTransactionPost($node_url_or_api_access_key = null, $wallet_name = null, $sign_raw_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsSignTransactionPost'][0])
    {
        $this->apiTransactionsSignTransactionPostWithHttpInfo($node_url_or_api_access_key, $wallet_name, $sign_raw_transactiondto, $contentType);
    }

    /**
     * Operation apiTransactionsSignTransactionPostWithHttpInfo
     *
     * sign a created raw transaction - returns the signed transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\SignRawTransactiondto|null $sign_raw_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsSignTransactionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsSignTransactionPostWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $sign_raw_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsSignTransactionPost'][0])
    {
        $request = $this->apiTransactionsSignTransactionPostRequest($node_url_or_api_access_key, $wallet_name, $sign_raw_transactiondto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiTransactionsSignTransactionPostAsync
     *
     * sign a created raw transaction - returns the signed transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\SignRawTransactiondto|null $sign_raw_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsSignTransactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsSignTransactionPostAsync($node_url_or_api_access_key = null, $wallet_name = null, $sign_raw_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsSignTransactionPost'][0])
    {
        return $this->apiTransactionsSignTransactionPostAsyncWithHttpInfo($node_url_or_api_access_key, $wallet_name, $sign_raw_transactiondto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsSignTransactionPostAsyncWithHttpInfo
     *
     * sign a created raw transaction - returns the signed transaction hash
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\SignRawTransactiondto|null $sign_raw_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsSignTransactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsSignTransactionPostAsyncWithHttpInfo($node_url_or_api_access_key = null, $wallet_name = null, $sign_raw_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsSignTransactionPost'][0])
    {
        $returnType = '';
        $request = $this->apiTransactionsSignTransactionPostRequest($node_url_or_api_access_key, $wallet_name, $sign_raw_transactiondto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsSignTransactionPost'
     *
     * @param  string|null $node_url_or_api_access_key  (optional)
     * @param  string|null $wallet_name  (optional)
     * @param  \OpenAPI\Client\Model\SignRawTransactiondto|null $sign_raw_transactiondto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiTransactionsSignTransactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsSignTransactionPostRequest($node_url_or_api_access_key = null, $wallet_name = null, $sign_raw_transactiondto = null, string $contentType = self::contentTypes['apiTransactionsSignTransactionPost'][0])
    {





        $resourcePath = '/api/Transactions/sign-transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($node_url_or_api_access_key !== null) {
            $headerParams['nodeUrlOrApiAccessKey'] = ObjectSerializer::toHeaderValue($node_url_or_api_access_key);
        }
        // header params
        if ($wallet_name !== null) {
            $headerParams['walletName'] = ObjectSerializer::toHeaderValue($wallet_name);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sign_raw_transactiondto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sign_raw_transactiondto));
            } else {
                $httpBody = $sign_raw_transactiondto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
