// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateRawTransactiondtoV3
    /// </summary>
    public partial class CreateRawTransactiondtoV3 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRawTransactiondtoV3" /> class.
        /// </summary>
        /// <param name="senderAddress">senderAddress</param>
        /// <param name="serviceFeeAddress">serviceFeeAddress</param>
        /// <param name="recipientAddress">recipientAddress</param>
        /// <param name="serviceFeeAmount">serviceFeeAmount</param>
        /// <param name="amount">amount</param>
        [JsonConstructor]
        public CreateRawTransactiondtoV3(string senderAddress, string serviceFeeAddress, string recipientAddress, float serviceFeeAmount, float amount)
        {
            SenderAddress = senderAddress;
            ServiceFeeAddress = serviceFeeAddress;
            RecipientAddress = recipientAddress;
            ServiceFeeAmount = serviceFeeAmount;
            Amount = amount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SenderAddress
        /// </summary>
        [JsonPropertyName("senderAddress")]
        public string SenderAddress { get; set; }

        /// <summary>
        /// Gets or Sets ServiceFeeAddress
        /// </summary>
        [JsonPropertyName("serviceFeeAddress")]
        public string ServiceFeeAddress { get; set; }

        /// <summary>
        /// Gets or Sets RecipientAddress
        /// </summary>
        [JsonPropertyName("recipientAddress")]
        public string RecipientAddress { get; set; }

        /// <summary>
        /// Gets or Sets ServiceFeeAmount
        /// </summary>
        [JsonPropertyName("serviceFeeAmount")]
        public float ServiceFeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public float Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateRawTransactiondtoV3 {\n");
            sb.Append("  SenderAddress: ").Append(SenderAddress).Append("\n");
            sb.Append("  ServiceFeeAddress: ").Append(ServiceFeeAddress).Append("\n");
            sb.Append("  RecipientAddress: ").Append(RecipientAddress).Append("\n");
            sb.Append("  ServiceFeeAmount: ").Append(ServiceFeeAmount).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SenderAddress (string) minLength
            if (this.SenderAddress != null && this.SenderAddress.Length < 1)
            {
                yield return new ValidationResult("Invalid value for SenderAddress, length must be greater than 1.", new [] { "SenderAddress" });
            }

            // ServiceFeeAddress (string) minLength
            if (this.ServiceFeeAddress != null && this.ServiceFeeAddress.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ServiceFeeAddress, length must be greater than 1.", new [] { "ServiceFeeAddress" });
            }

            // RecipientAddress (string) minLength
            if (this.RecipientAddress != null && this.RecipientAddress.Length < 1)
            {
                yield return new ValidationResult("Invalid value for RecipientAddress, length must be greater than 1.", new [] { "RecipientAddress" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateRawTransactiondtoV3" />
    /// </summary>
    public class CreateRawTransactiondtoV3JsonConverter : JsonConverter<CreateRawTransactiondtoV3>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateRawTransactiondtoV3" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateRawTransactiondtoV3 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> senderAddress = default;
            Option<string?> serviceFeeAddress = default;
            Option<string?> recipientAddress = default;
            Option<float?> serviceFeeAmount = default;
            Option<float?> amount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "senderAddress":
                            senderAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "serviceFeeAddress":
                            serviceFeeAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "recipientAddress":
                            recipientAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "serviceFeeAmount":
                            serviceFeeAmount = new Option<float?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (float?)null : (float)utf8JsonReader.GetDouble());
                            break;
                        case "amount":
                            amount = new Option<float?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (float?)null : (float)utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!senderAddress.IsSet)
                throw new ArgumentException("Property is required for class CreateRawTransactiondtoV3.", nameof(senderAddress));

            if (!serviceFeeAddress.IsSet)
                throw new ArgumentException("Property is required for class CreateRawTransactiondtoV3.", nameof(serviceFeeAddress));

            if (!recipientAddress.IsSet)
                throw new ArgumentException("Property is required for class CreateRawTransactiondtoV3.", nameof(recipientAddress));

            if (!serviceFeeAmount.IsSet)
                throw new ArgumentException("Property is required for class CreateRawTransactiondtoV3.", nameof(serviceFeeAmount));

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class CreateRawTransactiondtoV3.", nameof(amount));

            if (senderAddress.IsSet && senderAddress.Value == null)
                throw new ArgumentNullException(nameof(senderAddress), "Property is not nullable for class CreateRawTransactiondtoV3.");

            if (serviceFeeAddress.IsSet && serviceFeeAddress.Value == null)
                throw new ArgumentNullException(nameof(serviceFeeAddress), "Property is not nullable for class CreateRawTransactiondtoV3.");

            if (recipientAddress.IsSet && recipientAddress.Value == null)
                throw new ArgumentNullException(nameof(recipientAddress), "Property is not nullable for class CreateRawTransactiondtoV3.");

            if (serviceFeeAmount.IsSet && serviceFeeAmount.Value == null)
                throw new ArgumentNullException(nameof(serviceFeeAmount), "Property is not nullable for class CreateRawTransactiondtoV3.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class CreateRawTransactiondtoV3.");

            return new CreateRawTransactiondtoV3(senderAddress.Value!, serviceFeeAddress.Value!, recipientAddress.Value!, serviceFeeAmount.Value!.Value!, amount.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CreateRawTransactiondtoV3" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createRawTransactiondtoV3"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateRawTransactiondtoV3 createRawTransactiondtoV3, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createRawTransactiondtoV3, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateRawTransactiondtoV3" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createRawTransactiondtoV3"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateRawTransactiondtoV3 createRawTransactiondtoV3, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createRawTransactiondtoV3.SenderAddress == null)
                throw new ArgumentNullException(nameof(createRawTransactiondtoV3.SenderAddress), "Property is required for class CreateRawTransactiondtoV3.");

            if (createRawTransactiondtoV3.ServiceFeeAddress == null)
                throw new ArgumentNullException(nameof(createRawTransactiondtoV3.ServiceFeeAddress), "Property is required for class CreateRawTransactiondtoV3.");

            if (createRawTransactiondtoV3.RecipientAddress == null)
                throw new ArgumentNullException(nameof(createRawTransactiondtoV3.RecipientAddress), "Property is required for class CreateRawTransactiondtoV3.");

            writer.WriteString("senderAddress", createRawTransactiondtoV3.SenderAddress);

            writer.WriteString("serviceFeeAddress", createRawTransactiondtoV3.ServiceFeeAddress);

            writer.WriteString("recipientAddress", createRawTransactiondtoV3.RecipientAddress);

            writer.WriteNumber("serviceFeeAmount", createRawTransactiondtoV3.ServiceFeeAmount);

            writer.WriteNumber("amount", createRawTransactiondtoV3.Amount);
        }
    }
}
