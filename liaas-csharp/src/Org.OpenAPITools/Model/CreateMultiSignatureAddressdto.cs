// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateMultiSignatureAddressdto
    /// </summary>
    public partial class CreateMultiSignatureAddressdto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMultiSignatureAddressdto" /> class.
        /// </summary>
        /// <param name="addresses">addresses (L addresses) to be given priviledge to sign a transaction seperated with a comma for example LTm0jfypM0....Yi, Lkfr5tt......Mn</param>
        /// <param name="nreqired">nreqired</param>
        /// <param name="addressType">addressType</param>
        [JsonConstructor]
        public CreateMultiSignatureAddressdto(string addresses, int nreqired, string addressType)
        {
            Addresses = addresses;
            Nreqired = nreqired;
            AddressType = addressType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// addresses (L addresses) to be given priviledge to sign a transaction seperated with a comma for example LTm0jfypM0....Yi, Lkfr5tt......Mn
        /// </summary>
        /// <value>addresses (L addresses) to be given priviledge to sign a transaction seperated with a comma for example LTm0jfypM0....Yi, Lkfr5tt......Mn</value>
        [JsonPropertyName("addresses")]
        public string Addresses { get; set; }

        /// <summary>
        /// Gets or Sets Nreqired
        /// </summary>
        [JsonPropertyName("nreqired")]
        public int Nreqired { get; set; }

        /// <summary>
        /// Gets or Sets AddressType
        /// </summary>
        [JsonPropertyName("address_type")]
        public string AddressType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateMultiSignatureAddressdto {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Nreqired: ").Append(Nreqired).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Addresses (string) minLength
            if (this.Addresses != null && this.Addresses.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Addresses, length must be greater than 1.", new [] { "Addresses" });
            }

            // AddressType (string) minLength
            if (this.AddressType != null && this.AddressType.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AddressType, length must be greater than 1.", new [] { "AddressType" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateMultiSignatureAddressdto" />
    /// </summary>
    public class CreateMultiSignatureAddressdtoJsonConverter : JsonConverter<CreateMultiSignatureAddressdto>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateMultiSignatureAddressdto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateMultiSignatureAddressdto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> addresses = default;
            Option<int?> nreqired = default;
            Option<string?> addressType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addresses":
                            addresses = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nreqired":
                            nreqired = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "address_type":
                            addressType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!addresses.IsSet)
                throw new ArgumentException("Property is required for class CreateMultiSignatureAddressdto.", nameof(addresses));

            if (!nreqired.IsSet)
                throw new ArgumentException("Property is required for class CreateMultiSignatureAddressdto.", nameof(nreqired));

            if (!addressType.IsSet)
                throw new ArgumentException("Property is required for class CreateMultiSignatureAddressdto.", nameof(addressType));

            if (addresses.IsSet && addresses.Value == null)
                throw new ArgumentNullException(nameof(addresses), "Property is not nullable for class CreateMultiSignatureAddressdto.");

            if (nreqired.IsSet && nreqired.Value == null)
                throw new ArgumentNullException(nameof(nreqired), "Property is not nullable for class CreateMultiSignatureAddressdto.");

            if (addressType.IsSet && addressType.Value == null)
                throw new ArgumentNullException(nameof(addressType), "Property is not nullable for class CreateMultiSignatureAddressdto.");

            return new CreateMultiSignatureAddressdto(addresses.Value!, nreqired.Value!.Value!, addressType.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CreateMultiSignatureAddressdto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createMultiSignatureAddressdto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateMultiSignatureAddressdto createMultiSignatureAddressdto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createMultiSignatureAddressdto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateMultiSignatureAddressdto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createMultiSignatureAddressdto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateMultiSignatureAddressdto createMultiSignatureAddressdto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createMultiSignatureAddressdto.Addresses == null)
                throw new ArgumentNullException(nameof(createMultiSignatureAddressdto.Addresses), "Property is required for class CreateMultiSignatureAddressdto.");

            if (createMultiSignatureAddressdto.AddressType == null)
                throw new ArgumentNullException(nameof(createMultiSignatureAddressdto.AddressType), "Property is required for class CreateMultiSignatureAddressdto.");

            writer.WriteString("addresses", createMultiSignatureAddressdto.Addresses);

            writer.WriteNumber("nreqired", createMultiSignatureAddressdto.Nreqired);

            writer.WriteString("address_type", createMultiSignatureAddressdto.AddressType);
        }
    }
}
