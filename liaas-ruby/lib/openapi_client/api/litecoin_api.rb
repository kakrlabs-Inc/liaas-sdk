=begin
#KakrLabs-SDK-Creator

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module OpenapiClient
  class LitecoinApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Litecoin UTXO details - returns the details of a UTXO using the transaction id and vout index
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :txid 
    # @option opts [Integer] :vout_n 
    # @return [nil]
    def api_litecoin_get_utxo_details_get(opts = {})
      api_litecoin_get_utxo_details_get_with_http_info(opts)
      nil
    end

    # Litecoin UTXO details - returns the details of a UTXO using the transaction id and vout index
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :txid 
    # @option opts [Integer] :vout_n 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_litecoin_get_utxo_details_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LitecoinApi.api_litecoin_get_utxo_details_get ...'
      end
      # resource path
      local_var_path = '/api/Litecoin/get-utxo-details'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'txid'] = opts[:'txid'] if !opts[:'txid'].nil?
      query_params[:'vout_n'] = opts[:'vout_n'] if !opts[:'vout_n'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"LitecoinApi.api_litecoin_get_utxo_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LitecoinApi#api_litecoin_get_utxo_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Litecoin transaction details - returns the full details of a transaction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :txid 
    # @return [nil]
    def api_litecoin_transaction_details_get(opts = {})
      api_litecoin_transaction_details_get_with_http_info(opts)
      nil
    end

    # Litecoin transaction details - returns the full details of a transaction id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :txid 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_litecoin_transaction_details_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LitecoinApi.api_litecoin_transaction_details_get ...'
      end
      # resource path
      local_var_path = '/api/Litecoin/transaction-details'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'txid'] = opts[:'txid'] if !opts[:'txid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"LitecoinApi.api_litecoin_transaction_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LitecoinApi#api_litecoin_transaction_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
