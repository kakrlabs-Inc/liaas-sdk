/*
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChangePassphrasedto;
import org.openapitools.client.model.CreateWalletRequest;
import org.openapitools.client.model.EncryptWalletDto;
import org.openapitools.client.model.ImportWalletdto;
import org.openapitools.client.model.SetWalletMnemonicsdto;
import org.openapitools.client.model.SignMessageUsingWalletdto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WalletApi
 */
@Disabled
public class WalletApiTest {

    private final WalletApi api = new WalletApi();

    /**
     * Get all addresses of a wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletAddressesGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        api.apiWalletAddressesGet(nodeUrlOrApiAccessKey, walletName);
        // TODO: test validations
    }

    /**
     * Get the balance of a wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletBalanceGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        api.apiWalletBalanceGet(nodeUrlOrApiAccessKey, walletName);
        // TODO: test validations
    }

    /**
     * Change the passphrase of a wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletChangePassphrasePostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        ChangePassphrasedto changePassphrasedto = null;
        api.apiWalletChangePassphrasePost(nodeUrlOrApiAccessKey, changePassphrasedto);
        // TODO: test validations
    }

    /**
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletCreateEncryptedWalletPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        CreateWalletRequest createWalletRequest = null;
        api.apiWalletCreateEncryptedWalletPost(nodeUrlOrApiAccessKey, createWalletRequest);
        // TODO: test validations
    }

    /**
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletCreateImportableEncryptedWalletPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        CreateWalletRequest createWalletRequest = null;
        api.apiWalletCreateImportableEncryptedWalletPost(nodeUrlOrApiAccessKey, createWalletRequest);
        // TODO: test validations
    }

    /**
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletCreateImportableWalletPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        CreateWalletRequest createWalletRequest = null;
        api.apiWalletCreateImportableWalletPost(nodeUrlOrApiAccessKey, createWalletRequest);
        // TODO: test validations
    }

    /**
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletCreatePostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        CreateWalletRequest createWalletRequest = null;
        api.apiWalletCreatePost(nodeUrlOrApiAccessKey, createWalletRequest);
        // TODO: test validations
    }

    /**
     * Get the details of a wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletDetailsGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        api.apiWalletDetailsGet(nodeUrlOrApiAccessKey, walletName);
        // TODO: test validations
    }

    /**
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletEncryptWalletPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        EncryptWalletDto encryptWalletDto = null;
        api.apiWalletEncryptWalletPost(nodeUrlOrApiAccessKey, walletName, encryptWalletDto);
        // TODO: test validations
    }

    /**
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletImportWalletPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        ImportWalletdto importWalletdto = null;
        api.apiWalletImportWalletPost(nodeUrlOrApiAccessKey, importWalletdto);
        // TODO: test validations
    }

    /**
     * Get the official address of a wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletOfficialAddressGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        api.apiWalletOfficialAddressGet(nodeUrlOrApiAccessKey, walletName);
        // TODO: test validations
    }

    /**
     * Set the mnemonics of a wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletSetWalletMnemonicsPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        String encryptedPassphrase = null;
        SetWalletMnemonicsdto setWalletMnemonicsdto = null;
        api.apiWalletSetWalletMnemonicsPost(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto);
        // TODO: test validations
    }

    /**
     * Sign a message using the wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletSignWalletMessagePostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        SignMessageUsingWalletdto signMessageUsingWalletdto = null;
        api.apiWalletSignWalletMessagePost(nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto);
        // TODO: test validations
    }

    /**
     * Get the transactions of a wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletTransactionsGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        Integer skip = null;
        Integer count = null;
        api.apiWalletTransactionsGet(nodeUrlOrApiAccessKey, walletName, skip, count);
        // TODO: test validations
    }

    /**
     * Get the balance of a specific address in a wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletWalletAddressBalanceGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        String address = null;
        api.apiWalletWalletAddressBalanceGet(nodeUrlOrApiAccessKey, walletName, address);
        // TODO: test validations
    }

    /**
     * Get the transactions of a specific address in a wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletWalletAddressTransactionsGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        String address = null;
        api.apiWalletWalletAddressTransactionsGet(nodeUrlOrApiAccessKey, walletName, address);
        // TODO: test validations
    }

    /**
     * default addresss of a wallet without private key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletWalletDefaultAddressGetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String mnemonics = null;
        Integer addressType = null;
        api.apiWalletWalletDefaultAddressGet(nodeUrlOrApiAccessKey, mnemonics, addressType);
        // TODO: test validations
    }

    /**
     * default addresss of a wallet with private key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletWalletDefaultAddressV2GetTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String mnemonics = null;
        Integer addressType = null;
        api.apiWalletWalletDefaultAddressV2Get(nodeUrlOrApiAccessKey, mnemonics, addressType);
        // TODO: test validations
    }

}
