=begin
#KakrLabs-SDK-Creator

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module OpenapiClient
  class UtilitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets OTP using the blockchain information using the signature of a signed message.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :signature 
    # @return [nil]
    def api_utilities_get_blockchain_otp_get(opts = {})
      api_utilities_get_blockchain_otp_get_with_http_info(opts)
      nil
    end

    # Gets OTP using the blockchain information using the signature of a signed message.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :signature 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_utilities_get_blockchain_otp_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilitiesApi.api_utilities_get_blockchain_otp_get ...'
      end
      # resource path
      local_var_path = '/api/Utilities/get-blockchain-otp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'signature'] = opts[:'signature'] if !opts[:'signature'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UtilitiesApi.api_utilities_get_blockchain_otp_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#api_utilities_get_blockchain_otp_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verifies the OTP on the blockchain.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [VerifyOTPdto] :verify_ot_pdto 
    # @return [nil]
    def api_utilities_verify_otp_post(opts = {})
      api_utilities_verify_otp_post_with_http_info(opts)
      nil
    end

    # Verifies the OTP on the blockchain.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [VerifyOTPdto] :verify_ot_pdto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_utilities_verify_otp_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilitiesApi.api_utilities_verify_otp_post ...'
      end
      # resource path
      local_var_path = '/api/Utilities/verify-otp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'verify_ot_pdto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UtilitiesApi.api_utilities_verify_otp_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#api_utilities_verify_otp_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
