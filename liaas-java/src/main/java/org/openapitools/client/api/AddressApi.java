/*
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateAddressdto;
import org.openapitools.client.model.CreateMultiSignatureAddressdto;
import org.openapitools.client.model.GenerateDefaultAddressdto;
import org.openapitools.client.model.SignMessagedto;
import org.openapitools.client.model.VerifyMessagedto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddressApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiAddressAddressBalanceGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param address  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressAddressBalanceGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Address/address-balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressAddressBalanceGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        return apiAddressAddressBalanceGetCall(nodeUrlOrApiAccessKey, address, _callback);

    }

    /**
     * address balance - returns the confirmed and unconfirmed balance
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param address  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressAddressBalanceGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String address) throws ApiException {
        apiAddressAddressBalanceGetWithHttpInfo(nodeUrlOrApiAccessKey, address);
    }

    /**
     * address balance - returns the confirmed and unconfirmed balance
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param address  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressAddressBalanceGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String address) throws ApiException {
        okhttp3.Call localVarCall = apiAddressAddressBalanceGetValidateBeforeCall(nodeUrlOrApiAccessKey, address, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * address balance - returns the confirmed and unconfirmed balance (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param address  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressAddressBalanceGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String address, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressAddressBalanceGetValidateBeforeCall(nodeUrlOrApiAccessKey, address, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAddressAddressDetailsGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressAddressDetailsGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Address/address-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressAddressDetailsGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        return apiAddressAddressDetailsGetCall(nodeUrlOrApiAccessKey, walletName, address, _callback);

    }

    /**
     * Get address details. all address details are returned.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressAddressDetailsGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address) throws ApiException {
        apiAddressAddressDetailsGetWithHttpInfo(nodeUrlOrApiAccessKey, walletName, address);
    }

    /**
     * Get address details. all address details are returned.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressAddressDetailsGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address) throws ApiException {
        okhttp3.Call localVarCall = apiAddressAddressDetailsGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, address, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get address details. all address details are returned. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressAddressDetailsGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressAddressDetailsGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, address, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAddressAddressPrivateKeyGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param encryptedPassphrase  (optional)
     * @param address  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressAddressPrivateKeyGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Address/address-private-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (wallet != null) {
            localVarHeaderParams.put("wallet", localVarApiClient.parameterToString(wallet));
        }


        if (encryptedPassphrase != null) {
            localVarHeaderParams.put("encryptedPassphrase", localVarApiClient.parameterToString(encryptedPassphrase));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressAddressPrivateKeyGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        return apiAddressAddressPrivateKeyGetCall(nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address, _callback);

    }

    /**
     * Get the address private key using encrypted passphrase
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param encryptedPassphrase  (optional)
     * @param address  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressAddressPrivateKeyGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable String address) throws ApiException {
        apiAddressAddressPrivateKeyGetWithHttpInfo(nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address);
    }

    /**
     * Get the address private key using encrypted passphrase
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param encryptedPassphrase  (optional)
     * @param address  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressAddressPrivateKeyGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable String address) throws ApiException {
        okhttp3.Call localVarCall = apiAddressAddressPrivateKeyGetValidateBeforeCall(nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the address private key using encrypted passphrase (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param encryptedPassphrase  (optional)
     * @param address  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressAddressPrivateKeyGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable String address, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressAddressPrivateKeyGetValidateBeforeCall(nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAddressAddressPrivateKeyV2Get
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param mnemonics  (optional)
     * @param address  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressAddressPrivateKeyV2GetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Address/address-private-key-v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (wallet != null) {
            localVarHeaderParams.put("wallet", localVarApiClient.parameterToString(wallet));
        }


        if (mnemonics != null) {
            localVarHeaderParams.put("mnemonics", localVarApiClient.parameterToString(mnemonics));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressAddressPrivateKeyV2GetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        return apiAddressAddressPrivateKeyV2GetCall(nodeUrlOrApiAccessKey, wallet, mnemonics, address, _callback);

    }

    /**
     * Get the address private key using mnemonics
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param mnemonics  (optional)
     * @param address  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressAddressPrivateKeyV2Get(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable String address) throws ApiException {
        apiAddressAddressPrivateKeyV2GetWithHttpInfo(nodeUrlOrApiAccessKey, wallet, mnemonics, address);
    }

    /**
     * Get the address private key using mnemonics
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param mnemonics  (optional)
     * @param address  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressAddressPrivateKeyV2GetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable String address) throws ApiException {
        okhttp3.Call localVarCall = apiAddressAddressPrivateKeyV2GetValidateBeforeCall(nodeUrlOrApiAccessKey, wallet, mnemonics, address, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the address private key using mnemonics (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param mnemonics  (optional)
     * @param address  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressAddressPrivateKeyV2GetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable String address, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressAddressPrivateKeyV2GetValidateBeforeCall(nodeUrlOrApiAccessKey, wallet, mnemonics, address, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAddressAddressTransactionGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param address  (optional)
     * @param take  (optional, default to 10)
     * @param skip  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressAddressTransactionGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String address, @javax.annotation.Nullable Integer take, @javax.annotation.Nullable Integer skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Address/address-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressAddressTransactionGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String address, @javax.annotation.Nullable Integer take, @javax.annotation.Nullable Integer skip, final ApiCallback _callback) throws ApiException {
        return apiAddressAddressTransactionGetCall(nodeUrlOrApiAccessKey, address, take, skip, _callback);

    }

    /**
     * retruns all transactions of an address without wallet
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param address  (optional)
     * @param take  (optional, default to 10)
     * @param skip  (optional, default to 0)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressAddressTransactionGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String address, @javax.annotation.Nullable Integer take, @javax.annotation.Nullable Integer skip) throws ApiException {
        apiAddressAddressTransactionGetWithHttpInfo(nodeUrlOrApiAccessKey, address, take, skip);
    }

    /**
     * retruns all transactions of an address without wallet
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param address  (optional)
     * @param take  (optional, default to 10)
     * @param skip  (optional, default to 0)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressAddressTransactionGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String address, @javax.annotation.Nullable Integer take, @javax.annotation.Nullable Integer skip) throws ApiException {
        okhttp3.Call localVarCall = apiAddressAddressTransactionGetValidateBeforeCall(nodeUrlOrApiAccessKey, address, take, skip, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * retruns all transactions of an address without wallet (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param address  (optional)
     * @param take  (optional, default to 10)
     * @param skip  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressAddressTransactionGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String address, @javax.annotation.Nullable Integer take, @javax.annotation.Nullable Integer skip, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressAddressTransactionGetValidateBeforeCall(nodeUrlOrApiAccessKey, address, take, skip, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAddressCreateMutiSigAddressPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param createMultiSignatureAddressdto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressCreateMutiSigAddressPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable CreateMultiSignatureAddressdto createMultiSignatureAddressdto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMultiSignatureAddressdto;

        // create path and map variables
        String localVarPath = "/api/Address/create-muti-sig-address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        if (encryptedPassphrase != null) {
            localVarHeaderParams.put("encryptedPassphrase", localVarApiClient.parameterToString(encryptedPassphrase));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressCreateMutiSigAddressPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable CreateMultiSignatureAddressdto createMultiSignatureAddressdto, final ApiCallback _callback) throws ApiException {
        return apiAddressCreateMutiSigAddressPostCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto, _callback);

    }

    /**
     * Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param createMultiSignatureAddressdto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressCreateMutiSigAddressPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable CreateMultiSignatureAddressdto createMultiSignatureAddressdto) throws ApiException {
        apiAddressCreateMutiSigAddressPostWithHttpInfo(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto);
    }

    /**
     * Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param createMultiSignatureAddressdto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressCreateMutiSigAddressPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable CreateMultiSignatureAddressdto createMultiSignatureAddressdto) throws ApiException {
        okhttp3.Call localVarCall = apiAddressCreateMutiSigAddressPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param createMultiSignatureAddressdto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressCreateMutiSigAddressPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable CreateMultiSignatureAddressdto createMultiSignatureAddressdto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressCreateMutiSigAddressPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAddressCreatePost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param createAddressdto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressCreatePostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable CreateAddressdto createAddressdto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAddressdto;

        // create path and map variables
        String localVarPath = "/api/Address/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        if (encryptedPassphrase != null) {
            localVarHeaderParams.put("encryptedPassphrase", localVarApiClient.parameterToString(encryptedPassphrase));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressCreatePostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable CreateAddressdto createAddressdto, final ApiCallback _callback) throws ApiException {
        return apiAddressCreatePostCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto, _callback);

    }

    /**
     * Create a new address in a particular wallet
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param createAddressdto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressCreatePost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable CreateAddressdto createAddressdto) throws ApiException {
        apiAddressCreatePostWithHttpInfo(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto);
    }

    /**
     * Create a new address in a particular wallet
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param createAddressdto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressCreatePostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable CreateAddressdto createAddressdto) throws ApiException {
        okhttp3.Call localVarCall = apiAddressCreatePostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new address in a particular wallet (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param createAddressdto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressCreatePostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable CreateAddressdto createAddressdto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressCreatePostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAddressGenerateDefaultAddressPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param generateDefaultAddressdto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressGenerateDefaultAddressPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable GenerateDefaultAddressdto generateDefaultAddressdto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateDefaultAddressdto;

        // create path and map variables
        String localVarPath = "/api/Address/generate-default-address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        if (encryptedPassphrase != null) {
            localVarHeaderParams.put("encryptedPassphrase", localVarApiClient.parameterToString(encryptedPassphrase));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressGenerateDefaultAddressPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable GenerateDefaultAddressdto generateDefaultAddressdto, final ApiCallback _callback) throws ApiException {
        return apiAddressGenerateDefaultAddressPostCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto, _callback);

    }

    /**
     * Generate a default address for a wallet. This address can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param generateDefaultAddressdto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressGenerateDefaultAddressPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable GenerateDefaultAddressdto generateDefaultAddressdto) throws ApiException {
        apiAddressGenerateDefaultAddressPostWithHttpInfo(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto);
    }

    /**
     * Generate a default address for a wallet. This address can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param generateDefaultAddressdto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressGenerateDefaultAddressPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable GenerateDefaultAddressdto generateDefaultAddressdto) throws ApiException {
        okhttp3.Call localVarCall = apiAddressGenerateDefaultAddressPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate a default address for a wallet. This address can be imported to other wallets. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param generateDefaultAddressdto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressGenerateDefaultAddressPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable GenerateDefaultAddressdto generateDefaultAddressdto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressGenerateDefaultAddressPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAddressScreenAddressGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param mnemonics  (optional)
     * @param address  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressScreenAddressGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Address/screen-address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (wallet != null) {
            localVarHeaderParams.put("wallet", localVarApiClient.parameterToString(wallet));
        }


        if (mnemonics != null) {
            localVarHeaderParams.put("mnemonics", localVarApiClient.parameterToString(mnemonics));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressScreenAddressGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        return apiAddressScreenAddressGetCall(nodeUrlOrApiAccessKey, wallet, mnemonics, address, _callback);

    }

    /**
     * Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param mnemonics  (optional)
     * @param address  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressScreenAddressGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable String address) throws ApiException {
        apiAddressScreenAddressGetWithHttpInfo(nodeUrlOrApiAccessKey, wallet, mnemonics, address);
    }

    /**
     * Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param mnemonics  (optional)
     * @param address  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressScreenAddressGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable String address) throws ApiException {
        okhttp3.Call localVarCall = apiAddressScreenAddressGetValidateBeforeCall(nodeUrlOrApiAccessKey, wallet, mnemonics, address, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param wallet  (optional)
     * @param mnemonics  (optional)
     * @param address  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressScreenAddressGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String wallet, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable String address, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressScreenAddressGetValidateBeforeCall(nodeUrlOrApiAccessKey, wallet, mnemonics, address, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAddressSignMessagePost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param signMessagedto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressSignMessagePostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable SignMessagedto signMessagedto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signMessagedto;

        // create path and map variables
        String localVarPath = "/api/Address/sign-message";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressSignMessagePostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable SignMessagedto signMessagedto, final ApiCallback _callback) throws ApiException {
        return apiAddressSignMessagePostCall(nodeUrlOrApiAccessKey, signMessagedto, _callback);

    }

    /**
     * sign a message with address private key
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param signMessagedto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressSignMessagePost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable SignMessagedto signMessagedto) throws ApiException {
        apiAddressSignMessagePostWithHttpInfo(nodeUrlOrApiAccessKey, signMessagedto);
    }

    /**
     * sign a message with address private key
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param signMessagedto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressSignMessagePostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable SignMessagedto signMessagedto) throws ApiException {
        okhttp3.Call localVarCall = apiAddressSignMessagePostValidateBeforeCall(nodeUrlOrApiAccessKey, signMessagedto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * sign a message with address private key (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param signMessagedto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressSignMessagePostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable SignMessagedto signMessagedto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressSignMessagePostValidateBeforeCall(nodeUrlOrApiAccessKey, signMessagedto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiAddressVerifyMessagePost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param verifyMessagedto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressVerifyMessagePostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable VerifyMessagedto verifyMessagedto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyMessagedto;

        // create path and map variables
        String localVarPath = "/api/Address/verify-message";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiAddressVerifyMessagePostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable VerifyMessagedto verifyMessagedto, final ApiCallback _callback) throws ApiException {
        return apiAddressVerifyMessagePostCall(nodeUrlOrApiAccessKey, verifyMessagedto, _callback);

    }

    /**
     * verify signed message
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param verifyMessagedto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiAddressVerifyMessagePost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable VerifyMessagedto verifyMessagedto) throws ApiException {
        apiAddressVerifyMessagePostWithHttpInfo(nodeUrlOrApiAccessKey, verifyMessagedto);
    }

    /**
     * verify signed message
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param verifyMessagedto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiAddressVerifyMessagePostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable VerifyMessagedto verifyMessagedto) throws ApiException {
        okhttp3.Call localVarCall = apiAddressVerifyMessagePostValidateBeforeCall(nodeUrlOrApiAccessKey, verifyMessagedto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * verify signed message (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param verifyMessagedto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiAddressVerifyMessagePostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable VerifyMessagedto verifyMessagedto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiAddressVerifyMessagePostValidateBeforeCall(nodeUrlOrApiAccessKey, verifyMessagedto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
