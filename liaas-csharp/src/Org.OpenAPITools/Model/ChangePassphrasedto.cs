// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChangePassphrasedto
    /// </summary>
    public partial class ChangePassphrasedto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePassphrasedto" /> class.
        /// </summary>
        /// <param name="wallet">wallet</param>
        /// <param name="oldPassphrase">oldPassphrase</param>
        /// <param name="newPassphrase">newPassphrase</param>
        [JsonConstructor]
        public ChangePassphrasedto(string wallet, string oldPassphrase, string newPassphrase)
        {
            Wallet = wallet;
            OldPassphrase = oldPassphrase;
            NewPassphrase = newPassphrase;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Wallet
        /// </summary>
        [JsonPropertyName("wallet")]
        public string Wallet { get; set; }

        /// <summary>
        /// Gets or Sets OldPassphrase
        /// </summary>
        [JsonPropertyName("old_passphrase")]
        public string OldPassphrase { get; set; }

        /// <summary>
        /// Gets or Sets NewPassphrase
        /// </summary>
        [JsonPropertyName("new_passphrase")]
        public string NewPassphrase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangePassphrasedto {\n");
            sb.Append("  Wallet: ").Append(Wallet).Append("\n");
            sb.Append("  OldPassphrase: ").Append(OldPassphrase).Append("\n");
            sb.Append("  NewPassphrase: ").Append(NewPassphrase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Wallet (string) minLength
            if (this.Wallet != null && this.Wallet.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Wallet, length must be greater than 1.", new [] { "Wallet" });
            }

            // OldPassphrase (string) minLength
            if (this.OldPassphrase != null && this.OldPassphrase.Length < 1)
            {
                yield return new ValidationResult("Invalid value for OldPassphrase, length must be greater than 1.", new [] { "OldPassphrase" });
            }

            // NewPassphrase (string) minLength
            if (this.NewPassphrase != null && this.NewPassphrase.Length < 1)
            {
                yield return new ValidationResult("Invalid value for NewPassphrase, length must be greater than 1.", new [] { "NewPassphrase" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChangePassphrasedto" />
    /// </summary>
    public class ChangePassphrasedtoJsonConverter : JsonConverter<ChangePassphrasedto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChangePassphrasedto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChangePassphrasedto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> wallet = default;
            Option<string?> oldPassphrase = default;
            Option<string?> newPassphrase = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "wallet":
                            wallet = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "old_passphrase":
                            oldPassphrase = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "new_passphrase":
                            newPassphrase = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!wallet.IsSet)
                throw new ArgumentException("Property is required for class ChangePassphrasedto.", nameof(wallet));

            if (!oldPassphrase.IsSet)
                throw new ArgumentException("Property is required for class ChangePassphrasedto.", nameof(oldPassphrase));

            if (!newPassphrase.IsSet)
                throw new ArgumentException("Property is required for class ChangePassphrasedto.", nameof(newPassphrase));

            if (wallet.IsSet && wallet.Value == null)
                throw new ArgumentNullException(nameof(wallet), "Property is not nullable for class ChangePassphrasedto.");

            if (oldPassphrase.IsSet && oldPassphrase.Value == null)
                throw new ArgumentNullException(nameof(oldPassphrase), "Property is not nullable for class ChangePassphrasedto.");

            if (newPassphrase.IsSet && newPassphrase.Value == null)
                throw new ArgumentNullException(nameof(newPassphrase), "Property is not nullable for class ChangePassphrasedto.");

            return new ChangePassphrasedto(wallet.Value!, oldPassphrase.Value!, newPassphrase.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChangePassphrasedto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="changePassphrasedto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChangePassphrasedto changePassphrasedto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, changePassphrasedto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChangePassphrasedto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="changePassphrasedto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChangePassphrasedto changePassphrasedto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (changePassphrasedto.Wallet == null)
                throw new ArgumentNullException(nameof(changePassphrasedto.Wallet), "Property is required for class ChangePassphrasedto.");

            if (changePassphrasedto.OldPassphrase == null)
                throw new ArgumentNullException(nameof(changePassphrasedto.OldPassphrase), "Property is required for class ChangePassphrasedto.");

            if (changePassphrasedto.NewPassphrase == null)
                throw new ArgumentNullException(nameof(changePassphrasedto.NewPassphrase), "Property is required for class ChangePassphrasedto.");

            writer.WriteString("wallet", changePassphrasedto.Wallet);

            writer.WriteString("old_passphrase", changePassphrasedto.OldPassphrase);

            writer.WriteString("new_passphrase", changePassphrasedto.NewPassphrase);
        }
    }
}
