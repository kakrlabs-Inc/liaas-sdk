/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`api_litecoin_get_utxo_details_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLitecoinGetUtxoDetailsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_litecoin_transaction_details_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLitecoinTransactionDetailsGetError {
    UnknownValue(serde_json::Value),
}


pub async fn api_litecoin_get_utxo_details_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, txid: Option<&str>, vout_n: Option<i32>) -> Result<(), Error<ApiLitecoinGetUtxoDetailsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_txid = txid;
    let p_vout_n = vout_n;

    let uri_str = format!("{}/api/Litecoin/get-utxo-details", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_txid {
        req_builder = req_builder.query(&[("txid", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_vout_n {
        req_builder = req_builder.query(&[("vout_n", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiLitecoinGetUtxoDetailsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_litecoin_transaction_details_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, txid: Option<&str>) -> Result<(), Error<ApiLitecoinTransactionDetailsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_txid = txid;

    let uri_str = format!("{}/api/Litecoin/transaction-details", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_txid {
        req_builder = req_builder.query(&[("txid", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiLitecoinTransactionDetailsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

