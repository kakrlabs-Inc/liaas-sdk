/*
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BroadcastTransactiondto;
import org.openapitools.client.model.CreateRawTransactiondto;
import org.openapitools.client.model.CreateRawTransactiondtoV2;
import org.openapitools.client.model.CreateRawTransactiondtoV3;
import org.openapitools.client.model.SendFromWalletdto;
import org.openapitools.client.model.SignRawTransactiondto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * broadcast transaction on the Litecoin blockchain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsBroadcastTransactionPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        BroadcastTransactiondto broadcastTransactiondto = null;
        api.apiTransactionsBroadcastTransactionPost(nodeUrlOrApiAccessKey, broadcastTransactiondto);
        // TODO: test validations
    }

    /**
     * create raw transaction - returns the transaction hash
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsCreateRawTransactionPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        CreateRawTransactiondto createRawTransactiondto = null;
        api.apiTransactionsCreateRawTransactionPost(nodeUrlOrApiAccessKey, walletName, createRawTransactiondto);
        // TODO: test validations
    }

    /**
     * create raw transaction with the address UTXOs - returns the transaction hash
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsCreateRawTransactionV2PostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        CreateRawTransactiondtoV2 createRawTransactiondtoV2 = null;
        api.apiTransactionsCreateRawTransactionV2Post(nodeUrlOrApiAccessKey, createRawTransactiondtoV2);
        // TODO: test validations
    }

    /**
     * create raw transaction with the service Fee address attached - returns the transaction hash
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsCreateRawTransactionV3PostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        CreateRawTransactiondtoV3 createRawTransactiondtoV3 = null;
        api.apiTransactionsCreateRawTransactionV3Post(nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3);
        // TODO: test validations
    }

    /**
     * Send a funds from one address to another using wallet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsSendFundsFromWalletPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        String encryptedPassphrase = null;
        SendFromWalletdto sendFromWalletdto = null;
        api.apiTransactionsSendFundsFromWalletPost(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto);
        // TODO: test validations
    }

    /**
     * sign a created raw transaction - returns the signed transaction hash
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsSignTransactionPostTest() throws ApiException {
        String nodeUrlOrApiAccessKey = null;
        String walletName = null;
        SignRawTransactiondto signRawTransactiondto = null;
        api.apiTransactionsSignTransactionPost(nodeUrlOrApiAccessKey, walletName, signRawTransactiondto);
        // TODO: test validations
    }

}
