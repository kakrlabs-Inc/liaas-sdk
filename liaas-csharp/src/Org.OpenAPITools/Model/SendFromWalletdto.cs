// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SendFromWalletdto
    /// </summary>
    public partial class SendFromWalletdto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendFromWalletdto" /> class.
        /// </summary>
        /// <param name="recipientAddress">recipientAddress</param>
        /// <param name="recipientName">recipientName</param>
        /// <param name="amount">amount</param>
        /// <param name="description">description</param>
        /// <param name="amountIncludeFees">amountIncludeFees</param>
        [JsonConstructor]
        public SendFromWalletdto(Option<string?> recipientAddress = default, Option<string?> recipientName = default, Option<double?> amount = default, Option<string?> description = default, Option<bool?> amountIncludeFees = default)
        {
            RecipientAddressOption = recipientAddress;
            RecipientNameOption = recipientName;
            AmountOption = amount;
            DescriptionOption = description;
            AmountIncludeFeesOption = amountIncludeFees;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RecipientAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecipientAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets RecipientAddress
        /// </summary>
        [JsonPropertyName("recipientAddress")]
        public string? RecipientAddress { get { return this.RecipientAddressOption; } set { this.RecipientAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecipientName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecipientNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets RecipientName
        /// </summary>
        [JsonPropertyName("recipientName")]
        public string? RecipientName { get { return this.RecipientNameOption; } set { this.RecipientNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public double? Amount { get { return this.AmountOption; } set { this.AmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of AmountIncludeFees
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AmountIncludeFeesOption { get; private set; }

        /// <summary>
        /// Gets or Sets AmountIncludeFees
        /// </summary>
        [JsonPropertyName("amountIncludeFees")]
        public bool? AmountIncludeFees { get { return this.AmountIncludeFeesOption; } set { this.AmountIncludeFeesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendFromWalletdto {\n");
            sb.Append("  RecipientAddress: ").Append(RecipientAddress).Append("\n");
            sb.Append("  RecipientName: ").Append(RecipientName).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AmountIncludeFees: ").Append(AmountIncludeFees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendFromWalletdto" />
    /// </summary>
    public class SendFromWalletdtoJsonConverter : JsonConverter<SendFromWalletdto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendFromWalletdto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendFromWalletdto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> recipientAddress = default;
            Option<string?> recipientName = default;
            Option<double?> amount = default;
            Option<string?> description = default;
            Option<bool?> amountIncludeFees = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "recipientAddress":
                            recipientAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "recipientName":
                            recipientName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "amount":
                            amount = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "amountIncludeFees":
                            amountIncludeFees = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class SendFromWalletdto.");

            if (amountIncludeFees.IsSet && amountIncludeFees.Value == null)
                throw new ArgumentNullException(nameof(amountIncludeFees), "Property is not nullable for class SendFromWalletdto.");

            return new SendFromWalletdto(recipientAddress, recipientName, amount, description, amountIncludeFees);
        }

        /// <summary>
        /// Serializes a <see cref="SendFromWalletdto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendFromWalletdto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendFromWalletdto sendFromWalletdto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendFromWalletdto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendFromWalletdto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendFromWalletdto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendFromWalletdto sendFromWalletdto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendFromWalletdto.RecipientAddressOption.IsSet)
                if (sendFromWalletdto.RecipientAddressOption.Value != null)
                    writer.WriteString("recipientAddress", sendFromWalletdto.RecipientAddress);
                else
                    writer.WriteNull("recipientAddress");

            if (sendFromWalletdto.RecipientNameOption.IsSet)
                if (sendFromWalletdto.RecipientNameOption.Value != null)
                    writer.WriteString("recipientName", sendFromWalletdto.RecipientName);
                else
                    writer.WriteNull("recipientName");

            if (sendFromWalletdto.AmountOption.IsSet)
                writer.WriteNumber("amount", sendFromWalletdto.AmountOption.Value!.Value);

            if (sendFromWalletdto.DescriptionOption.IsSet)
                if (sendFromWalletdto.DescriptionOption.Value != null)
                    writer.WriteString("description", sendFromWalletdto.Description);
                else
                    writer.WriteNull("description");

            if (sendFromWalletdto.AmountIncludeFeesOption.IsSet)
                writer.WriteBoolean("amountIncludeFees", sendFromWalletdto.AmountIncludeFeesOption.Value!.Value);
        }
    }
}
