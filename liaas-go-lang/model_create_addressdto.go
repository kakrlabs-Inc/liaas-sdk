/*
KakrLabs-SDK-Creator

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateAddressdto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAddressdto{}

// CreateAddressdto struct for CreateAddressdto
type CreateAddressdto struct {
	Label NullableString `json:"label,omitempty"`
	Type *int32 `json:"type,omitempty"`
}

// NewCreateAddressdto instantiates a new CreateAddressdto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAddressdto() *CreateAddressdto {
	this := CreateAddressdto{}
	return &this
}

// NewCreateAddressdtoWithDefaults instantiates a new CreateAddressdto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAddressdtoWithDefaults() *CreateAddressdto {
	this := CreateAddressdto{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAddressdto) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAddressdto) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *CreateAddressdto) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *CreateAddressdto) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *CreateAddressdto) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *CreateAddressdto) UnsetLabel() {
	o.Label.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateAddressdto) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAddressdto) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateAddressdto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *CreateAddressdto) SetType(v int32) {
	o.Type = &v
}

func (o CreateAddressdto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAddressdto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCreateAddressdto struct {
	value *CreateAddressdto
	isSet bool
}

func (v NullableCreateAddressdto) Get() *CreateAddressdto {
	return v.value
}

func (v *NullableCreateAddressdto) Set(val *CreateAddressdto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAddressdto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAddressdto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAddressdto(val *CreateAddressdto) *NullableCreateAddressdto {
	return &NullableCreateAddressdto{value: val, isSet: true}
}

func (v NullableCreateAddressdto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAddressdto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


