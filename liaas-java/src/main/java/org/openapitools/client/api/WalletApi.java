/*
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChangePassphrasedto;
import org.openapitools.client.model.CreateWalletRequest;
import org.openapitools.client.model.EncryptWalletDto;
import org.openapitools.client.model.ImportWalletdto;
import org.openapitools.client.model.SetWalletMnemonicsdto;
import org.openapitools.client.model.SignMessageUsingWalletdto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WalletApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WalletApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiWalletAddressesGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletAddressesGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Wallet/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletAddressesGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback _callback) throws ApiException {
        return apiWalletAddressesGetCall(nodeUrlOrApiAccessKey, walletName, _callback);

    }

    /**
     * Get all addresses of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletAddressesGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName) throws ApiException {
        apiWalletAddressesGetWithHttpInfo(nodeUrlOrApiAccessKey, walletName);
    }

    /**
     * Get all addresses of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletAddressesGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName) throws ApiException {
        okhttp3.Call localVarCall = apiWalletAddressesGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all addresses of a wallet. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletAddressesGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletAddressesGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletBalanceGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletBalanceGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Wallet/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletBalanceGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback _callback) throws ApiException {
        return apiWalletBalanceGetCall(nodeUrlOrApiAccessKey, walletName, _callback);

    }

    /**
     * Get the balance of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletBalanceGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName) throws ApiException {
        apiWalletBalanceGetWithHttpInfo(nodeUrlOrApiAccessKey, walletName);
    }

    /**
     * Get the balance of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletBalanceGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName) throws ApiException {
        okhttp3.Call localVarCall = apiWalletBalanceGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the balance of a wallet. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletBalanceGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletBalanceGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletChangePassphrasePost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param changePassphrasedto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletChangePassphrasePostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable ChangePassphrasedto changePassphrasedto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePassphrasedto;

        // create path and map variables
        String localVarPath = "/api/Wallet/change-passphrase";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletChangePassphrasePostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable ChangePassphrasedto changePassphrasedto, final ApiCallback _callback) throws ApiException {
        return apiWalletChangePassphrasePostCall(nodeUrlOrApiAccessKey, changePassphrasedto, _callback);

    }

    /**
     * Change the passphrase of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param changePassphrasedto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletChangePassphrasePost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable ChangePassphrasedto changePassphrasedto) throws ApiException {
        apiWalletChangePassphrasePostWithHttpInfo(nodeUrlOrApiAccessKey, changePassphrasedto);
    }

    /**
     * Change the passphrase of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param changePassphrasedto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletChangePassphrasePostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable ChangePassphrasedto changePassphrasedto) throws ApiException {
        okhttp3.Call localVarCall = apiWalletChangePassphrasePostValidateBeforeCall(nodeUrlOrApiAccessKey, changePassphrasedto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change the passphrase of a wallet. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param changePassphrasedto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletChangePassphrasePostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable ChangePassphrasedto changePassphrasedto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletChangePassphrasePostValidateBeforeCall(nodeUrlOrApiAccessKey, changePassphrasedto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletCreateEncryptedWalletPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletCreateEncryptedWalletPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWalletRequest;

        // create path and map variables
        String localVarPath = "/api/Wallet/create-encrypted-wallet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletCreateEncryptedWalletPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback _callback) throws ApiException {
        return apiWalletCreateEncryptedWalletPostCall(nodeUrlOrApiAccessKey, createWalletRequest, _callback);

    }

    /**
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletCreateEncryptedWalletPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest) throws ApiException {
        apiWalletCreateEncryptedWalletPostWithHttpInfo(nodeUrlOrApiAccessKey, createWalletRequest);
    }

    /**
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletCreateEncryptedWalletPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = apiWalletCreateEncryptedWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, createWalletRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletCreateEncryptedWalletPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletCreateEncryptedWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, createWalletRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletCreateImportableEncryptedWalletPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletCreateImportableEncryptedWalletPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWalletRequest;

        // create path and map variables
        String localVarPath = "/api/Wallet/create-importable-encrypted-wallet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletCreateImportableEncryptedWalletPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback _callback) throws ApiException {
        return apiWalletCreateImportableEncryptedWalletPostCall(nodeUrlOrApiAccessKey, createWalletRequest, _callback);

    }

    /**
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletCreateImportableEncryptedWalletPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest) throws ApiException {
        apiWalletCreateImportableEncryptedWalletPostWithHttpInfo(nodeUrlOrApiAccessKey, createWalletRequest);
    }

    /**
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletCreateImportableEncryptedWalletPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = apiWalletCreateImportableEncryptedWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, createWalletRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletCreateImportableEncryptedWalletPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletCreateImportableEncryptedWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, createWalletRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletCreateImportableWalletPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletCreateImportableWalletPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWalletRequest;

        // create path and map variables
        String localVarPath = "/api/Wallet/create-importable-wallet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletCreateImportableWalletPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback _callback) throws ApiException {
        return apiWalletCreateImportableWalletPostCall(nodeUrlOrApiAccessKey, createWalletRequest, _callback);

    }

    /**
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletCreateImportableWalletPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest) throws ApiException {
        apiWalletCreateImportableWalletPostWithHttpInfo(nodeUrlOrApiAccessKey, createWalletRequest);
    }

    /**
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletCreateImportableWalletPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = apiWalletCreateImportableWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, createWalletRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletCreateImportableWalletPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletCreateImportableWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, createWalletRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletCreatePost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletCreatePostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWalletRequest;

        // create path and map variables
        String localVarPath = "/api/Wallet/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletCreatePostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback _callback) throws ApiException {
        return apiWalletCreatePostCall(nodeUrlOrApiAccessKey, createWalletRequest, _callback);

    }

    /**
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletCreatePost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest) throws ApiException {
        apiWalletCreatePostWithHttpInfo(nodeUrlOrApiAccessKey, createWalletRequest);
    }

    /**
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletCreatePostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = apiWalletCreatePostValidateBeforeCall(nodeUrlOrApiAccessKey, createWalletRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletCreatePostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable CreateWalletRequest createWalletRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletCreatePostValidateBeforeCall(nodeUrlOrApiAccessKey, createWalletRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletDetailsGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletDetailsGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Wallet/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nodeUrlOrApiAccessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodeUrlOrApiAccessKey", nodeUrlOrApiAccessKey));
        }

        if (walletName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletName", walletName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletDetailsGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback _callback) throws ApiException {
        return apiWalletDetailsGetCall(nodeUrlOrApiAccessKey, walletName, _callback);

    }

    /**
     * Get the details of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletDetailsGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName) throws ApiException {
        apiWalletDetailsGetWithHttpInfo(nodeUrlOrApiAccessKey, walletName);
    }

    /**
     * Get the details of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletDetailsGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName) throws ApiException {
        okhttp3.Call localVarCall = apiWalletDetailsGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the details of a wallet. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletDetailsGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletDetailsGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletEncryptWalletPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptWalletDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletEncryptWalletPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable EncryptWalletDto encryptWalletDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = encryptWalletDto;

        // create path and map variables
        String localVarPath = "/api/Wallet/encrypt-wallet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletEncryptWalletPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable EncryptWalletDto encryptWalletDto, final ApiCallback _callback) throws ApiException {
        return apiWalletEncryptWalletPostCall(nodeUrlOrApiAccessKey, walletName, encryptWalletDto, _callback);

    }

    /**
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptWalletDto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletEncryptWalletPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable EncryptWalletDto encryptWalletDto) throws ApiException {
        apiWalletEncryptWalletPostWithHttpInfo(nodeUrlOrApiAccessKey, walletName, encryptWalletDto);
    }

    /**
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptWalletDto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletEncryptWalletPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable EncryptWalletDto encryptWalletDto) throws ApiException {
        okhttp3.Call localVarCall = apiWalletEncryptWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptWalletDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptWalletDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletEncryptWalletPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable EncryptWalletDto encryptWalletDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletEncryptWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptWalletDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletImportWalletPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param importWalletdto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletImportWalletPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable ImportWalletdto importWalletdto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importWalletdto;

        // create path and map variables
        String localVarPath = "/api/Wallet/import-wallet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletImportWalletPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable ImportWalletdto importWalletdto, final ApiCallback _callback) throws ApiException {
        return apiWalletImportWalletPostCall(nodeUrlOrApiAccessKey, importWalletdto, _callback);

    }

    /**
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param importWalletdto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletImportWalletPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable ImportWalletdto importWalletdto) throws ApiException {
        apiWalletImportWalletPostWithHttpInfo(nodeUrlOrApiAccessKey, importWalletdto);
    }

    /**
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param importWalletdto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletImportWalletPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable ImportWalletdto importWalletdto) throws ApiException {
        okhttp3.Call localVarCall = apiWalletImportWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, importWalletdto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param importWalletdto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletImportWalletPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable ImportWalletdto importWalletdto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletImportWalletPostValidateBeforeCall(nodeUrlOrApiAccessKey, importWalletdto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletOfficialAddressGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletOfficialAddressGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Wallet/official-address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletOfficialAddressGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback _callback) throws ApiException {
        return apiWalletOfficialAddressGetCall(nodeUrlOrApiAccessKey, walletName, _callback);

    }

    /**
     * Get the official address of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletOfficialAddressGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName) throws ApiException {
        apiWalletOfficialAddressGetWithHttpInfo(nodeUrlOrApiAccessKey, walletName);
    }

    /**
     * Get the official address of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletOfficialAddressGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName) throws ApiException {
        okhttp3.Call localVarCall = apiWalletOfficialAddressGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the official address of a wallet. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletOfficialAddressGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletOfficialAddressGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletSetWalletMnemonicsPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param setWalletMnemonicsdto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletSetWalletMnemonicsPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable SetWalletMnemonicsdto setWalletMnemonicsdto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setWalletMnemonicsdto;

        // create path and map variables
        String localVarPath = "/api/Wallet/set-wallet-mnemonics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        if (encryptedPassphrase != null) {
            localVarHeaderParams.put("encryptedPassphrase", localVarApiClient.parameterToString(encryptedPassphrase));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletSetWalletMnemonicsPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable SetWalletMnemonicsdto setWalletMnemonicsdto, final ApiCallback _callback) throws ApiException {
        return apiWalletSetWalletMnemonicsPostCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto, _callback);

    }

    /**
     * Set the mnemonics of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param setWalletMnemonicsdto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletSetWalletMnemonicsPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable SetWalletMnemonicsdto setWalletMnemonicsdto) throws ApiException {
        apiWalletSetWalletMnemonicsPostWithHttpInfo(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto);
    }

    /**
     * Set the mnemonics of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param setWalletMnemonicsdto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletSetWalletMnemonicsPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable SetWalletMnemonicsdto setWalletMnemonicsdto) throws ApiException {
        okhttp3.Call localVarCall = apiWalletSetWalletMnemonicsPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set the mnemonics of a wallet. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param setWalletMnemonicsdto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletSetWalletMnemonicsPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String encryptedPassphrase, @javax.annotation.Nullable SetWalletMnemonicsdto setWalletMnemonicsdto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletSetWalletMnemonicsPostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletSignWalletMessagePost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signMessageUsingWalletdto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletSignWalletMessagePostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable SignMessageUsingWalletdto signMessageUsingWalletdto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signMessageUsingWalletdto;

        // create path and map variables
        String localVarPath = "/api/Wallet/sign-wallet-message";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletSignWalletMessagePostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable SignMessageUsingWalletdto signMessageUsingWalletdto, final ApiCallback _callback) throws ApiException {
        return apiWalletSignWalletMessagePostCall(nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto, _callback);

    }

    /**
     * Sign a message using the wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signMessageUsingWalletdto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletSignWalletMessagePost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable SignMessageUsingWalletdto signMessageUsingWalletdto) throws ApiException {
        apiWalletSignWalletMessagePostWithHttpInfo(nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto);
    }

    /**
     * Sign a message using the wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signMessageUsingWalletdto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletSignWalletMessagePostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable SignMessageUsingWalletdto signMessageUsingWalletdto) throws ApiException {
        okhttp3.Call localVarCall = apiWalletSignWalletMessagePostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sign a message using the wallet. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signMessageUsingWalletdto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletSignWalletMessagePostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable SignMessageUsingWalletdto signMessageUsingWalletdto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletSignWalletMessagePostValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletTransactionsGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param skip  (optional, default to 10)
     * @param count  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletTransactionsGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable Integer skip, @javax.annotation.Nullable Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Wallet/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletTransactionsGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable Integer skip, @javax.annotation.Nullable Integer count, final ApiCallback _callback) throws ApiException {
        return apiWalletTransactionsGetCall(nodeUrlOrApiAccessKey, walletName, skip, count, _callback);

    }

    /**
     * Get the transactions of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param skip  (optional, default to 10)
     * @param count  (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletTransactionsGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable Integer skip, @javax.annotation.Nullable Integer count) throws ApiException {
        apiWalletTransactionsGetWithHttpInfo(nodeUrlOrApiAccessKey, walletName, skip, count);
    }

    /**
     * Get the transactions of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param skip  (optional, default to 10)
     * @param count  (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletTransactionsGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable Integer skip, @javax.annotation.Nullable Integer count) throws ApiException {
        okhttp3.Call localVarCall = apiWalletTransactionsGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, skip, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the transactions of a wallet. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param skip  (optional, default to 10)
     * @param count  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletTransactionsGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable Integer skip, @javax.annotation.Nullable Integer count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletTransactionsGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, skip, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletWalletAddressBalanceGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletWalletAddressBalanceGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Wallet/wallet-address-balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (walletName != null) {
            localVarHeaderParams.put("walletName", localVarApiClient.parameterToString(walletName));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletWalletAddressBalanceGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        return apiWalletWalletAddressBalanceGetCall(nodeUrlOrApiAccessKey, walletName, address, _callback);

    }

    /**
     * Get the balance of a specific address in a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletWalletAddressBalanceGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address) throws ApiException {
        apiWalletWalletAddressBalanceGetWithHttpInfo(nodeUrlOrApiAccessKey, walletName, address);
    }

    /**
     * Get the balance of a specific address in a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletWalletAddressBalanceGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address) throws ApiException {
        okhttp3.Call localVarCall = apiWalletWalletAddressBalanceGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, address, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the balance of a specific address in a wallet. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletWalletAddressBalanceGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletWalletAddressBalanceGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, address, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletWalletAddressTransactionsGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletWalletAddressTransactionsGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Wallet/wallet-address-transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (walletName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletName", walletName));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletWalletAddressTransactionsGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address, final ApiCallback _callback) throws ApiException {
        return apiWalletWalletAddressTransactionsGetCall(nodeUrlOrApiAccessKey, walletName, address, _callback);

    }

    /**
     * Get the transactions of a specific address in a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletWalletAddressTransactionsGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address) throws ApiException {
        apiWalletWalletAddressTransactionsGetWithHttpInfo(nodeUrlOrApiAccessKey, walletName, address);
    }

    /**
     * Get the transactions of a specific address in a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletWalletAddressTransactionsGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address) throws ApiException {
        okhttp3.Call localVarCall = apiWalletWalletAddressTransactionsGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, address, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the transactions of a specific address in a wallet. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletWalletAddressTransactionsGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String walletName, @javax.annotation.Nullable String address, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletWalletAddressTransactionsGetValidateBeforeCall(nodeUrlOrApiAccessKey, walletName, address, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletWalletDefaultAddressGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletWalletDefaultAddressGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable Integer addressType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Wallet/wallet-default-address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addressType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressType", addressType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (mnemonics != null) {
            localVarHeaderParams.put("mnemonics", localVarApiClient.parameterToString(mnemonics));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletWalletDefaultAddressGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable Integer addressType, final ApiCallback _callback) throws ApiException {
        return apiWalletWalletDefaultAddressGetCall(nodeUrlOrApiAccessKey, mnemonics, addressType, _callback);

    }

    /**
     * default addresss of a wallet without private key
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletWalletDefaultAddressGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable Integer addressType) throws ApiException {
        apiWalletWalletDefaultAddressGetWithHttpInfo(nodeUrlOrApiAccessKey, mnemonics, addressType);
    }

    /**
     * default addresss of a wallet without private key
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletWalletDefaultAddressGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable Integer addressType) throws ApiException {
        okhttp3.Call localVarCall = apiWalletWalletDefaultAddressGetValidateBeforeCall(nodeUrlOrApiAccessKey, mnemonics, addressType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * default addresss of a wallet without private key (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletWalletDefaultAddressGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable Integer addressType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletWalletDefaultAddressGetValidateBeforeCall(nodeUrlOrApiAccessKey, mnemonics, addressType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletWalletDefaultAddressV2Get
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletWalletDefaultAddressV2GetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable Integer addressType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Wallet/wallet-default-address-v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addressType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressType", addressType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (mnemonics != null) {
            localVarHeaderParams.put("mnemonics", localVarApiClient.parameterToString(mnemonics));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletWalletDefaultAddressV2GetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable Integer addressType, final ApiCallback _callback) throws ApiException {
        return apiWalletWalletDefaultAddressV2GetCall(nodeUrlOrApiAccessKey, mnemonics, addressType, _callback);

    }

    /**
     * default addresss of a wallet with private key
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiWalletWalletDefaultAddressV2Get(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable Integer addressType) throws ApiException {
        apiWalletWalletDefaultAddressV2GetWithHttpInfo(nodeUrlOrApiAccessKey, mnemonics, addressType);
    }

    /**
     * default addresss of a wallet with private key
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiWalletWalletDefaultAddressV2GetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable Integer addressType) throws ApiException {
        okhttp3.Call localVarCall = apiWalletWalletDefaultAddressV2GetValidateBeforeCall(nodeUrlOrApiAccessKey, mnemonics, addressType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * default addresss of a wallet with private key (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletWalletDefaultAddressV2GetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String mnemonics, @javax.annotation.Nullable Integer addressType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletWalletDefaultAddressV2GetValidateBeforeCall(nodeUrlOrApiAccessKey, mnemonics, addressType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
