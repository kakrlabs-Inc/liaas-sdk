/* tslint:disable */
/* eslint-disable */
/**
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BroadcastTransactiondto,
  CreateRawTransactiondto,
  CreateRawTransactiondtoV2,
  CreateRawTransactiondtoV3,
  SendFromWalletdto,
  SignRawTransactiondto,
} from '../models/index';
import {
    BroadcastTransactiondtoFromJSON,
    BroadcastTransactiondtoToJSON,
    CreateRawTransactiondtoFromJSON,
    CreateRawTransactiondtoToJSON,
    CreateRawTransactiondtoV2FromJSON,
    CreateRawTransactiondtoV2ToJSON,
    CreateRawTransactiondtoV3FromJSON,
    CreateRawTransactiondtoV3ToJSON,
    SendFromWalletdtoFromJSON,
    SendFromWalletdtoToJSON,
    SignRawTransactiondtoFromJSON,
    SignRawTransactiondtoToJSON,
} from '../models/index';

export interface ApiTransactionsBroadcastTransactionPostRequest {
    nodeUrlOrApiAccessKey?: string;
    broadcastTransactiondto?: BroadcastTransactiondto;
}

export interface ApiTransactionsCreateRawTransactionPostRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
    createRawTransactiondto?: CreateRawTransactiondto;
}

export interface ApiTransactionsCreateRawTransactionV2PostRequest {
    nodeUrlOrApiAccessKey?: string;
    createRawTransactiondtoV2?: CreateRawTransactiondtoV2;
}

export interface ApiTransactionsCreateRawTransactionV3PostRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
    createRawTransactiondtoV3?: CreateRawTransactiondtoV3;
}

export interface ApiTransactionsSendFundsFromWalletPostRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
    encryptedPassphrase?: string;
    sendFromWalletdto?: SendFromWalletdto;
}

export interface ApiTransactionsSignTransactionPostRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
    signRawTransactiondto?: SignRawTransactiondto;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * broadcast transaction on the Litecoin blockchain
     */
    async apiTransactionsBroadcastTransactionPostRaw(requestParameters: ApiTransactionsBroadcastTransactionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Transactions/broadcast-transaction`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BroadcastTransactiondtoToJSON(requestParameters['broadcastTransactiondto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * broadcast transaction on the Litecoin blockchain
     */
    async apiTransactionsBroadcastTransactionPost(requestParameters: ApiTransactionsBroadcastTransactionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTransactionsBroadcastTransactionPostRaw(requestParameters, initOverrides);
    }

    /**
     * create raw transaction - returns the transaction hash
     */
    async apiTransactionsCreateRawTransactionPostRaw(requestParameters: ApiTransactionsCreateRawTransactionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }


        let urlPath = `/api/Transactions/create-raw-transaction`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRawTransactiondtoToJSON(requestParameters['createRawTransactiondto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * create raw transaction - returns the transaction hash
     */
    async apiTransactionsCreateRawTransactionPost(requestParameters: ApiTransactionsCreateRawTransactionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTransactionsCreateRawTransactionPostRaw(requestParameters, initOverrides);
    }

    /**
     * create raw transaction with the address UTXOs - returns the transaction hash
     */
    async apiTransactionsCreateRawTransactionV2PostRaw(requestParameters: ApiTransactionsCreateRawTransactionV2PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Transactions/create-raw-transaction-v2`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRawTransactiondtoV2ToJSON(requestParameters['createRawTransactiondtoV2']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * create raw transaction with the address UTXOs - returns the transaction hash
     */
    async apiTransactionsCreateRawTransactionV2Post(requestParameters: ApiTransactionsCreateRawTransactionV2PostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTransactionsCreateRawTransactionV2PostRaw(requestParameters, initOverrides);
    }

    /**
     * create raw transaction with the service Fee address attached - returns the transaction hash
     */
    async apiTransactionsCreateRawTransactionV3PostRaw(requestParameters: ApiTransactionsCreateRawTransactionV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }


        let urlPath = `/api/Transactions/create-raw-transaction-v3`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRawTransactiondtoV3ToJSON(requestParameters['createRawTransactiondtoV3']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * create raw transaction with the service Fee address attached - returns the transaction hash
     */
    async apiTransactionsCreateRawTransactionV3Post(requestParameters: ApiTransactionsCreateRawTransactionV3PostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTransactionsCreateRawTransactionV3PostRaw(requestParameters, initOverrides);
    }

    /**
     * Send a funds from one address to another using wallet
     */
    async apiTransactionsSendFundsFromWalletPostRaw(requestParameters: ApiTransactionsSendFundsFromWalletPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }

        if (requestParameters['encryptedPassphrase'] != null) {
            headerParameters['encryptedPassphrase'] = String(requestParameters['encryptedPassphrase']);
        }


        let urlPath = `/api/Transactions/send-funds-from-wallet`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendFromWalletdtoToJSON(requestParameters['sendFromWalletdto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send a funds from one address to another using wallet
     */
    async apiTransactionsSendFundsFromWalletPost(requestParameters: ApiTransactionsSendFundsFromWalletPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTransactionsSendFundsFromWalletPostRaw(requestParameters, initOverrides);
    }

    /**
     * sign a created raw transaction - returns the signed transaction hash
     */
    async apiTransactionsSignTransactionPostRaw(requestParameters: ApiTransactionsSignTransactionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }


        let urlPath = `/api/Transactions/sign-transaction`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignRawTransactiondtoToJSON(requestParameters['signRawTransactiondto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * sign a created raw transaction - returns the signed transaction hash
     */
    async apiTransactionsSignTransactionPost(requestParameters: ApiTransactionsSignTransactionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTransactionsSignTransactionPostRaw(requestParameters, initOverrides);
    }

}
