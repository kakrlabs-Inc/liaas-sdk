/*
KakrLabs-SDK-Creator

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetWalletMnemonicsdto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetWalletMnemonicsdto{}

// SetWalletMnemonicsdto struct for SetWalletMnemonicsdto
type SetWalletMnemonicsdto struct {
	// The mnemonics to set for the wallet.
	Mnemonics string `json:"mnemonics"`
}

type _SetWalletMnemonicsdto SetWalletMnemonicsdto

// NewSetWalletMnemonicsdto instantiates a new SetWalletMnemonicsdto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetWalletMnemonicsdto(mnemonics string) *SetWalletMnemonicsdto {
	this := SetWalletMnemonicsdto{}
	this.Mnemonics = mnemonics
	return &this
}

// NewSetWalletMnemonicsdtoWithDefaults instantiates a new SetWalletMnemonicsdto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetWalletMnemonicsdtoWithDefaults() *SetWalletMnemonicsdto {
	this := SetWalletMnemonicsdto{}
	return &this
}

// GetMnemonics returns the Mnemonics field value
func (o *SetWalletMnemonicsdto) GetMnemonics() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mnemonics
}

// GetMnemonicsOk returns a tuple with the Mnemonics field value
// and a boolean to check if the value has been set.
func (o *SetWalletMnemonicsdto) GetMnemonicsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mnemonics, true
}

// SetMnemonics sets field value
func (o *SetWalletMnemonicsdto) SetMnemonics(v string) {
	o.Mnemonics = v
}

func (o SetWalletMnemonicsdto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetWalletMnemonicsdto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mnemonics"] = o.Mnemonics
	return toSerialize, nil
}

func (o *SetWalletMnemonicsdto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mnemonics",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetWalletMnemonicsdto := _SetWalletMnemonicsdto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetWalletMnemonicsdto)

	if err != nil {
		return err
	}

	*o = SetWalletMnemonicsdto(varSetWalletMnemonicsdto)

	return err
}

type NullableSetWalletMnemonicsdto struct {
	value *SetWalletMnemonicsdto
	isSet bool
}

func (v NullableSetWalletMnemonicsdto) Get() *SetWalletMnemonicsdto {
	return v.value
}

func (v *NullableSetWalletMnemonicsdto) Set(val *SetWalletMnemonicsdto) {
	v.value = val
	v.isSet = true
}

func (v NullableSetWalletMnemonicsdto) IsSet() bool {
	return v.isSet
}

func (v *NullableSetWalletMnemonicsdto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetWalletMnemonicsdto(val *SetWalletMnemonicsdto) *NullableSetWalletMnemonicsdto {
	return &NullableSetWalletMnemonicsdto{value: val, isSet: true}
}

func (v NullableSetWalletMnemonicsdto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetWalletMnemonicsdto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


