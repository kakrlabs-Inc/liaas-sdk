/* tslint:disable */
/* eslint-disable */
/**
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VerifyOTPdto,
} from '../models/index';
import {
    VerifyOTPdtoFromJSON,
    VerifyOTPdtoToJSON,
} from '../models/index';

export interface ApiUtilitiesGetBlockchainOtpGetRequest {
    nodeUrlOrApiAccessKey?: string;
    signature?: string;
}

export interface ApiUtilitiesVerifyOtpPostRequest {
    nodeUrlOrApiAccessKey?: string;
    verifyOTPdto?: VerifyOTPdto;
}

/**
 * 
 */
export class UtilitiesApi extends runtime.BaseAPI {

    /**
     * Gets OTP using the blockchain information using the signature of a signed message.
     */
    async apiUtilitiesGetBlockchainOtpGetRaw(requestParameters: ApiUtilitiesGetBlockchainOtpGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['signature'] != null) {
            headerParameters['signature'] = String(requestParameters['signature']);
        }


        let urlPath = `/api/Utilities/get-blockchain-otp`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gets OTP using the blockchain information using the signature of a signed message.
     */
    async apiUtilitiesGetBlockchainOtpGet(requestParameters: ApiUtilitiesGetBlockchainOtpGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUtilitiesGetBlockchainOtpGetRaw(requestParameters, initOverrides);
    }

    /**
     * Verifies the OTP on the blockchain.
     */
    async apiUtilitiesVerifyOtpPostRaw(requestParameters: ApiUtilitiesVerifyOtpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Utilities/verify-otp`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyOTPdtoToJSON(requestParameters['verifyOTPdto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verifies the OTP on the blockchain.
     */
    async apiUtilitiesVerifyOtpPost(requestParameters: ApiUtilitiesVerifyOtpPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUtilitiesVerifyOtpPostRaw(requestParameters, initOverrides);
    }

}
