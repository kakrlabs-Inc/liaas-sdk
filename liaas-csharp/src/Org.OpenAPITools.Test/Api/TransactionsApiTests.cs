/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    public sealed class TransactionsApiTests : ApiTestsBase
    {
        private readonly ITransactionsApi _instance;

        public TransactionsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ITransactionsApi>();
        }

        /// <summary>
        /// Test ApiTransactionsBroadcastTransactionPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTransactionsBroadcastTransactionPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<BroadcastTransactiondto> broadcastTransactiondto = default!;
            await _instance.ApiTransactionsBroadcastTransactionPostAsync(nodeUrlOrApiAccessKey, broadcastTransactiondto);
        }

        /// <summary>
        /// Test ApiTransactionsCreateRawTransactionPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTransactionsCreateRawTransactionPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<CreateRawTransactiondto> createRawTransactiondto = default!;
            await _instance.ApiTransactionsCreateRawTransactionPostAsync(nodeUrlOrApiAccessKey, walletName, createRawTransactiondto);
        }

        /// <summary>
        /// Test ApiTransactionsCreateRawTransactionV2Post
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTransactionsCreateRawTransactionV2PostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<CreateRawTransactiondtoV2> createRawTransactiondtoV2 = default!;
            await _instance.ApiTransactionsCreateRawTransactionV2PostAsync(nodeUrlOrApiAccessKey, createRawTransactiondtoV2);
        }

        /// <summary>
        /// Test ApiTransactionsCreateRawTransactionV3Post
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTransactionsCreateRawTransactionV3PostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<CreateRawTransactiondtoV3> createRawTransactiondtoV3 = default!;
            await _instance.ApiTransactionsCreateRawTransactionV3PostAsync(nodeUrlOrApiAccessKey, walletName, createRawTransactiondtoV3);
        }

        /// <summary>
        /// Test ApiTransactionsSendFundsFromWalletPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTransactionsSendFundsFromWalletPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<string> encryptedPassphrase = default!;
            Client.Option<SendFromWalletdto> sendFromWalletdto = default!;
            await _instance.ApiTransactionsSendFundsFromWalletPostAsync(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, sendFromWalletdto);
        }

        /// <summary>
        /// Test ApiTransactionsSignTransactionPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTransactionsSignTransactionPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<SignRawTransactiondto> signRawTransactiondto = default!;
            await _instance.ApiTransactionsSignTransactionPostAsync(nodeUrlOrApiAccessKey, walletName, signRawTransactiondto);
        }
    }
}
