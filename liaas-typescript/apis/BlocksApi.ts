/* tslint:disable */
/* eslint-disable */
/**
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface ApiBlocksBlockHeaderGetRequest {
    nodeUrlOrApiAccessKey?: string;
    blockheight?: string;
}

export interface ApiBlocksBlockStatGetRequest {
    nodeUrlOrApiAccessKey?: string;
    blockheight?: string;
}

export interface ApiBlocksBlockTransactionGetRequest {
    nodeUrlOrApiAccessKey?: string;
    blockhash?: string;
}

export interface ApiBlocksBlockchainInfoGetRequest {
    nodeUrlOrApiAccessKey?: string;
}

/**
 * 
 */
export class BlocksApi extends runtime.BaseAPI {

    /**
     * Get block header information
     */
    async apiBlocksBlockHeaderGetRaw(requestParameters: ApiBlocksBlockHeaderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['blockheight'] != null) {
            queryParameters['blockheight'] = requestParameters['blockheight'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Blocks/block-header`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get block header information
     */
    async apiBlocksBlockHeaderGet(requestParameters: ApiBlocksBlockHeaderGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBlocksBlockHeaderGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get block statistics
     */
    async apiBlocksBlockStatGetRaw(requestParameters: ApiBlocksBlockStatGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['blockheight'] != null) {
            queryParameters['blockheight'] = requestParameters['blockheight'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Blocks/block-stat`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get block statistics
     */
    async apiBlocksBlockStatGet(requestParameters: ApiBlocksBlockStatGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBlocksBlockStatGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get block Transactions in details
     */
    async apiBlocksBlockTransactionGetRaw(requestParameters: ApiBlocksBlockTransactionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['blockhash'] != null) {
            queryParameters['blockhash'] = requestParameters['blockhash'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Blocks/block-transaction`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get block Transactions in details
     */
    async apiBlocksBlockTransactionGet(requestParameters: ApiBlocksBlockTransactionGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBlocksBlockTransactionGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get Litcoin Block information
     */
    async apiBlocksBlockchainInfoGetRaw(requestParameters: ApiBlocksBlockchainInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Blocks/blockchain-info`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Litcoin Block information
     */
    async apiBlocksBlockchainInfoGet(requestParameters: ApiBlocksBlockchainInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBlocksBlockchainInfoGetRaw(requestParameters, initOverrides);
    }

}
