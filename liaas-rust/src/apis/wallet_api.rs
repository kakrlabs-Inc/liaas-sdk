/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`api_wallet_addresses_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletAddressesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_balance_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletBalanceGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_change_passphrase_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletChangePassphrasePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_create_encrypted_wallet_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletCreateEncryptedWalletPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_create_importable_encrypted_wallet_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletCreateImportableEncryptedWalletPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_create_importable_wallet_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletCreateImportableWalletPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_create_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletCreatePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_details_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletDetailsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_encrypt_wallet_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletEncryptWalletPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_import_wallet_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletImportWalletPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_official_address_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletOfficialAddressGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_set_wallet_mnemonics_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletSetWalletMnemonicsPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_sign_wallet_message_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletSignWalletMessagePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_transactions_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletTransactionsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_wallet_address_balance_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletWalletAddressBalanceGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_wallet_address_transactions_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletWalletAddressTransactionsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_wallet_default_address_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletWalletDefaultAddressGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_wallet_wallet_default_address_v2_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiWalletWalletDefaultAddressV2GetError {
    UnknownValue(serde_json::Value),
}


pub async fn api_wallet_addresses_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>) -> Result<(), Error<ApiWalletAddressesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;

    let uri_str = format!("{}/api/Wallet/addresses", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletAddressesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_balance_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>) -> Result<(), Error<ApiWalletBalanceGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;

    let uri_str = format!("{}/api/Wallet/balance", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletBalanceGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_change_passphrase_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, change_passphrasedto: Option<models::ChangePassphrasedto>) -> Result<(), Error<ApiWalletChangePassphrasePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_change_passphrasedto = change_passphrasedto;

    let uri_str = format!("{}/api/Wallet/change-passphrase", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_change_passphrasedto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletChangePassphrasePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_create_encrypted_wallet_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, create_wallet_request: Option<models::CreateWalletRequest>) -> Result<(), Error<ApiWalletCreateEncryptedWalletPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_create_wallet_request = create_wallet_request;

    let uri_str = format!("{}/api/Wallet/create-encrypted-wallet", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_wallet_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletCreateEncryptedWalletPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_create_importable_encrypted_wallet_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, create_wallet_request: Option<models::CreateWalletRequest>) -> Result<(), Error<ApiWalletCreateImportableEncryptedWalletPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_create_wallet_request = create_wallet_request;

    let uri_str = format!("{}/api/Wallet/create-importable-encrypted-wallet", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_wallet_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletCreateImportableEncryptedWalletPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_create_importable_wallet_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, create_wallet_request: Option<models::CreateWalletRequest>) -> Result<(), Error<ApiWalletCreateImportableWalletPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_create_wallet_request = create_wallet_request;

    let uri_str = format!("{}/api/Wallet/create-importable-wallet", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_wallet_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletCreateImportableWalletPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_create_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, create_wallet_request: Option<models::CreateWalletRequest>) -> Result<(), Error<ApiWalletCreatePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_create_wallet_request = create_wallet_request;

    let uri_str = format!("{}/api/Wallet/create", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_wallet_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletCreatePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_details_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>) -> Result<(), Error<ApiWalletDetailsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;

    let uri_str = format!("{}/api/Wallet/details", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.query(&[("nodeUrlOrApiAccessKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_wallet_name {
        req_builder = req_builder.query(&[("walletName", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletDetailsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_encrypt_wallet_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, encrypt_wallet_dto: Option<models::EncryptWalletDto>) -> Result<(), Error<ApiWalletEncryptWalletPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_encrypt_wallet_dto = encrypt_wallet_dto;

    let uri_str = format!("{}/api/Wallet/encrypt-wallet", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }
    req_builder = req_builder.json(&p_encrypt_wallet_dto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletEncryptWalletPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_import_wallet_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, import_walletdto: Option<models::ImportWalletdto>) -> Result<(), Error<ApiWalletImportWalletPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_import_walletdto = import_walletdto;

    let uri_str = format!("{}/api/Wallet/import-wallet", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_import_walletdto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletImportWalletPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_official_address_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>) -> Result<(), Error<ApiWalletOfficialAddressGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;

    let uri_str = format!("{}/api/Wallet/official-address", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletOfficialAddressGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_set_wallet_mnemonics_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, encrypted_passphrase: Option<&str>, set_wallet_mnemonicsdto: Option<models::SetWalletMnemonicsdto>) -> Result<(), Error<ApiWalletSetWalletMnemonicsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_encrypted_passphrase = encrypted_passphrase;
    let p_set_wallet_mnemonicsdto = set_wallet_mnemonicsdto;

    let uri_str = format!("{}/api/Wallet/set-wallet-mnemonics", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }
    if let Some(param_value) = p_encrypted_passphrase {
        req_builder = req_builder.header("encryptedPassphrase", param_value.to_string());
    }
    req_builder = req_builder.json(&p_set_wallet_mnemonicsdto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletSetWalletMnemonicsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_sign_wallet_message_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, sign_message_using_walletdto: Option<models::SignMessageUsingWalletdto>) -> Result<(), Error<ApiWalletSignWalletMessagePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_sign_message_using_walletdto = sign_message_using_walletdto;

    let uri_str = format!("{}/api/Wallet/sign-wallet-message", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }
    req_builder = req_builder.json(&p_sign_message_using_walletdto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletSignWalletMessagePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_transactions_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, skip: Option<i32>, count: Option<i32>) -> Result<(), Error<ApiWalletTransactionsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_skip = skip;
    let p_count = count;

    let uri_str = format!("{}/api/Wallet/transactions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_skip {
        req_builder = req_builder.query(&[("skip", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_count {
        req_builder = req_builder.query(&[("count", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletTransactionsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_wallet_address_balance_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, address: Option<&str>) -> Result<(), Error<ApiWalletWalletAddressBalanceGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_address = address;

    let uri_str = format!("{}/api/Wallet/wallet-address-balance", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_address {
        req_builder = req_builder.query(&[("address", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletWalletAddressBalanceGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_wallet_address_transactions_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, address: Option<&str>) -> Result<(), Error<ApiWalletWalletAddressTransactionsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_address = address;

    let uri_str = format!("{}/api/Wallet/wallet-address-transactions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_wallet_name {
        req_builder = req_builder.query(&[("walletName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_address {
        req_builder = req_builder.query(&[("address", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletWalletAddressTransactionsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_wallet_default_address_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, mnemonics: Option<&str>, address_type: Option<i32>) -> Result<(), Error<ApiWalletWalletDefaultAddressGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_mnemonics = mnemonics;
    let p_address_type = address_type;

    let uri_str = format!("{}/api/Wallet/wallet-default-address", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_address_type {
        req_builder = req_builder.query(&[("addressType", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_mnemonics {
        req_builder = req_builder.header("mnemonics", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletWalletDefaultAddressGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_wallet_wallet_default_address_v2_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, mnemonics: Option<&str>, address_type: Option<i32>) -> Result<(), Error<ApiWalletWalletDefaultAddressV2GetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_mnemonics = mnemonics;
    let p_address_type = address_type;

    let uri_str = format!("{}/api/Wallet/wallet-default-address-v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_address_type {
        req_builder = req_builder.query(&[("addressType", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_mnemonics {
        req_builder = req_builder.header("mnemonics", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiWalletWalletDefaultAddressV2GetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

