/* tslint:disable */
/* eslint-disable */
/**
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangePassphrasedto,
  CreateWalletRequest,
  EncryptWalletDto,
  ImportWalletdto,
  SetWalletMnemonicsdto,
  SignMessageUsingWalletdto,
} from '../models/index';
import {
    ChangePassphrasedtoFromJSON,
    ChangePassphrasedtoToJSON,
    CreateWalletRequestFromJSON,
    CreateWalletRequestToJSON,
    EncryptWalletDtoFromJSON,
    EncryptWalletDtoToJSON,
    ImportWalletdtoFromJSON,
    ImportWalletdtoToJSON,
    SetWalletMnemonicsdtoFromJSON,
    SetWalletMnemonicsdtoToJSON,
    SignMessageUsingWalletdtoFromJSON,
    SignMessageUsingWalletdtoToJSON,
} from '../models/index';

export interface ApiWalletAddressesGetRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
}

export interface ApiWalletBalanceGetRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
}

export interface ApiWalletChangePassphrasePostRequest {
    nodeUrlOrApiAccessKey?: string;
    changePassphrasedto?: ChangePassphrasedto;
}

export interface ApiWalletCreateEncryptedWalletPostRequest {
    nodeUrlOrApiAccessKey?: string;
    createWalletRequest?: CreateWalletRequest;
}

export interface ApiWalletCreateImportableEncryptedWalletPostRequest {
    nodeUrlOrApiAccessKey?: string;
    createWalletRequest?: CreateWalletRequest;
}

export interface ApiWalletCreateImportableWalletPostRequest {
    nodeUrlOrApiAccessKey?: string;
    createWalletRequest?: CreateWalletRequest;
}

export interface ApiWalletCreatePostRequest {
    nodeUrlOrApiAccessKey?: string;
    createWalletRequest?: CreateWalletRequest;
}

export interface ApiWalletDetailsGetRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
}

export interface ApiWalletEncryptWalletPostRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
    encryptWalletDto?: EncryptWalletDto;
}

export interface ApiWalletImportWalletPostRequest {
    nodeUrlOrApiAccessKey?: string;
    importWalletdto?: ImportWalletdto;
}

export interface ApiWalletOfficialAddressGetRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
}

export interface ApiWalletSetWalletMnemonicsPostRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
    encryptedPassphrase?: string;
    setWalletMnemonicsdto?: SetWalletMnemonicsdto;
}

export interface ApiWalletSignWalletMessagePostRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
    signMessageUsingWalletdto?: SignMessageUsingWalletdto;
}

export interface ApiWalletTransactionsGetRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
    skip?: number;
    count?: number;
}

export interface ApiWalletWalletAddressBalanceGetRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
    address?: string;
}

export interface ApiWalletWalletAddressTransactionsGetRequest {
    nodeUrlOrApiAccessKey?: string;
    walletName?: string;
    address?: string;
}

export interface ApiWalletWalletDefaultAddressGetRequest {
    nodeUrlOrApiAccessKey?: string;
    mnemonics?: string;
    addressType?: number;
}

export interface ApiWalletWalletDefaultAddressV2GetRequest {
    nodeUrlOrApiAccessKey?: string;
    mnemonics?: string;
    addressType?: number;
}

/**
 * 
 */
export class WalletApi extends runtime.BaseAPI {

    /**
     * Get all addresses of a wallet.
     */
    async apiWalletAddressesGetRaw(requestParameters: ApiWalletAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }


        let urlPath = `/api/Wallet/addresses`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all addresses of a wallet.
     */
    async apiWalletAddressesGet(requestParameters: ApiWalletAddressesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletAddressesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get the balance of a wallet.
     */
    async apiWalletBalanceGetRaw(requestParameters: ApiWalletBalanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }


        let urlPath = `/api/Wallet/balance`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the balance of a wallet.
     */
    async apiWalletBalanceGet(requestParameters: ApiWalletBalanceGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletBalanceGetRaw(requestParameters, initOverrides);
    }

    /**
     * Change the passphrase of a wallet.
     */
    async apiWalletChangePassphrasePostRaw(requestParameters: ApiWalletChangePassphrasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Wallet/change-passphrase`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePassphrasedtoToJSON(requestParameters['changePassphrasedto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change the passphrase of a wallet.
     */
    async apiWalletChangePassphrasePost(requestParameters: ApiWalletChangePassphrasePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletChangePassphrasePostRaw(requestParameters, initOverrides);
    }

    /**
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     */
    async apiWalletCreateEncryptedWalletPostRaw(requestParameters: ApiWalletCreateEncryptedWalletPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Wallet/create-encrypted-wallet`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWalletRequestToJSON(requestParameters['createWalletRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     */
    async apiWalletCreateEncryptedWalletPost(requestParameters: ApiWalletCreateEncryptedWalletPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletCreateEncryptedWalletPostRaw(requestParameters, initOverrides);
    }

    /**
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     */
    async apiWalletCreateImportableEncryptedWalletPostRaw(requestParameters: ApiWalletCreateImportableEncryptedWalletPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Wallet/create-importable-encrypted-wallet`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWalletRequestToJSON(requestParameters['createWalletRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     */
    async apiWalletCreateImportableEncryptedWalletPost(requestParameters: ApiWalletCreateImportableEncryptedWalletPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletCreateImportableEncryptedWalletPostRaw(requestParameters, initOverrides);
    }

    /**
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     */
    async apiWalletCreateImportableWalletPostRaw(requestParameters: ApiWalletCreateImportableWalletPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Wallet/create-importable-wallet`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWalletRequestToJSON(requestParameters['createWalletRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     */
    async apiWalletCreateImportableWalletPost(requestParameters: ApiWalletCreateImportableWalletPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletCreateImportableWalletPostRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     */
    async apiWalletCreatePostRaw(requestParameters: ApiWalletCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Wallet/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWalletRequestToJSON(requestParameters['createWalletRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     */
    async apiWalletCreatePost(requestParameters: ApiWalletCreatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletCreatePostRaw(requestParameters, initOverrides);
    }

    /**
     * Get the details of a wallet.
     */
    async apiWalletDetailsGetRaw(requestParameters: ApiWalletDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            queryParameters['nodeUrlOrApiAccessKey'] = requestParameters['nodeUrlOrApiAccessKey'];
        }

        if (requestParameters['walletName'] != null) {
            queryParameters['walletName'] = requestParameters['walletName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Wallet/details`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the details of a wallet.
     */
    async apiWalletDetailsGet(requestParameters: ApiWalletDetailsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletDetailsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     */
    async apiWalletEncryptWalletPostRaw(requestParameters: ApiWalletEncryptWalletPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }


        let urlPath = `/api/Wallet/encrypt-wallet`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EncryptWalletDtoToJSON(requestParameters['encryptWalletDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     */
    async apiWalletEncryptWalletPost(requestParameters: ApiWalletEncryptWalletPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletEncryptWalletPostRaw(requestParameters, initOverrides);
    }

    /**
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     */
    async apiWalletImportWalletPostRaw(requestParameters: ApiWalletImportWalletPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Wallet/import-wallet`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportWalletdtoToJSON(requestParameters['importWalletdto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     */
    async apiWalletImportWalletPost(requestParameters: ApiWalletImportWalletPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletImportWalletPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get the official address of a wallet.
     */
    async apiWalletOfficialAddressGetRaw(requestParameters: ApiWalletOfficialAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }


        let urlPath = `/api/Wallet/official-address`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the official address of a wallet.
     */
    async apiWalletOfficialAddressGet(requestParameters: ApiWalletOfficialAddressGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletOfficialAddressGetRaw(requestParameters, initOverrides);
    }

    /**
     * Set the mnemonics of a wallet.
     */
    async apiWalletSetWalletMnemonicsPostRaw(requestParameters: ApiWalletSetWalletMnemonicsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }

        if (requestParameters['encryptedPassphrase'] != null) {
            headerParameters['encryptedPassphrase'] = String(requestParameters['encryptedPassphrase']);
        }


        let urlPath = `/api/Wallet/set-wallet-mnemonics`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetWalletMnemonicsdtoToJSON(requestParameters['setWalletMnemonicsdto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set the mnemonics of a wallet.
     */
    async apiWalletSetWalletMnemonicsPost(requestParameters: ApiWalletSetWalletMnemonicsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletSetWalletMnemonicsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Sign a message using the wallet.
     */
    async apiWalletSignWalletMessagePostRaw(requestParameters: ApiWalletSignWalletMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }


        let urlPath = `/api/Wallet/sign-wallet-message`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignMessageUsingWalletdtoToJSON(requestParameters['signMessageUsingWalletdto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sign a message using the wallet.
     */
    async apiWalletSignWalletMessagePost(requestParameters: ApiWalletSignWalletMessagePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletSignWalletMessagePostRaw(requestParameters, initOverrides);
    }

    /**
     * Get the transactions of a wallet.
     */
    async apiWalletTransactionsGetRaw(requestParameters: ApiWalletTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }


        let urlPath = `/api/Wallet/transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the transactions of a wallet.
     */
    async apiWalletTransactionsGet(requestParameters: ApiWalletTransactionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletTransactionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get the balance of a specific address in a wallet.
     */
    async apiWalletWalletAddressBalanceGetRaw(requestParameters: ApiWalletWalletAddressBalanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['address'] != null) {
            queryParameters['address'] = requestParameters['address'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['walletName'] != null) {
            headerParameters['walletName'] = String(requestParameters['walletName']);
        }


        let urlPath = `/api/Wallet/wallet-address-balance`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the balance of a specific address in a wallet.
     */
    async apiWalletWalletAddressBalanceGet(requestParameters: ApiWalletWalletAddressBalanceGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletWalletAddressBalanceGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get the transactions of a specific address in a wallet.
     */
    async apiWalletWalletAddressTransactionsGetRaw(requestParameters: ApiWalletWalletAddressTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['walletName'] != null) {
            queryParameters['walletName'] = requestParameters['walletName'];
        }

        if (requestParameters['address'] != null) {
            queryParameters['address'] = requestParameters['address'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }


        let urlPath = `/api/Wallet/wallet-address-transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the transactions of a specific address in a wallet.
     */
    async apiWalletWalletAddressTransactionsGet(requestParameters: ApiWalletWalletAddressTransactionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletWalletAddressTransactionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * default addresss of a wallet without private key
     */
    async apiWalletWalletDefaultAddressGetRaw(requestParameters: ApiWalletWalletDefaultAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['addressType'] != null) {
            queryParameters['addressType'] = requestParameters['addressType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['mnemonics'] != null) {
            headerParameters['mnemonics'] = String(requestParameters['mnemonics']);
        }


        let urlPath = `/api/Wallet/wallet-default-address`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * default addresss of a wallet without private key
     */
    async apiWalletWalletDefaultAddressGet(requestParameters: ApiWalletWalletDefaultAddressGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletWalletDefaultAddressGetRaw(requestParameters, initOverrides);
    }

    /**
     * default addresss of a wallet with private key
     */
    async apiWalletWalletDefaultAddressV2GetRaw(requestParameters: ApiWalletWalletDefaultAddressV2GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['addressType'] != null) {
            queryParameters['addressType'] = requestParameters['addressType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['nodeUrlOrApiAccessKey'] != null) {
            headerParameters['nodeUrlOrApiAccessKey'] = String(requestParameters['nodeUrlOrApiAccessKey']);
        }

        if (requestParameters['mnemonics'] != null) {
            headerParameters['mnemonics'] = String(requestParameters['mnemonics']);
        }


        let urlPath = `/api/Wallet/wallet-default-address-v2`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * default addresss of a wallet with private key
     */
    async apiWalletWalletDefaultAddressV2Get(requestParameters: ApiWalletWalletDefaultAddressV2GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWalletWalletDefaultAddressV2GetRaw(requestParameters, initOverrides);
    }

}
