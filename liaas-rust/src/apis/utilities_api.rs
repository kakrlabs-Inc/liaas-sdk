/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`api_utilities_get_blockchain_otp_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiUtilitiesGetBlockchainOtpGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_utilities_verify_otp_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiUtilitiesVerifyOtpPostError {
    UnknownValue(serde_json::Value),
}


pub async fn api_utilities_get_blockchain_otp_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, signature: Option<&str>) -> Result<(), Error<ApiUtilitiesGetBlockchainOtpGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_signature = signature;

    let uri_str = format!("{}/api/Utilities/get-blockchain-otp", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_signature {
        req_builder = req_builder.header("signature", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiUtilitiesGetBlockchainOtpGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_utilities_verify_otp_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, verify_ot_pdto: Option<models::VerifyOtPdto>) -> Result<(), Error<ApiUtilitiesVerifyOtpPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_verify_ot_pdto = verify_ot_pdto;

    let uri_str = format!("{}/api/Utilities/verify-otp", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_verify_ot_pdto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiUtilitiesVerifyOtpPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

