/*
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlocksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BlocksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlocksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiBlocksBlockHeaderGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockheight  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBlocksBlockHeaderGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockheight, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Blocks/block-header";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blockheight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockheight", blockheight));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBlocksBlockHeaderGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockheight, final ApiCallback _callback) throws ApiException {
        return apiBlocksBlockHeaderGetCall(nodeUrlOrApiAccessKey, blockheight, _callback);

    }

    /**
     * Get block header information
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockheight  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiBlocksBlockHeaderGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockheight) throws ApiException {
        apiBlocksBlockHeaderGetWithHttpInfo(nodeUrlOrApiAccessKey, blockheight);
    }

    /**
     * Get block header information
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockheight  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiBlocksBlockHeaderGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockheight) throws ApiException {
        okhttp3.Call localVarCall = apiBlocksBlockHeaderGetValidateBeforeCall(nodeUrlOrApiAccessKey, blockheight, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get block header information (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockheight  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBlocksBlockHeaderGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockheight, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBlocksBlockHeaderGetValidateBeforeCall(nodeUrlOrApiAccessKey, blockheight, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiBlocksBlockStatGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockheight  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBlocksBlockStatGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockheight, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Blocks/block-stat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blockheight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockheight", blockheight));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBlocksBlockStatGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockheight, final ApiCallback _callback) throws ApiException {
        return apiBlocksBlockStatGetCall(nodeUrlOrApiAccessKey, blockheight, _callback);

    }

    /**
     * Get block statistics
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockheight  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiBlocksBlockStatGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockheight) throws ApiException {
        apiBlocksBlockStatGetWithHttpInfo(nodeUrlOrApiAccessKey, blockheight);
    }

    /**
     * Get block statistics
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockheight  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiBlocksBlockStatGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockheight) throws ApiException {
        okhttp3.Call localVarCall = apiBlocksBlockStatGetValidateBeforeCall(nodeUrlOrApiAccessKey, blockheight, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get block statistics (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockheight  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBlocksBlockStatGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockheight, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBlocksBlockStatGetValidateBeforeCall(nodeUrlOrApiAccessKey, blockheight, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiBlocksBlockTransactionGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockhash  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBlocksBlockTransactionGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockhash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Blocks/block-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blockhash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockhash", blockhash));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBlocksBlockTransactionGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockhash, final ApiCallback _callback) throws ApiException {
        return apiBlocksBlockTransactionGetCall(nodeUrlOrApiAccessKey, blockhash, _callback);

    }

    /**
     * Get block Transactions in details
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockhash  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiBlocksBlockTransactionGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockhash) throws ApiException {
        apiBlocksBlockTransactionGetWithHttpInfo(nodeUrlOrApiAccessKey, blockhash);
    }

    /**
     * Get block Transactions in details
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockhash  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiBlocksBlockTransactionGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockhash) throws ApiException {
        okhttp3.Call localVarCall = apiBlocksBlockTransactionGetValidateBeforeCall(nodeUrlOrApiAccessKey, blockhash, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get block Transactions in details (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param blockhash  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBlocksBlockTransactionGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String blockhash, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBlocksBlockTransactionGetValidateBeforeCall(nodeUrlOrApiAccessKey, blockhash, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiBlocksBlockchainInfoGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBlocksBlockchainInfoGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Blocks/blockchain-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBlocksBlockchainInfoGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, final ApiCallback _callback) throws ApiException {
        return apiBlocksBlockchainInfoGetCall(nodeUrlOrApiAccessKey, _callback);

    }

    /**
     * Get Litcoin Block information
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiBlocksBlockchainInfoGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey) throws ApiException {
        apiBlocksBlockchainInfoGetWithHttpInfo(nodeUrlOrApiAccessKey);
    }

    /**
     * Get Litcoin Block information
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiBlocksBlockchainInfoGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey) throws ApiException {
        okhttp3.Call localVarCall = apiBlocksBlockchainInfoGetValidateBeforeCall(nodeUrlOrApiAccessKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Litcoin Block information (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBlocksBlockchainInfoGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBlocksBlockchainInfoGetValidateBeforeCall(nodeUrlOrApiAccessKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
