/**
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangePassphrasedto from '../model/ChangePassphrasedto';
import CreateWalletRequest from '../model/CreateWalletRequest';
import EncryptWalletDto from '../model/EncryptWalletDto';
import ImportWalletdto from '../model/ImportWalletdto';
import SetWalletMnemonicsdto from '../model/SetWalletMnemonicsdto';
import SignMessageUsingWalletdto from '../model/SignMessageUsingWalletdto';

/**
* Wallet service.
* @module api/WalletApi
* @version 1.0
*/
export default class WalletApi {

    /**
    * Constructs a new WalletApi. 
    * @alias module:api/WalletApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiWalletAddressesGet operation.
     * @callback module:api/WalletApi~apiWalletAddressesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all addresses of a wallet.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {module:api/WalletApi~apiWalletAddressesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletAddressesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletBalanceGet operation.
     * @callback module:api/WalletApi~apiWalletBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the balance of a wallet.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {module:api/WalletApi~apiWalletBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletBalanceGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletChangePassphrasePost operation.
     * @callback module:api/WalletApi~apiWalletChangePassphrasePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the passphrase of a wallet.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {module:model/ChangePassphrasedto} [changePassphrasedto] 
     * @param {module:api/WalletApi~apiWalletChangePassphrasePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletChangePassphrasePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['changePassphrasedto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/change-passphrase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletCreateEncryptedWalletPost operation.
     * @callback module:api/WalletApi~apiWalletCreateEncryptedWalletPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {module:model/CreateWalletRequest} [createWalletRequest] 
     * @param {module:api/WalletApi~apiWalletCreateEncryptedWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletCreateEncryptedWalletPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createWalletRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/create-encrypted-wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletCreateImportableEncryptedWalletPost operation.
     * @callback module:api/WalletApi~apiWalletCreateImportableEncryptedWalletPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {module:model/CreateWalletRequest} [createWalletRequest] 
     * @param {module:api/WalletApi~apiWalletCreateImportableEncryptedWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletCreateImportableEncryptedWalletPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createWalletRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/create-importable-encrypted-wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletCreateImportableWalletPost operation.
     * @callback module:api/WalletApi~apiWalletCreateImportableWalletPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {module:model/CreateWalletRequest} [createWalletRequest] 
     * @param {module:api/WalletApi~apiWalletCreateImportableWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletCreateImportableWalletPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createWalletRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/create-importable-wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletCreatePost operation.
     * @callback module:api/WalletApi~apiWalletCreatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {module:model/CreateWalletRequest} [createWalletRequest] 
     * @param {module:api/WalletApi~apiWalletCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletCreatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createWalletRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletDetailsGet operation.
     * @callback module:api/WalletApi~apiWalletDetailsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a wallet.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {module:api/WalletApi~apiWalletDetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletDetailsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletEncryptWalletPost operation.
     * @callback module:api/WalletApi~apiWalletEncryptWalletPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {module:model/EncryptWalletDto} [encryptWalletDto] 
     * @param {module:api/WalletApi~apiWalletEncryptWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletEncryptWalletPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['encryptWalletDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/encrypt-wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletImportWalletPost operation.
     * @callback module:api/WalletApi~apiWalletImportWalletPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {module:model/ImportWalletdto} [importWalletdto] 
     * @param {module:api/WalletApi~apiWalletImportWalletPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletImportWalletPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['importWalletdto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/import-wallet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletOfficialAddressGet operation.
     * @callback module:api/WalletApi~apiWalletOfficialAddressGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the official address of a wallet.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {module:api/WalletApi~apiWalletOfficialAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletOfficialAddressGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/official-address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletSetWalletMnemonicsPost operation.
     * @callback module:api/WalletApi~apiWalletSetWalletMnemonicsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the mnemonics of a wallet.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {String} [encryptedPassphrase] 
     * @param {module:model/SetWalletMnemonicsdto} [setWalletMnemonicsdto] 
     * @param {module:api/WalletApi~apiWalletSetWalletMnemonicsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletSetWalletMnemonicsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['setWalletMnemonicsdto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName'],
        'encryptedPassphrase': opts['encryptedPassphrase']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/set-wallet-mnemonics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletSignWalletMessagePost operation.
     * @callback module:api/WalletApi~apiWalletSignWalletMessagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign a message using the wallet.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {module:model/SignMessageUsingWalletdto} [signMessageUsingWalletdto] 
     * @param {module:api/WalletApi~apiWalletSignWalletMessagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletSignWalletMessagePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['signMessageUsingWalletdto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/sign-wallet-message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletTransactionsGet operation.
     * @callback module:api/WalletApi~apiWalletTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the transactions of a wallet.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {Number} [skip = 10)] 
     * @param {Number} [count = 1)] 
     * @param {module:api/WalletApi~apiWalletTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletTransactionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'count': opts['count']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletWalletAddressBalanceGet operation.
     * @callback module:api/WalletApi~apiWalletWalletAddressBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the balance of a specific address in a wallet.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {String} [address] 
     * @param {module:api/WalletApi~apiWalletWalletAddressBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletWalletAddressBalanceGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'walletName': opts['walletName']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/wallet-address-balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletWalletAddressTransactionsGet operation.
     * @callback module:api/WalletApi~apiWalletWalletAddressTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the transactions of a specific address in a wallet.
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [walletName] 
     * @param {String} [address] 
     * @param {module:api/WalletApi~apiWalletWalletAddressTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletWalletAddressTransactionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'walletName': opts['walletName'],
        'address': opts['address']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/wallet-address-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletWalletDefaultAddressGet operation.
     * @callback module:api/WalletApi~apiWalletWalletDefaultAddressGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * default addresss of a wallet without private key
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [mnemonics] 
     * @param {Number} [addressType = 1)] 
     * @param {module:api/WalletApi~apiWalletWalletDefaultAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletWalletDefaultAddressGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'addressType': opts['addressType']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'mnemonics': opts['mnemonics']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/wallet-default-address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletWalletDefaultAddressV2Get operation.
     * @callback module:api/WalletApi~apiWalletWalletDefaultAddressV2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * default addresss of a wallet with private key
     * @param {Object} opts Optional parameters
     * @param {String} [nodeUrlOrApiAccessKey] 
     * @param {String} [mnemonics] 
     * @param {Number} [addressType = 1)] 
     * @param {module:api/WalletApi~apiWalletWalletDefaultAddressV2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWalletWalletDefaultAddressV2Get(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'addressType': opts['addressType']
      };
      let headerParams = {
        'nodeUrlOrApiAccessKey': opts['nodeUrlOrApiAccessKey'],
        'mnemonics': opts['mnemonics']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Wallet/wallet-default-address-v2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
