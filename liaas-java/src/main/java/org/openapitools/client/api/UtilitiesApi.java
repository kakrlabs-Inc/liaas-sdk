/*
 * KakrLabs-SDK-Creator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.VerifyOTPdto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UtilitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UtilitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UtilitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiUtilitiesGetBlockchainOtpGet
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param signature  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUtilitiesGetBlockchainOtpGetCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Utilities/get-blockchain-otp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        if (signature != null) {
            localVarHeaderParams.put("signature", localVarApiClient.parameterToString(signature));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUtilitiesGetBlockchainOtpGetValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String signature, final ApiCallback _callback) throws ApiException {
        return apiUtilitiesGetBlockchainOtpGetCall(nodeUrlOrApiAccessKey, signature, _callback);

    }

    /**
     * Gets OTP using the blockchain information using the signature of a signed message.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param signature  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiUtilitiesGetBlockchainOtpGet(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String signature) throws ApiException {
        apiUtilitiesGetBlockchainOtpGetWithHttpInfo(nodeUrlOrApiAccessKey, signature);
    }

    /**
     * Gets OTP using the blockchain information using the signature of a signed message.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param signature  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiUtilitiesGetBlockchainOtpGetWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String signature) throws ApiException {
        okhttp3.Call localVarCall = apiUtilitiesGetBlockchainOtpGetValidateBeforeCall(nodeUrlOrApiAccessKey, signature, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets OTP using the blockchain information using the signature of a signed message. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param signature  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUtilitiesGetBlockchainOtpGetAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable String signature, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUtilitiesGetBlockchainOtpGetValidateBeforeCall(nodeUrlOrApiAccessKey, signature, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUtilitiesVerifyOtpPost
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param verifyOTPdto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUtilitiesVerifyOtpPostCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable VerifyOTPdto verifyOTPdto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyOTPdto;

        // create path and map variables
        String localVarPath = "/api/Utilities/verify-otp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (nodeUrlOrApiAccessKey != null) {
            localVarHeaderParams.put("nodeUrlOrApiAccessKey", localVarApiClient.parameterToString(nodeUrlOrApiAccessKey));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUtilitiesVerifyOtpPostValidateBeforeCall(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable VerifyOTPdto verifyOTPdto, final ApiCallback _callback) throws ApiException {
        return apiUtilitiesVerifyOtpPostCall(nodeUrlOrApiAccessKey, verifyOTPdto, _callback);

    }

    /**
     * Verifies the OTP on the blockchain.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param verifyOTPdto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiUtilitiesVerifyOtpPost(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable VerifyOTPdto verifyOTPdto) throws ApiException {
        apiUtilitiesVerifyOtpPostWithHttpInfo(nodeUrlOrApiAccessKey, verifyOTPdto);
    }

    /**
     * Verifies the OTP on the blockchain.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param verifyOTPdto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiUtilitiesVerifyOtpPostWithHttpInfo(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable VerifyOTPdto verifyOTPdto) throws ApiException {
        okhttp3.Call localVarCall = apiUtilitiesVerifyOtpPostValidateBeforeCall(nodeUrlOrApiAccessKey, verifyOTPdto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Verifies the OTP on the blockchain. (asynchronously)
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param verifyOTPdto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUtilitiesVerifyOtpPostAsync(@javax.annotation.Nullable String nodeUrlOrApiAccessKey, @javax.annotation.Nullable VerifyOTPdto verifyOTPdto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUtilitiesVerifyOtpPostValidateBeforeCall(nodeUrlOrApiAccessKey, verifyOTPdto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
