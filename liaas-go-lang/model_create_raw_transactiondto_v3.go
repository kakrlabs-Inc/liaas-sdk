/*
KakrLabs-SDK-Creator

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateRawTransactiondtoV3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRawTransactiondtoV3{}

// CreateRawTransactiondtoV3 struct for CreateRawTransactiondtoV3
type CreateRawTransactiondtoV3 struct {
	SenderAddress string `json:"senderAddress"`
	ServiceFeeAddress string `json:"serviceFeeAddress"`
	RecipientAddress string `json:"recipientAddress"`
	ServiceFeeAmount float32 `json:"serviceFeeAmount"`
	Amount float32 `json:"amount"`
}

type _CreateRawTransactiondtoV3 CreateRawTransactiondtoV3

// NewCreateRawTransactiondtoV3 instantiates a new CreateRawTransactiondtoV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRawTransactiondtoV3(senderAddress string, serviceFeeAddress string, recipientAddress string, serviceFeeAmount float32, amount float32) *CreateRawTransactiondtoV3 {
	this := CreateRawTransactiondtoV3{}
	this.SenderAddress = senderAddress
	this.ServiceFeeAddress = serviceFeeAddress
	this.RecipientAddress = recipientAddress
	this.ServiceFeeAmount = serviceFeeAmount
	this.Amount = amount
	return &this
}

// NewCreateRawTransactiondtoV3WithDefaults instantiates a new CreateRawTransactiondtoV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRawTransactiondtoV3WithDefaults() *CreateRawTransactiondtoV3 {
	this := CreateRawTransactiondtoV3{}
	return &this
}

// GetSenderAddress returns the SenderAddress field value
func (o *CreateRawTransactiondtoV3) GetSenderAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SenderAddress
}

// GetSenderAddressOk returns a tuple with the SenderAddress field value
// and a boolean to check if the value has been set.
func (o *CreateRawTransactiondtoV3) GetSenderAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderAddress, true
}

// SetSenderAddress sets field value
func (o *CreateRawTransactiondtoV3) SetSenderAddress(v string) {
	o.SenderAddress = v
}

// GetServiceFeeAddress returns the ServiceFeeAddress field value
func (o *CreateRawTransactiondtoV3) GetServiceFeeAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceFeeAddress
}

// GetServiceFeeAddressOk returns a tuple with the ServiceFeeAddress field value
// and a boolean to check if the value has been set.
func (o *CreateRawTransactiondtoV3) GetServiceFeeAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceFeeAddress, true
}

// SetServiceFeeAddress sets field value
func (o *CreateRawTransactiondtoV3) SetServiceFeeAddress(v string) {
	o.ServiceFeeAddress = v
}

// GetRecipientAddress returns the RecipientAddress field value
func (o *CreateRawTransactiondtoV3) GetRecipientAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecipientAddress
}

// GetRecipientAddressOk returns a tuple with the RecipientAddress field value
// and a boolean to check if the value has been set.
func (o *CreateRawTransactiondtoV3) GetRecipientAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipientAddress, true
}

// SetRecipientAddress sets field value
func (o *CreateRawTransactiondtoV3) SetRecipientAddress(v string) {
	o.RecipientAddress = v
}

// GetServiceFeeAmount returns the ServiceFeeAmount field value
func (o *CreateRawTransactiondtoV3) GetServiceFeeAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ServiceFeeAmount
}

// GetServiceFeeAmountOk returns a tuple with the ServiceFeeAmount field value
// and a boolean to check if the value has been set.
func (o *CreateRawTransactiondtoV3) GetServiceFeeAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceFeeAmount, true
}

// SetServiceFeeAmount sets field value
func (o *CreateRawTransactiondtoV3) SetServiceFeeAmount(v float32) {
	o.ServiceFeeAmount = v
}

// GetAmount returns the Amount field value
func (o *CreateRawTransactiondtoV3) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CreateRawTransactiondtoV3) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CreateRawTransactiondtoV3) SetAmount(v float32) {
	o.Amount = v
}

func (o CreateRawTransactiondtoV3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRawTransactiondtoV3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["senderAddress"] = o.SenderAddress
	toSerialize["serviceFeeAddress"] = o.ServiceFeeAddress
	toSerialize["recipientAddress"] = o.RecipientAddress
	toSerialize["serviceFeeAmount"] = o.ServiceFeeAmount
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *CreateRawTransactiondtoV3) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"senderAddress",
		"serviceFeeAddress",
		"recipientAddress",
		"serviceFeeAmount",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRawTransactiondtoV3 := _CreateRawTransactiondtoV3{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateRawTransactiondtoV3)

	if err != nil {
		return err
	}

	*o = CreateRawTransactiondtoV3(varCreateRawTransactiondtoV3)

	return err
}

type NullableCreateRawTransactiondtoV3 struct {
	value *CreateRawTransactiondtoV3
	isSet bool
}

func (v NullableCreateRawTransactiondtoV3) Get() *CreateRawTransactiondtoV3 {
	return v.value
}

func (v *NullableCreateRawTransactiondtoV3) Set(val *CreateRawTransactiondtoV3) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRawTransactiondtoV3) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRawTransactiondtoV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRawTransactiondtoV3(val *CreateRawTransactiondtoV3) *NullableCreateRawTransactiondtoV3 {
	return &NullableCreateRawTransactiondtoV3{value: val, isSet: true}
}

func (v NullableCreateRawTransactiondtoV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRawTransactiondtoV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


