/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.ChangePassphrasedto
import org.openapitools.client.models.CreateWalletRequest
import org.openapitools.client.models.EncryptWalletDto
import org.openapitools.client.models.ImportWalletdto
import org.openapitools.client.models.SetWalletMnemonicsdto
import org.openapitools.client.models.SignMessageUsingWalletdto

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class WalletApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * GET /api/Wallet/addresses
     * Get all addresses of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletAddressesGet(nodeUrlOrApiAccessKey: kotlin.String? = null, walletName: kotlin.String? = null) : Unit {
        val localVarResponse = apiWalletAddressesGetWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/Wallet/addresses
     * Get all addresses of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletAddressesGetWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletAddressesGetRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletAddressesGet
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return RequestConfig
     */
    fun apiWalletAddressesGetRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        walletName?.apply { localVariableHeaders["walletName"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/Wallet/addresses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/Wallet/balance
     * Get the balance of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletBalanceGet(nodeUrlOrApiAccessKey: kotlin.String? = null, walletName: kotlin.String? = null) : Unit {
        val localVarResponse = apiWalletBalanceGetWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/Wallet/balance
     * Get the balance of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletBalanceGetWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletBalanceGetRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletBalanceGet
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return RequestConfig
     */
    fun apiWalletBalanceGetRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        walletName?.apply { localVariableHeaders["walletName"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/Wallet/balance",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/Wallet/change-passphrase
     * Change the passphrase of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param changePassphrasedto  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletChangePassphrasePost(nodeUrlOrApiAccessKey: kotlin.String? = null, changePassphrasedto: ChangePassphrasedto? = null) : Unit {
        val localVarResponse = apiWalletChangePassphrasePostWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, changePassphrasedto = changePassphrasedto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/Wallet/change-passphrase
     * Change the passphrase of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param changePassphrasedto  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletChangePassphrasePostWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, changePassphrasedto: ChangePassphrasedto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletChangePassphrasePostRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, changePassphrasedto = changePassphrasedto)

        return request<ChangePassphrasedto, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletChangePassphrasePost
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param changePassphrasedto  (optional)
     * @return RequestConfig
     */
    fun apiWalletChangePassphrasePostRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, changePassphrasedto: ChangePassphrasedto?) : RequestConfig<ChangePassphrasedto> {
        val localVariableBody = changePassphrasedto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/Wallet/change-passphrase",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/Wallet/create-encrypted-wallet
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletCreateEncryptedWalletPost(nodeUrlOrApiAccessKey: kotlin.String? = null, createWalletRequest: CreateWalletRequest? = null) : Unit {
        val localVarResponse = apiWalletCreateEncryptedWalletPostWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, createWalletRequest = createWalletRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/Wallet/create-encrypted-wallet
     * Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletCreateEncryptedWalletPostWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, createWalletRequest: CreateWalletRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletCreateEncryptedWalletPostRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, createWalletRequest = createWalletRequest)

        return request<CreateWalletRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletCreateEncryptedWalletPost
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return RequestConfig
     */
    fun apiWalletCreateEncryptedWalletPostRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, createWalletRequest: CreateWalletRequest?) : RequestConfig<CreateWalletRequest> {
        val localVariableBody = createWalletRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/Wallet/create-encrypted-wallet",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/Wallet/create-importable-encrypted-wallet
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletCreateImportableEncryptedWalletPost(nodeUrlOrApiAccessKey: kotlin.String? = null, createWalletRequest: CreateWalletRequest? = null) : Unit {
        val localVarResponse = apiWalletCreateImportableEncryptedWalletPostWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, createWalletRequest = createWalletRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/Wallet/create-importable-encrypted-wallet
     * Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletCreateImportableEncryptedWalletPostWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, createWalletRequest: CreateWalletRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletCreateImportableEncryptedWalletPostRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, createWalletRequest = createWalletRequest)

        return request<CreateWalletRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletCreateImportableEncryptedWalletPost
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return RequestConfig
     */
    fun apiWalletCreateImportableEncryptedWalletPostRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, createWalletRequest: CreateWalletRequest?) : RequestConfig<CreateWalletRequest> {
        val localVariableBody = createWalletRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/Wallet/create-importable-encrypted-wallet",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/Wallet/create-importable-wallet
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletCreateImportableWalletPost(nodeUrlOrApiAccessKey: kotlin.String? = null, createWalletRequest: CreateWalletRequest? = null) : Unit {
        val localVarResponse = apiWalletCreateImportableWalletPostWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, createWalletRequest = createWalletRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/Wallet/create-importable-wallet
     * Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletCreateImportableWalletPostWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, createWalletRequest: CreateWalletRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletCreateImportableWalletPostRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, createWalletRequest = createWalletRequest)

        return request<CreateWalletRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletCreateImportableWalletPost
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return RequestConfig
     */
    fun apiWalletCreateImportableWalletPostRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, createWalletRequest: CreateWalletRequest?) : RequestConfig<CreateWalletRequest> {
        val localVariableBody = createWalletRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/Wallet/create-importable-wallet",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/Wallet/create
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletCreatePost(nodeUrlOrApiAccessKey: kotlin.String? = null, createWalletRequest: CreateWalletRequest? = null) : Unit {
        val localVarResponse = apiWalletCreatePostWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, createWalletRequest = createWalletRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/Wallet/create
     * Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletCreatePostWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, createWalletRequest: CreateWalletRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletCreatePostRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, createWalletRequest = createWalletRequest)

        return request<CreateWalletRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletCreatePost
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param createWalletRequest  (optional)
     * @return RequestConfig
     */
    fun apiWalletCreatePostRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, createWalletRequest: CreateWalletRequest?) : RequestConfig<CreateWalletRequest> {
        val localVariableBody = createWalletRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/Wallet/create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/Wallet/details
     * Get the details of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletDetailsGet(nodeUrlOrApiAccessKey: kotlin.String? = null, walletName: kotlin.String? = null) : Unit {
        val localVarResponse = apiWalletDetailsGetWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/Wallet/details
     * Get the details of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletDetailsGetWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletDetailsGetRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletDetailsGet
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return RequestConfig
     */
    fun apiWalletDetailsGetRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (nodeUrlOrApiAccessKey != null) {
                    put("nodeUrlOrApiAccessKey", listOf(nodeUrlOrApiAccessKey.toString()))
                }
                if (walletName != null) {
                    put("walletName", listOf(walletName.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/Wallet/details",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/Wallet/encrypt-wallet
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptWalletDto  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletEncryptWalletPost(nodeUrlOrApiAccessKey: kotlin.String? = null, walletName: kotlin.String? = null, encryptWalletDto: EncryptWalletDto? = null) : Unit {
        val localVarResponse = apiWalletEncryptWalletPostWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, encryptWalletDto = encryptWalletDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/Wallet/encrypt-wallet
     * Encrypt a wallet. this wallet created  cannot be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptWalletDto  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletEncryptWalletPostWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, encryptWalletDto: EncryptWalletDto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletEncryptWalletPostRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, encryptWalletDto = encryptWalletDto)

        return request<EncryptWalletDto, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletEncryptWalletPost
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptWalletDto  (optional)
     * @return RequestConfig
     */
    fun apiWalletEncryptWalletPostRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, encryptWalletDto: EncryptWalletDto?) : RequestConfig<EncryptWalletDto> {
        val localVariableBody = encryptWalletDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        walletName?.apply { localVariableHeaders["walletName"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/Wallet/encrypt-wallet",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/Wallet/import-wallet
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param importWalletdto  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletImportWalletPost(nodeUrlOrApiAccessKey: kotlin.String? = null, importWalletdto: ImportWalletdto? = null) : Unit {
        val localVarResponse = apiWalletImportWalletPostWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, importWalletdto = importWalletdto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/Wallet/import-wallet
     * Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param importWalletdto  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletImportWalletPostWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, importWalletdto: ImportWalletdto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletImportWalletPostRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, importWalletdto = importWalletdto)

        return request<ImportWalletdto, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletImportWalletPost
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param importWalletdto  (optional)
     * @return RequestConfig
     */
    fun apiWalletImportWalletPostRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, importWalletdto: ImportWalletdto?) : RequestConfig<ImportWalletdto> {
        val localVariableBody = importWalletdto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/Wallet/import-wallet",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/Wallet/official-address
     * Get the official address of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletOfficialAddressGet(nodeUrlOrApiAccessKey: kotlin.String? = null, walletName: kotlin.String? = null) : Unit {
        val localVarResponse = apiWalletOfficialAddressGetWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/Wallet/official-address
     * Get the official address of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletOfficialAddressGetWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletOfficialAddressGetRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletOfficialAddressGet
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @return RequestConfig
     */
    fun apiWalletOfficialAddressGetRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        walletName?.apply { localVariableHeaders["walletName"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/Wallet/official-address",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/Wallet/set-wallet-mnemonics
     * Set the mnemonics of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param setWalletMnemonicsdto  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletSetWalletMnemonicsPost(nodeUrlOrApiAccessKey: kotlin.String? = null, walletName: kotlin.String? = null, encryptedPassphrase: kotlin.String? = null, setWalletMnemonicsdto: SetWalletMnemonicsdto? = null) : Unit {
        val localVarResponse = apiWalletSetWalletMnemonicsPostWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, encryptedPassphrase = encryptedPassphrase, setWalletMnemonicsdto = setWalletMnemonicsdto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/Wallet/set-wallet-mnemonics
     * Set the mnemonics of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param setWalletMnemonicsdto  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletSetWalletMnemonicsPostWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, encryptedPassphrase: kotlin.String?, setWalletMnemonicsdto: SetWalletMnemonicsdto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletSetWalletMnemonicsPostRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, encryptedPassphrase = encryptedPassphrase, setWalletMnemonicsdto = setWalletMnemonicsdto)

        return request<SetWalletMnemonicsdto, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletSetWalletMnemonicsPost
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param encryptedPassphrase  (optional)
     * @param setWalletMnemonicsdto  (optional)
     * @return RequestConfig
     */
    fun apiWalletSetWalletMnemonicsPostRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, encryptedPassphrase: kotlin.String?, setWalletMnemonicsdto: SetWalletMnemonicsdto?) : RequestConfig<SetWalletMnemonicsdto> {
        val localVariableBody = setWalletMnemonicsdto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        walletName?.apply { localVariableHeaders["walletName"] = this.toString() }
        encryptedPassphrase?.apply { localVariableHeaders["encryptedPassphrase"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/Wallet/set-wallet-mnemonics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /api/Wallet/sign-wallet-message
     * Sign a message using the wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signMessageUsingWalletdto  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletSignWalletMessagePost(nodeUrlOrApiAccessKey: kotlin.String? = null, walletName: kotlin.String? = null, signMessageUsingWalletdto: SignMessageUsingWalletdto? = null) : Unit {
        val localVarResponse = apiWalletSignWalletMessagePostWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, signMessageUsingWalletdto = signMessageUsingWalletdto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/Wallet/sign-wallet-message
     * Sign a message using the wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signMessageUsingWalletdto  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletSignWalletMessagePostWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, signMessageUsingWalletdto: SignMessageUsingWalletdto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletSignWalletMessagePostRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, signMessageUsingWalletdto = signMessageUsingWalletdto)

        return request<SignMessageUsingWalletdto, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletSignWalletMessagePost
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param signMessageUsingWalletdto  (optional)
     * @return RequestConfig
     */
    fun apiWalletSignWalletMessagePostRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, signMessageUsingWalletdto: SignMessageUsingWalletdto?) : RequestConfig<SignMessageUsingWalletdto> {
        val localVariableBody = signMessageUsingWalletdto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        walletName?.apply { localVariableHeaders["walletName"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/Wallet/sign-wallet-message",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/Wallet/transactions
     * Get the transactions of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param skip  (optional, default to 10)
     * @param count  (optional, default to 1)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletTransactionsGet(nodeUrlOrApiAccessKey: kotlin.String? = null, walletName: kotlin.String? = null, skip: kotlin.Int? = 10, count: kotlin.Int? = 1) : Unit {
        val localVarResponse = apiWalletTransactionsGetWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, skip = skip, count = count)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/Wallet/transactions
     * Get the transactions of a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param skip  (optional, default to 10)
     * @param count  (optional, default to 1)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletTransactionsGetWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, skip: kotlin.Int?, count: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletTransactionsGetRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, skip = skip, count = count)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletTransactionsGet
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param skip  (optional, default to 10)
     * @param count  (optional, default to 1)
     * @return RequestConfig
     */
    fun apiWalletTransactionsGetRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, skip: kotlin.Int?, count: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (skip != null) {
                    put("skip", listOf(skip.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        walletName?.apply { localVariableHeaders["walletName"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/Wallet/transactions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/Wallet/wallet-address-balance
     * Get the balance of a specific address in a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletWalletAddressBalanceGet(nodeUrlOrApiAccessKey: kotlin.String? = null, walletName: kotlin.String? = null, address: kotlin.String? = null) : Unit {
        val localVarResponse = apiWalletWalletAddressBalanceGetWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, address = address)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/Wallet/wallet-address-balance
     * Get the balance of a specific address in a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletWalletAddressBalanceGetWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, address: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletWalletAddressBalanceGetRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, address = address)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletWalletAddressBalanceGet
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @return RequestConfig
     */
    fun apiWalletWalletAddressBalanceGetRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, address: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (address != null) {
                    put("address", listOf(address.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        walletName?.apply { localVariableHeaders["walletName"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/Wallet/wallet-address-balance",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/Wallet/wallet-address-transactions
     * Get the transactions of a specific address in a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletWalletAddressTransactionsGet(nodeUrlOrApiAccessKey: kotlin.String? = null, walletName: kotlin.String? = null, address: kotlin.String? = null) : Unit {
        val localVarResponse = apiWalletWalletAddressTransactionsGetWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, address = address)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/Wallet/wallet-address-transactions
     * Get the transactions of a specific address in a wallet.
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletWalletAddressTransactionsGetWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, address: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletWalletAddressTransactionsGetRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, walletName = walletName, address = address)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletWalletAddressTransactionsGet
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param walletName  (optional)
     * @param address  (optional)
     * @return RequestConfig
     */
    fun apiWalletWalletAddressTransactionsGetRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, walletName: kotlin.String?, address: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (walletName != null) {
                    put("walletName", listOf(walletName.toString()))
                }
                if (address != null) {
                    put("address", listOf(address.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/Wallet/wallet-address-transactions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/Wallet/wallet-default-address
     * default addresss of a wallet without private key
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletWalletDefaultAddressGet(nodeUrlOrApiAccessKey: kotlin.String? = null, mnemonics: kotlin.String? = null, addressType: kotlin.Int? = 1) : Unit {
        val localVarResponse = apiWalletWalletDefaultAddressGetWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, mnemonics = mnemonics, addressType = addressType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/Wallet/wallet-default-address
     * default addresss of a wallet without private key
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletWalletDefaultAddressGetWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, mnemonics: kotlin.String?, addressType: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletWalletDefaultAddressGetRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, mnemonics = mnemonics, addressType = addressType)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletWalletDefaultAddressGet
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @return RequestConfig
     */
    fun apiWalletWalletDefaultAddressGetRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, mnemonics: kotlin.String?, addressType: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (addressType != null) {
                    put("addressType", listOf(addressType.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        mnemonics?.apply { localVariableHeaders["mnemonics"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/Wallet/wallet-default-address",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/Wallet/wallet-default-address-v2
     * default addresss of a wallet with private key
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiWalletWalletDefaultAddressV2Get(nodeUrlOrApiAccessKey: kotlin.String? = null, mnemonics: kotlin.String? = null, addressType: kotlin.Int? = 1) : Unit {
        val localVarResponse = apiWalletWalletDefaultAddressV2GetWithHttpInfo(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, mnemonics = mnemonics, addressType = addressType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/Wallet/wallet-default-address-v2
     * default addresss of a wallet with private key
     * 
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiWalletWalletDefaultAddressV2GetWithHttpInfo(nodeUrlOrApiAccessKey: kotlin.String?, mnemonics: kotlin.String?, addressType: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiWalletWalletDefaultAddressV2GetRequestConfig(nodeUrlOrApiAccessKey = nodeUrlOrApiAccessKey, mnemonics = mnemonics, addressType = addressType)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiWalletWalletDefaultAddressV2Get
     *
     * @param nodeUrlOrApiAccessKey  (optional)
     * @param mnemonics  (optional)
     * @param addressType  (optional, default to 1)
     * @return RequestConfig
     */
    fun apiWalletWalletDefaultAddressV2GetRequestConfig(nodeUrlOrApiAccessKey: kotlin.String?, mnemonics: kotlin.String?, addressType: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (addressType != null) {
                    put("addressType", listOf(addressType.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        nodeUrlOrApiAccessKey?.apply { localVariableHeaders["nodeUrlOrApiAccessKey"] = this.toString() }
        mnemonics?.apply { localVariableHeaders["mnemonics"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/Wallet/wallet-default-address-v2",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
