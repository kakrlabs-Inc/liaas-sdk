/*
KakrLabs-SDK-Creator

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AddressAPIService AddressAPI service
type AddressAPIService service

type ApiApiAddressAddressBalanceGetRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	address *string
}

// 
func (r ApiApiAddressAddressBalanceGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressAddressBalanceGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressAddressBalanceGetRequest) Address(address string) ApiApiAddressAddressBalanceGetRequest {
	r.address = &address
	return r
}

func (r ApiApiAddressAddressBalanceGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressAddressBalanceGetExecute(r)
}

/*
ApiAddressAddressBalanceGet address balance - returns the confirmed and unconfirmed balance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressAddressBalanceGetRequest
*/
func (a *AddressAPIService) ApiAddressAddressBalanceGet(ctx context.Context) ApiApiAddressAddressBalanceGetRequest {
	return ApiApiAddressAddressBalanceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressAddressBalanceGetExecute(r ApiApiAddressAddressBalanceGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressAddressBalanceGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/address-balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiAddressAddressDetailsGetRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
	address *string
}

// 
func (r ApiApiAddressAddressDetailsGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressAddressDetailsGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressAddressDetailsGetRequest) WalletName(walletName string) ApiApiAddressAddressDetailsGetRequest {
	r.walletName = &walletName
	return r
}

// 
func (r ApiApiAddressAddressDetailsGetRequest) Address(address string) ApiApiAddressAddressDetailsGetRequest {
	r.address = &address
	return r
}

func (r ApiApiAddressAddressDetailsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressAddressDetailsGetExecute(r)
}

/*
ApiAddressAddressDetailsGet Get address details. all address details are returned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressAddressDetailsGetRequest
*/
func (a *AddressAPIService) ApiAddressAddressDetailsGet(ctx context.Context) ApiApiAddressAddressDetailsGetRequest {
	return ApiApiAddressAddressDetailsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressAddressDetailsGetExecute(r ApiApiAddressAddressDetailsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressAddressDetailsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/address-details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiAddressAddressPrivateKeyGetRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	wallet *string
	encryptedPassphrase *string
	address *string
}

// 
func (r ApiApiAddressAddressPrivateKeyGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressAddressPrivateKeyGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressAddressPrivateKeyGetRequest) Wallet(wallet string) ApiApiAddressAddressPrivateKeyGetRequest {
	r.wallet = &wallet
	return r
}

// 
func (r ApiApiAddressAddressPrivateKeyGetRequest) EncryptedPassphrase(encryptedPassphrase string) ApiApiAddressAddressPrivateKeyGetRequest {
	r.encryptedPassphrase = &encryptedPassphrase
	return r
}

// 
func (r ApiApiAddressAddressPrivateKeyGetRequest) Address(address string) ApiApiAddressAddressPrivateKeyGetRequest {
	r.address = &address
	return r
}

func (r ApiApiAddressAddressPrivateKeyGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressAddressPrivateKeyGetExecute(r)
}

/*
ApiAddressAddressPrivateKeyGet Get the address private key using encrypted passphrase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressAddressPrivateKeyGetRequest
*/
func (a *AddressAPIService) ApiAddressAddressPrivateKeyGet(ctx context.Context) ApiApiAddressAddressPrivateKeyGetRequest {
	return ApiApiAddressAddressPrivateKeyGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressAddressPrivateKeyGetExecute(r ApiApiAddressAddressPrivateKeyGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressAddressPrivateKeyGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/address-private-key"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.wallet != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "wallet", r.wallet, "simple", "")
	}
	if r.encryptedPassphrase != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "encryptedPassphrase", r.encryptedPassphrase, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiAddressAddressPrivateKeyV2GetRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	wallet *string
	mnemonics *string
	address *string
}

// 
func (r ApiApiAddressAddressPrivateKeyV2GetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressAddressPrivateKeyV2GetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressAddressPrivateKeyV2GetRequest) Wallet(wallet string) ApiApiAddressAddressPrivateKeyV2GetRequest {
	r.wallet = &wallet
	return r
}

// 
func (r ApiApiAddressAddressPrivateKeyV2GetRequest) Mnemonics(mnemonics string) ApiApiAddressAddressPrivateKeyV2GetRequest {
	r.mnemonics = &mnemonics
	return r
}

// 
func (r ApiApiAddressAddressPrivateKeyV2GetRequest) Address(address string) ApiApiAddressAddressPrivateKeyV2GetRequest {
	r.address = &address
	return r
}

func (r ApiApiAddressAddressPrivateKeyV2GetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressAddressPrivateKeyV2GetExecute(r)
}

/*
ApiAddressAddressPrivateKeyV2Get Get the address private key using mnemonics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressAddressPrivateKeyV2GetRequest
*/
func (a *AddressAPIService) ApiAddressAddressPrivateKeyV2Get(ctx context.Context) ApiApiAddressAddressPrivateKeyV2GetRequest {
	return ApiApiAddressAddressPrivateKeyV2GetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressAddressPrivateKeyV2GetExecute(r ApiApiAddressAddressPrivateKeyV2GetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressAddressPrivateKeyV2Get")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/address-private-key-v2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.wallet != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "wallet", r.wallet, "simple", "")
	}
	if r.mnemonics != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "mnemonics", r.mnemonics, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiAddressAddressTransactionGetRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	address *string
	take *int32
	skip *int32
}

// 
func (r ApiApiAddressAddressTransactionGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressAddressTransactionGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressAddressTransactionGetRequest) Address(address string) ApiApiAddressAddressTransactionGetRequest {
	r.address = &address
	return r
}

// 
func (r ApiApiAddressAddressTransactionGetRequest) Take(take int32) ApiApiAddressAddressTransactionGetRequest {
	r.take = &take
	return r
}

// 
func (r ApiApiAddressAddressTransactionGetRequest) Skip(skip int32) ApiApiAddressAddressTransactionGetRequest {
	r.skip = &skip
	return r
}

func (r ApiApiAddressAddressTransactionGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressAddressTransactionGetExecute(r)
}

/*
ApiAddressAddressTransactionGet retruns all transactions of an address without wallet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressAddressTransactionGetRequest
*/
func (a *AddressAPIService) ApiAddressAddressTransactionGet(ctx context.Context) ApiApiAddressAddressTransactionGetRequest {
	return ApiApiAddressAddressTransactionGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressAddressTransactionGetExecute(r ApiApiAddressAddressTransactionGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressAddressTransactionGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/address-transaction"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	}
	if r.take != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "take", r.take, "form", "")
	} else {
		var defaultValue int32 = 10
		r.take = &defaultValue
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "form", "")
	} else {
		var defaultValue int32 = 0
		r.skip = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiAddressCreateMutiSigAddressPostRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
	encryptedPassphrase *string
	createMultiSignatureAddressdto *CreateMultiSignatureAddressdto
}

// 
func (r ApiApiAddressCreateMutiSigAddressPostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressCreateMutiSigAddressPostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressCreateMutiSigAddressPostRequest) WalletName(walletName string) ApiApiAddressCreateMutiSigAddressPostRequest {
	r.walletName = &walletName
	return r
}

// 
func (r ApiApiAddressCreateMutiSigAddressPostRequest) EncryptedPassphrase(encryptedPassphrase string) ApiApiAddressCreateMutiSigAddressPostRequest {
	r.encryptedPassphrase = &encryptedPassphrase
	return r
}

func (r ApiApiAddressCreateMutiSigAddressPostRequest) CreateMultiSignatureAddressdto(createMultiSignatureAddressdto CreateMultiSignatureAddressdto) ApiApiAddressCreateMutiSigAddressPostRequest {
	r.createMultiSignatureAddressdto = &createMultiSignatureAddressdto
	return r
}

func (r ApiApiAddressCreateMutiSigAddressPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressCreateMutiSigAddressPostExecute(r)
}

/*
ApiAddressCreateMutiSigAddressPost Create a multi-signature address. this address created will be encrypted but cannot be imported to other wallets.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressCreateMutiSigAddressPostRequest
*/
func (a *AddressAPIService) ApiAddressCreateMutiSigAddressPost(ctx context.Context) ApiApiAddressCreateMutiSigAddressPostRequest {
	return ApiApiAddressCreateMutiSigAddressPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressCreateMutiSigAddressPostExecute(r ApiApiAddressCreateMutiSigAddressPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressCreateMutiSigAddressPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/create-muti-sig-address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	if r.encryptedPassphrase != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "encryptedPassphrase", r.encryptedPassphrase, "simple", "")
	}
	// body params
	localVarPostBody = r.createMultiSignatureAddressdto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiAddressCreatePostRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
	encryptedPassphrase *string
	createAddressdto *CreateAddressdto
}

// 
func (r ApiApiAddressCreatePostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressCreatePostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressCreatePostRequest) WalletName(walletName string) ApiApiAddressCreatePostRequest {
	r.walletName = &walletName
	return r
}

// 
func (r ApiApiAddressCreatePostRequest) EncryptedPassphrase(encryptedPassphrase string) ApiApiAddressCreatePostRequest {
	r.encryptedPassphrase = &encryptedPassphrase
	return r
}

// 
func (r ApiApiAddressCreatePostRequest) CreateAddressdto(createAddressdto CreateAddressdto) ApiApiAddressCreatePostRequest {
	r.createAddressdto = &createAddressdto
	return r
}

func (r ApiApiAddressCreatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressCreatePostExecute(r)
}

/*
ApiAddressCreatePost Create a new address in a particular wallet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressCreatePostRequest
*/
func (a *AddressAPIService) ApiAddressCreatePost(ctx context.Context) ApiApiAddressCreatePostRequest {
	return ApiApiAddressCreatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressCreatePostExecute(r ApiApiAddressCreatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressCreatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	if r.encryptedPassphrase != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "encryptedPassphrase", r.encryptedPassphrase, "simple", "")
	}
	// body params
	localVarPostBody = r.createAddressdto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiAddressGenerateDefaultAddressPostRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	walletName *string
	encryptedPassphrase *string
	generateDefaultAddressdto *GenerateDefaultAddressdto
}

// 
func (r ApiApiAddressGenerateDefaultAddressPostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressGenerateDefaultAddressPostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressGenerateDefaultAddressPostRequest) WalletName(walletName string) ApiApiAddressGenerateDefaultAddressPostRequest {
	r.walletName = &walletName
	return r
}

// 
func (r ApiApiAddressGenerateDefaultAddressPostRequest) EncryptedPassphrase(encryptedPassphrase string) ApiApiAddressGenerateDefaultAddressPostRequest {
	r.encryptedPassphrase = &encryptedPassphrase
	return r
}

// 
func (r ApiApiAddressGenerateDefaultAddressPostRequest) GenerateDefaultAddressdto(generateDefaultAddressdto GenerateDefaultAddressdto) ApiApiAddressGenerateDefaultAddressPostRequest {
	r.generateDefaultAddressdto = &generateDefaultAddressdto
	return r
}

func (r ApiApiAddressGenerateDefaultAddressPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressGenerateDefaultAddressPostExecute(r)
}

/*
ApiAddressGenerateDefaultAddressPost Generate a default address for a wallet. This address can be imported to other wallets.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressGenerateDefaultAddressPostRequest
*/
func (a *AddressAPIService) ApiAddressGenerateDefaultAddressPost(ctx context.Context) ApiApiAddressGenerateDefaultAddressPostRequest {
	return ApiApiAddressGenerateDefaultAddressPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressGenerateDefaultAddressPostExecute(r ApiApiAddressGenerateDefaultAddressPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressGenerateDefaultAddressPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/generate-default-address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.walletName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "walletName", r.walletName, "simple", "")
	}
	if r.encryptedPassphrase != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "encryptedPassphrase", r.encryptedPassphrase, "simple", "")
	}
	// body params
	localVarPostBody = r.generateDefaultAddressdto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiAddressScreenAddressGetRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	wallet *string
	mnemonics *string
	address *string
}

// 
func (r ApiApiAddressScreenAddressGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressScreenAddressGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressScreenAddressGetRequest) Wallet(wallet string) ApiApiAddressScreenAddressGetRequest {
	r.wallet = &wallet
	return r
}

// 
func (r ApiApiAddressScreenAddressGetRequest) Mnemonics(mnemonics string) ApiApiAddressScreenAddressGetRequest {
	r.mnemonics = &mnemonics
	return r
}

// 
func (r ApiApiAddressScreenAddressGetRequest) Address(address string) ApiApiAddressScreenAddressGetRequest {
	r.address = &address
	return r
}

func (r ApiApiAddressScreenAddressGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressScreenAddressGetExecute(r)
}

/*
ApiAddressScreenAddressGet Screen address to check the validity of the address, iswitness or not, isScript or not , isMweb or not and also returns the scriptPubKey

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressScreenAddressGetRequest
*/
func (a *AddressAPIService) ApiAddressScreenAddressGet(ctx context.Context) ApiApiAddressScreenAddressGetRequest {
	return ApiApiAddressScreenAddressGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressScreenAddressGetExecute(r ApiApiAddressScreenAddressGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressScreenAddressGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/screen-address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	if r.wallet != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "wallet", r.wallet, "simple", "")
	}
	if r.mnemonics != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "mnemonics", r.mnemonics, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiAddressSignMessagePostRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	signMessagedto *SignMessagedto
}

// 
func (r ApiApiAddressSignMessagePostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressSignMessagePostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressSignMessagePostRequest) SignMessagedto(signMessagedto SignMessagedto) ApiApiAddressSignMessagePostRequest {
	r.signMessagedto = &signMessagedto
	return r
}

func (r ApiApiAddressSignMessagePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressSignMessagePostExecute(r)
}

/*
ApiAddressSignMessagePost sign a message with address private key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressSignMessagePostRequest
*/
func (a *AddressAPIService) ApiAddressSignMessagePost(ctx context.Context) ApiApiAddressSignMessagePostRequest {
	return ApiApiAddressSignMessagePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressSignMessagePostExecute(r ApiApiAddressSignMessagePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressSignMessagePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/sign-message"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	// body params
	localVarPostBody = r.signMessagedto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiAddressVerifyMessagePostRequest struct {
	ctx context.Context
	ApiService *AddressAPIService
	nodeUrlOrApiAccessKey *string
	verifyMessagedto *VerifyMessagedto
}

// 
func (r ApiApiAddressVerifyMessagePostRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiAddressVerifyMessagePostRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiAddressVerifyMessagePostRequest) VerifyMessagedto(verifyMessagedto VerifyMessagedto) ApiApiAddressVerifyMessagePostRequest {
	r.verifyMessagedto = &verifyMessagedto
	return r
}

func (r ApiApiAddressVerifyMessagePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiAddressVerifyMessagePostExecute(r)
}

/*
ApiAddressVerifyMessagePost verify signed message

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAddressVerifyMessagePostRequest
*/
func (a *AddressAPIService) ApiAddressVerifyMessagePost(ctx context.Context) ApiApiAddressVerifyMessagePostRequest {
	return ApiApiAddressVerifyMessagePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AddressAPIService) ApiAddressVerifyMessagePostExecute(r ApiApiAddressVerifyMessagePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressAPIService.ApiAddressVerifyMessagePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Address/verify-message"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	// body params
	localVarPostBody = r.verifyMessagedto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
