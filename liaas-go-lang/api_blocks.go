/*
KakrLabs-SDK-Creator

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// BlocksAPIService BlocksAPI service
type BlocksAPIService service

type ApiApiBlocksBlockHeaderGetRequest struct {
	ctx context.Context
	ApiService *BlocksAPIService
	nodeUrlOrApiAccessKey *string
	blockheight *string
}

// 
func (r ApiApiBlocksBlockHeaderGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiBlocksBlockHeaderGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiBlocksBlockHeaderGetRequest) Blockheight(blockheight string) ApiApiBlocksBlockHeaderGetRequest {
	r.blockheight = &blockheight
	return r
}

func (r ApiApiBlocksBlockHeaderGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlocksBlockHeaderGetExecute(r)
}

/*
ApiBlocksBlockHeaderGet Get block header information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlocksBlockHeaderGetRequest
*/
func (a *BlocksAPIService) ApiBlocksBlockHeaderGet(ctx context.Context) ApiApiBlocksBlockHeaderGetRequest {
	return ApiApiBlocksBlockHeaderGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BlocksAPIService) ApiBlocksBlockHeaderGetExecute(r ApiApiBlocksBlockHeaderGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlocksAPIService.ApiBlocksBlockHeaderGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Blocks/block-header"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.blockheight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockheight", r.blockheight, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlocksBlockStatGetRequest struct {
	ctx context.Context
	ApiService *BlocksAPIService
	nodeUrlOrApiAccessKey *string
	blockheight *string
}

// 
func (r ApiApiBlocksBlockStatGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiBlocksBlockStatGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiBlocksBlockStatGetRequest) Blockheight(blockheight string) ApiApiBlocksBlockStatGetRequest {
	r.blockheight = &blockheight
	return r
}

func (r ApiApiBlocksBlockStatGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlocksBlockStatGetExecute(r)
}

/*
ApiBlocksBlockStatGet Get block statistics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlocksBlockStatGetRequest
*/
func (a *BlocksAPIService) ApiBlocksBlockStatGet(ctx context.Context) ApiApiBlocksBlockStatGetRequest {
	return ApiApiBlocksBlockStatGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BlocksAPIService) ApiBlocksBlockStatGetExecute(r ApiApiBlocksBlockStatGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlocksAPIService.ApiBlocksBlockStatGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Blocks/block-stat"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.blockheight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockheight", r.blockheight, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlocksBlockTransactionGetRequest struct {
	ctx context.Context
	ApiService *BlocksAPIService
	nodeUrlOrApiAccessKey *string
	blockhash *string
}

// 
func (r ApiApiBlocksBlockTransactionGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiBlocksBlockTransactionGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiBlocksBlockTransactionGetRequest) Blockhash(blockhash string) ApiApiBlocksBlockTransactionGetRequest {
	r.blockhash = &blockhash
	return r
}

func (r ApiApiBlocksBlockTransactionGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlocksBlockTransactionGetExecute(r)
}

/*
ApiBlocksBlockTransactionGet Get block Transactions in details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlocksBlockTransactionGetRequest
*/
func (a *BlocksAPIService) ApiBlocksBlockTransactionGet(ctx context.Context) ApiApiBlocksBlockTransactionGetRequest {
	return ApiApiBlocksBlockTransactionGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BlocksAPIService) ApiBlocksBlockTransactionGetExecute(r ApiApiBlocksBlockTransactionGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlocksAPIService.ApiBlocksBlockTransactionGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Blocks/block-transaction"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.blockhash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockhash", r.blockhash, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlocksBlockchainInfoGetRequest struct {
	ctx context.Context
	ApiService *BlocksAPIService
	nodeUrlOrApiAccessKey *string
}

// 
func (r ApiApiBlocksBlockchainInfoGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiBlocksBlockchainInfoGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

func (r ApiApiBlocksBlockchainInfoGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlocksBlockchainInfoGetExecute(r)
}

/*
ApiBlocksBlockchainInfoGet Get Litcoin Block information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlocksBlockchainInfoGetRequest
*/
func (a *BlocksAPIService) ApiBlocksBlockchainInfoGet(ctx context.Context) ApiApiBlocksBlockchainInfoGetRequest {
	return ApiApiBlocksBlockchainInfoGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BlocksAPIService) ApiBlocksBlockchainInfoGetExecute(r ApiApiBlocksBlockchainInfoGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlocksAPIService.ApiBlocksBlockchainInfoGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Blocks/blockchain-info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
