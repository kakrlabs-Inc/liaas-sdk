// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBlocksApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BlocksApiEvents Events { get; }

        /// <summary>
        /// Get block header information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockheight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockHeaderGetApiResponse"/>&gt;</returns>
        Task<IApiBlocksBlockHeaderGetApiResponse> ApiBlocksBlockHeaderGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockheight = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get block header information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockheight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockHeaderGetApiResponse"/>?&gt;</returns>
        Task<IApiBlocksBlockHeaderGetApiResponse?> ApiBlocksBlockHeaderGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockheight = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get block statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockheight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockStatGetApiResponse"/>&gt;</returns>
        Task<IApiBlocksBlockStatGetApiResponse> ApiBlocksBlockStatGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockheight = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get block statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockheight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockStatGetApiResponse"/>?&gt;</returns>
        Task<IApiBlocksBlockStatGetApiResponse?> ApiBlocksBlockStatGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockheight = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get block Transactions in details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockhash"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockTransactionGetApiResponse"/>&gt;</returns>
        Task<IApiBlocksBlockTransactionGetApiResponse> ApiBlocksBlockTransactionGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockhash = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get block Transactions in details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockhash"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockTransactionGetApiResponse"/>?&gt;</returns>
        Task<IApiBlocksBlockTransactionGetApiResponse?> ApiBlocksBlockTransactionGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockhash = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Litcoin Block information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockchainInfoGetApiResponse"/>&gt;</returns>
        Task<IApiBlocksBlockchainInfoGetApiResponse> ApiBlocksBlockchainInfoGetAsync(Option<string> nodeUrlOrApiAccessKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Litcoin Block information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockchainInfoGetApiResponse"/>?&gt;</returns>
        Task<IApiBlocksBlockchainInfoGetApiResponse?> ApiBlocksBlockchainInfoGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IApiBlocksBlockHeaderGetApiResponse"/>
    /// </summary>
    public interface IApiBlocksBlockHeaderGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiBlocksBlockStatGetApiResponse"/>
    /// </summary>
    public interface IApiBlocksBlockStatGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiBlocksBlockTransactionGetApiResponse"/>
    /// </summary>
    public interface IApiBlocksBlockTransactionGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiBlocksBlockchainInfoGetApiResponse"/>
    /// </summary>
    public interface IApiBlocksBlockchainInfoGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BlocksApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiBlocksBlockHeaderGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiBlocksBlockHeaderGet;

        internal void ExecuteOnApiBlocksBlockHeaderGet(BlocksApi.ApiBlocksBlockHeaderGetApiResponse apiResponse)
        {
            OnApiBlocksBlockHeaderGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiBlocksBlockHeaderGet(Exception exception)
        {
            OnErrorApiBlocksBlockHeaderGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiBlocksBlockStatGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiBlocksBlockStatGet;

        internal void ExecuteOnApiBlocksBlockStatGet(BlocksApi.ApiBlocksBlockStatGetApiResponse apiResponse)
        {
            OnApiBlocksBlockStatGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiBlocksBlockStatGet(Exception exception)
        {
            OnErrorApiBlocksBlockStatGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiBlocksBlockTransactionGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiBlocksBlockTransactionGet;

        internal void ExecuteOnApiBlocksBlockTransactionGet(BlocksApi.ApiBlocksBlockTransactionGetApiResponse apiResponse)
        {
            OnApiBlocksBlockTransactionGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiBlocksBlockTransactionGet(Exception exception)
        {
            OnErrorApiBlocksBlockTransactionGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiBlocksBlockchainInfoGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiBlocksBlockchainInfoGet;

        internal void ExecuteOnApiBlocksBlockchainInfoGet(BlocksApi.ApiBlocksBlockchainInfoGetApiResponse apiResponse)
        {
            OnApiBlocksBlockchainInfoGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiBlocksBlockchainInfoGet(Exception exception)
        {
            OnErrorApiBlocksBlockchainInfoGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BlocksApi : IBlocksApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BlocksApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BlocksApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlocksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlocksApi(ILogger<BlocksApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BlocksApiEvents blocksApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BlocksApi>();
            HttpClient = httpClient;
            Events = blocksApiEvents;
        }

        partial void FormatApiBlocksBlockHeaderGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> blockheight);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockheight"></param>
        /// <returns></returns>
        private void ValidateApiBlocksBlockHeaderGet(Option<string> nodeUrlOrApiAccessKey, Option<string> blockheight)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (blockheight.IsSet && blockheight.Value == null)
                throw new ArgumentNullException(nameof(blockheight));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockheight"></param>
        private void AfterApiBlocksBlockHeaderGetDefaultImplementation(IApiBlocksBlockHeaderGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockheight)
        {
            bool suppressDefaultLog = false;
            AfterApiBlocksBlockHeaderGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, blockheight);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockheight"></param>
        partial void AfterApiBlocksBlockHeaderGet(ref bool suppressDefaultLog, IApiBlocksBlockHeaderGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockheight);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockheight"></param>
        private void OnErrorApiBlocksBlockHeaderGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockheight)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiBlocksBlockHeaderGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, blockheight);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockheight"></param>
        partial void OnErrorApiBlocksBlockHeaderGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockheight);

        /// <summary>
        /// Get block header information 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockheight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockHeaderGetApiResponse"/>&gt;</returns>
        public async Task<IApiBlocksBlockHeaderGetApiResponse?> ApiBlocksBlockHeaderGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockheight = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiBlocksBlockHeaderGetAsync(nodeUrlOrApiAccessKey, blockheight, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get block header information 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockheight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockHeaderGetApiResponse"/>&gt;</returns>
        public async Task<IApiBlocksBlockHeaderGetApiResponse> ApiBlocksBlockHeaderGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockheight = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiBlocksBlockHeaderGet(nodeUrlOrApiAccessKey, blockheight);

                FormatApiBlocksBlockHeaderGet(ref nodeUrlOrApiAccessKey, ref blockheight);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Blocks/block-header"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Blocks/block-header");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (blockheight.IsSet)
                        parseQueryStringLocalVar["blockheight"] = ClientUtils.ParameterToString(blockheight.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiBlocksBlockHeaderGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiBlocksBlockHeaderGetApiResponse>();

                        ApiBlocksBlockHeaderGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Blocks/block-header", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiBlocksBlockHeaderGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, blockheight);

                        Events.ExecuteOnApiBlocksBlockHeaderGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiBlocksBlockHeaderGetDefaultImplementation(e, "/api/Blocks/block-header", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, blockheight);
                Events.ExecuteOnErrorApiBlocksBlockHeaderGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiBlocksBlockHeaderGetApiResponse"/>
        /// </summary>
        public partial class ApiBlocksBlockHeaderGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiBlocksBlockHeaderGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiBlocksBlockHeaderGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiBlocksBlockHeaderGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiBlocksBlockHeaderGetApiResponse(ILogger<ApiBlocksBlockHeaderGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiBlocksBlockStatGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> blockheight);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockheight"></param>
        /// <returns></returns>
        private void ValidateApiBlocksBlockStatGet(Option<string> nodeUrlOrApiAccessKey, Option<string> blockheight)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (blockheight.IsSet && blockheight.Value == null)
                throw new ArgumentNullException(nameof(blockheight));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockheight"></param>
        private void AfterApiBlocksBlockStatGetDefaultImplementation(IApiBlocksBlockStatGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockheight)
        {
            bool suppressDefaultLog = false;
            AfterApiBlocksBlockStatGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, blockheight);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockheight"></param>
        partial void AfterApiBlocksBlockStatGet(ref bool suppressDefaultLog, IApiBlocksBlockStatGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockheight);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockheight"></param>
        private void OnErrorApiBlocksBlockStatGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockheight)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiBlocksBlockStatGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, blockheight);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockheight"></param>
        partial void OnErrorApiBlocksBlockStatGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockheight);

        /// <summary>
        /// Get block statistics 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockheight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockStatGetApiResponse"/>&gt;</returns>
        public async Task<IApiBlocksBlockStatGetApiResponse?> ApiBlocksBlockStatGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockheight = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiBlocksBlockStatGetAsync(nodeUrlOrApiAccessKey, blockheight, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get block statistics 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockheight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockStatGetApiResponse"/>&gt;</returns>
        public async Task<IApiBlocksBlockStatGetApiResponse> ApiBlocksBlockStatGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockheight = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiBlocksBlockStatGet(nodeUrlOrApiAccessKey, blockheight);

                FormatApiBlocksBlockStatGet(ref nodeUrlOrApiAccessKey, ref blockheight);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Blocks/block-stat"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Blocks/block-stat");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (blockheight.IsSet)
                        parseQueryStringLocalVar["blockheight"] = ClientUtils.ParameterToString(blockheight.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiBlocksBlockStatGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiBlocksBlockStatGetApiResponse>();

                        ApiBlocksBlockStatGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Blocks/block-stat", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiBlocksBlockStatGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, blockheight);

                        Events.ExecuteOnApiBlocksBlockStatGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiBlocksBlockStatGetDefaultImplementation(e, "/api/Blocks/block-stat", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, blockheight);
                Events.ExecuteOnErrorApiBlocksBlockStatGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiBlocksBlockStatGetApiResponse"/>
        /// </summary>
        public partial class ApiBlocksBlockStatGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiBlocksBlockStatGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiBlocksBlockStatGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiBlocksBlockStatGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiBlocksBlockStatGetApiResponse(ILogger<ApiBlocksBlockStatGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiBlocksBlockTransactionGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> blockhash);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockhash"></param>
        /// <returns></returns>
        private void ValidateApiBlocksBlockTransactionGet(Option<string> nodeUrlOrApiAccessKey, Option<string> blockhash)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (blockhash.IsSet && blockhash.Value == null)
                throw new ArgumentNullException(nameof(blockhash));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockhash"></param>
        private void AfterApiBlocksBlockTransactionGetDefaultImplementation(IApiBlocksBlockTransactionGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockhash)
        {
            bool suppressDefaultLog = false;
            AfterApiBlocksBlockTransactionGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, blockhash);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockhash"></param>
        partial void AfterApiBlocksBlockTransactionGet(ref bool suppressDefaultLog, IApiBlocksBlockTransactionGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockhash);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockhash"></param>
        private void OnErrorApiBlocksBlockTransactionGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockhash)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiBlocksBlockTransactionGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, blockhash);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="blockhash"></param>
        partial void OnErrorApiBlocksBlockTransactionGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> blockhash);

        /// <summary>
        /// Get block Transactions in details 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockhash"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockTransactionGetApiResponse"/>&gt;</returns>
        public async Task<IApiBlocksBlockTransactionGetApiResponse?> ApiBlocksBlockTransactionGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockhash = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiBlocksBlockTransactionGetAsync(nodeUrlOrApiAccessKey, blockhash, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get block Transactions in details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="blockhash"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockTransactionGetApiResponse"/>&gt;</returns>
        public async Task<IApiBlocksBlockTransactionGetApiResponse> ApiBlocksBlockTransactionGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> blockhash = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiBlocksBlockTransactionGet(nodeUrlOrApiAccessKey, blockhash);

                FormatApiBlocksBlockTransactionGet(ref nodeUrlOrApiAccessKey, ref blockhash);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Blocks/block-transaction"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Blocks/block-transaction");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (blockhash.IsSet)
                        parseQueryStringLocalVar["blockhash"] = ClientUtils.ParameterToString(blockhash.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiBlocksBlockTransactionGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiBlocksBlockTransactionGetApiResponse>();

                        ApiBlocksBlockTransactionGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Blocks/block-transaction", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiBlocksBlockTransactionGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, blockhash);

                        Events.ExecuteOnApiBlocksBlockTransactionGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiBlocksBlockTransactionGetDefaultImplementation(e, "/api/Blocks/block-transaction", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, blockhash);
                Events.ExecuteOnErrorApiBlocksBlockTransactionGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiBlocksBlockTransactionGetApiResponse"/>
        /// </summary>
        public partial class ApiBlocksBlockTransactionGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiBlocksBlockTransactionGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiBlocksBlockTransactionGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiBlocksBlockTransactionGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiBlocksBlockTransactionGetApiResponse(ILogger<ApiBlocksBlockTransactionGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiBlocksBlockchainInfoGet(ref Option<string> nodeUrlOrApiAccessKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <returns></returns>
        private void ValidateApiBlocksBlockchainInfoGet(Option<string> nodeUrlOrApiAccessKey)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        private void AfterApiBlocksBlockchainInfoGetDefaultImplementation(IApiBlocksBlockchainInfoGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey)
        {
            bool suppressDefaultLog = false;
            AfterApiBlocksBlockchainInfoGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        partial void AfterApiBlocksBlockchainInfoGet(ref bool suppressDefaultLog, IApiBlocksBlockchainInfoGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        private void OnErrorApiBlocksBlockchainInfoGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiBlocksBlockchainInfoGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        partial void OnErrorApiBlocksBlockchainInfoGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey);

        /// <summary>
        /// Get Litcoin Block information 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockchainInfoGetApiResponse"/>&gt;</returns>
        public async Task<IApiBlocksBlockchainInfoGetApiResponse?> ApiBlocksBlockchainInfoGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiBlocksBlockchainInfoGetAsync(nodeUrlOrApiAccessKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Litcoin Block information 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiBlocksBlockchainInfoGetApiResponse"/>&gt;</returns>
        public async Task<IApiBlocksBlockchainInfoGetApiResponse> ApiBlocksBlockchainInfoGetAsync(Option<string> nodeUrlOrApiAccessKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiBlocksBlockchainInfoGet(nodeUrlOrApiAccessKey);

                FormatApiBlocksBlockchainInfoGet(ref nodeUrlOrApiAccessKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Blocks/blockchain-info"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Blocks/blockchain-info");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiBlocksBlockchainInfoGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiBlocksBlockchainInfoGetApiResponse>();

                        ApiBlocksBlockchainInfoGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Blocks/blockchain-info", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiBlocksBlockchainInfoGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey);

                        Events.ExecuteOnApiBlocksBlockchainInfoGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiBlocksBlockchainInfoGetDefaultImplementation(e, "/api/Blocks/blockchain-info", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey);
                Events.ExecuteOnErrorApiBlocksBlockchainInfoGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiBlocksBlockchainInfoGetApiResponse"/>
        /// </summary>
        public partial class ApiBlocksBlockchainInfoGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiBlocksBlockchainInfoGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiBlocksBlockchainInfoGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiBlocksBlockchainInfoGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiBlocksBlockchainInfoGetApiResponse(ILogger<ApiBlocksBlockchainInfoGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
