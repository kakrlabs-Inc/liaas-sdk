=begin
#KakrLabs-SDK-Creator

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module OpenapiClient
  class BlocksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get block header information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :blockheight 
    # @return [nil]
    def api_blocks_block_header_get(opts = {})
      api_blocks_block_header_get_with_http_info(opts)
      nil
    end

    # Get block header information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :blockheight 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_blocks_block_header_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlocksApi.api_blocks_block_header_get ...'
      end
      # resource path
      local_var_path = '/api/Blocks/block-header'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'blockheight'] = opts[:'blockheight'] if !opts[:'blockheight'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BlocksApi.api_blocks_block_header_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlocksApi#api_blocks_block_header_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get block statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :blockheight 
    # @return [nil]
    def api_blocks_block_stat_get(opts = {})
      api_blocks_block_stat_get_with_http_info(opts)
      nil
    end

    # Get block statistics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :blockheight 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_blocks_block_stat_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlocksApi.api_blocks_block_stat_get ...'
      end
      # resource path
      local_var_path = '/api/Blocks/block-stat'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'blockheight'] = opts[:'blockheight'] if !opts[:'blockheight'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BlocksApi.api_blocks_block_stat_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlocksApi#api_blocks_block_stat_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get block Transactions in details
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :blockhash 
    # @return [nil]
    def api_blocks_block_transaction_get(opts = {})
      api_blocks_block_transaction_get_with_http_info(opts)
      nil
    end

    # Get block Transactions in details
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :blockhash 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_blocks_block_transaction_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlocksApi.api_blocks_block_transaction_get ...'
      end
      # resource path
      local_var_path = '/api/Blocks/block-transaction'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'blockhash'] = opts[:'blockhash'] if !opts[:'blockhash'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BlocksApi.api_blocks_block_transaction_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlocksApi#api_blocks_block_transaction_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Litcoin Block information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @return [nil]
    def api_blocks_blockchain_info_get(opts = {})
      api_blocks_blockchain_info_get_with_http_info(opts)
      nil
    end

    # Get Litcoin Block information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_blocks_blockchain_info_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlocksApi.api_blocks_blockchain_info_get ...'
      end
      # resource path
      local_var_path = '/api/Blocks/blockchain-info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BlocksApi.api_blocks_blockchain_info_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlocksApi#api_blocks_blockchain_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
