/*
KakrLabs-SDK-Creator

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// LitecoinAPIService LitecoinAPI service
type LitecoinAPIService service

type ApiApiLitecoinGetUtxoDetailsGetRequest struct {
	ctx context.Context
	ApiService *LitecoinAPIService
	nodeUrlOrApiAccessKey *string
	txid *string
	voutN *int32
}

// 
func (r ApiApiLitecoinGetUtxoDetailsGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiLitecoinGetUtxoDetailsGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiLitecoinGetUtxoDetailsGetRequest) Txid(txid string) ApiApiLitecoinGetUtxoDetailsGetRequest {
	r.txid = &txid
	return r
}

// 
func (r ApiApiLitecoinGetUtxoDetailsGetRequest) VoutN(voutN int32) ApiApiLitecoinGetUtxoDetailsGetRequest {
	r.voutN = &voutN
	return r
}

func (r ApiApiLitecoinGetUtxoDetailsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiLitecoinGetUtxoDetailsGetExecute(r)
}

/*
ApiLitecoinGetUtxoDetailsGet Litecoin UTXO details - returns the details of a UTXO using the transaction id and vout index

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiLitecoinGetUtxoDetailsGetRequest
*/
func (a *LitecoinAPIService) ApiLitecoinGetUtxoDetailsGet(ctx context.Context) ApiApiLitecoinGetUtxoDetailsGetRequest {
	return ApiApiLitecoinGetUtxoDetailsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LitecoinAPIService) ApiLitecoinGetUtxoDetailsGetExecute(r ApiApiLitecoinGetUtxoDetailsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LitecoinAPIService.ApiLitecoinGetUtxoDetailsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Litecoin/get-utxo-details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.txid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "txid", r.txid, "form", "")
	}
	if r.voutN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vout_n", r.voutN, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiLitecoinTransactionDetailsGetRequest struct {
	ctx context.Context
	ApiService *LitecoinAPIService
	nodeUrlOrApiAccessKey *string
	txid *string
}

// 
func (r ApiApiLitecoinTransactionDetailsGetRequest) NodeUrlOrApiAccessKey(nodeUrlOrApiAccessKey string) ApiApiLitecoinTransactionDetailsGetRequest {
	r.nodeUrlOrApiAccessKey = &nodeUrlOrApiAccessKey
	return r
}

// 
func (r ApiApiLitecoinTransactionDetailsGetRequest) Txid(txid string) ApiApiLitecoinTransactionDetailsGetRequest {
	r.txid = &txid
	return r
}

func (r ApiApiLitecoinTransactionDetailsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiLitecoinTransactionDetailsGetExecute(r)
}

/*
ApiLitecoinTransactionDetailsGet Litecoin transaction details - returns the full details of a transaction id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiLitecoinTransactionDetailsGetRequest
*/
func (a *LitecoinAPIService) ApiLitecoinTransactionDetailsGet(ctx context.Context) ApiApiLitecoinTransactionDetailsGetRequest {
	return ApiApiLitecoinTransactionDetailsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LitecoinAPIService) ApiLitecoinTransactionDetailsGetExecute(r ApiApiLitecoinTransactionDetailsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LitecoinAPIService.ApiLitecoinTransactionDetailsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/Litecoin/transaction-details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.txid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "txid", r.txid, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.nodeUrlOrApiAccessKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "nodeUrlOrApiAccessKey", r.nodeUrlOrApiAccessKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
