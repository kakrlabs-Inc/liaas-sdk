/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`api_address_address_balance_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressAddressBalanceGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_address_address_details_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressAddressDetailsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_address_address_private_key_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressAddressPrivateKeyGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_address_address_private_key_v2_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressAddressPrivateKeyV2GetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_address_address_transaction_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressAddressTransactionGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_address_create_muti_sig_address_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressCreateMutiSigAddressPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_address_create_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressCreatePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_address_generate_default_address_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressGenerateDefaultAddressPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_address_screen_address_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressScreenAddressGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_address_sign_message_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressSignMessagePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_address_verify_message_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAddressVerifyMessagePostError {
    UnknownValue(serde_json::Value),
}


pub async fn api_address_address_balance_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, address: Option<&str>) -> Result<(), Error<ApiAddressAddressBalanceGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_address = address;

    let uri_str = format!("{}/api/Address/address-balance", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_address {
        req_builder = req_builder.query(&[("address", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressAddressBalanceGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_address_address_details_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, address: Option<&str>) -> Result<(), Error<ApiAddressAddressDetailsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_address = address;

    let uri_str = format!("{}/api/Address/address-details", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_address {
        req_builder = req_builder.query(&[("address", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressAddressDetailsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_address_address_private_key_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet: Option<&str>, encrypted_passphrase: Option<&str>, address: Option<&str>) -> Result<(), Error<ApiAddressAddressPrivateKeyGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet = wallet;
    let p_encrypted_passphrase = encrypted_passphrase;
    let p_address = address;

    let uri_str = format!("{}/api/Address/address-private-key", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_address {
        req_builder = req_builder.query(&[("address", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet {
        req_builder = req_builder.header("wallet", param_value.to_string());
    }
    if let Some(param_value) = p_encrypted_passphrase {
        req_builder = req_builder.header("encryptedPassphrase", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressAddressPrivateKeyGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_address_address_private_key_v2_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet: Option<&str>, mnemonics: Option<&str>, address: Option<&str>) -> Result<(), Error<ApiAddressAddressPrivateKeyV2GetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet = wallet;
    let p_mnemonics = mnemonics;
    let p_address = address;

    let uri_str = format!("{}/api/Address/address-private-key-v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_address {
        req_builder = req_builder.query(&[("address", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet {
        req_builder = req_builder.header("wallet", param_value.to_string());
    }
    if let Some(param_value) = p_mnemonics {
        req_builder = req_builder.header("mnemonics", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressAddressPrivateKeyV2GetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_address_address_transaction_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, address: Option<&str>, take: Option<i32>, skip: Option<i32>) -> Result<(), Error<ApiAddressAddressTransactionGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_address = address;
    let p_take = take;
    let p_skip = skip;

    let uri_str = format!("{}/api/Address/address-transaction", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_address {
        req_builder = req_builder.query(&[("address", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_take {
        req_builder = req_builder.query(&[("take", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_skip {
        req_builder = req_builder.query(&[("skip", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressAddressTransactionGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_address_create_muti_sig_address_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, encrypted_passphrase: Option<&str>, create_multi_signature_addressdto: Option<models::CreateMultiSignatureAddressdto>) -> Result<(), Error<ApiAddressCreateMutiSigAddressPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_encrypted_passphrase = encrypted_passphrase;
    let p_create_multi_signature_addressdto = create_multi_signature_addressdto;

    let uri_str = format!("{}/api/Address/create-muti-sig-address", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }
    if let Some(param_value) = p_encrypted_passphrase {
        req_builder = req_builder.header("encryptedPassphrase", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_multi_signature_addressdto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressCreateMutiSigAddressPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_address_create_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, encrypted_passphrase: Option<&str>, create_addressdto: Option<models::CreateAddressdto>) -> Result<(), Error<ApiAddressCreatePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_encrypted_passphrase = encrypted_passphrase;
    let p_create_addressdto = create_addressdto;

    let uri_str = format!("{}/api/Address/create", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }
    if let Some(param_value) = p_encrypted_passphrase {
        req_builder = req_builder.header("encryptedPassphrase", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_addressdto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressCreatePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_address_generate_default_address_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, encrypted_passphrase: Option<&str>, generate_default_addressdto: Option<models::GenerateDefaultAddressdto>) -> Result<(), Error<ApiAddressGenerateDefaultAddressPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_encrypted_passphrase = encrypted_passphrase;
    let p_generate_default_addressdto = generate_default_addressdto;

    let uri_str = format!("{}/api/Address/generate-default-address", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }
    if let Some(param_value) = p_encrypted_passphrase {
        req_builder = req_builder.header("encryptedPassphrase", param_value.to_string());
    }
    req_builder = req_builder.json(&p_generate_default_addressdto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressGenerateDefaultAddressPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_address_screen_address_get(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet: Option<&str>, mnemonics: Option<&str>, address: Option<&str>) -> Result<(), Error<ApiAddressScreenAddressGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet = wallet;
    let p_mnemonics = mnemonics;
    let p_address = address;

    let uri_str = format!("{}/api/Address/screen-address", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_address {
        req_builder = req_builder.query(&[("address", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet {
        req_builder = req_builder.header("wallet", param_value.to_string());
    }
    if let Some(param_value) = p_mnemonics {
        req_builder = req_builder.header("mnemonics", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressScreenAddressGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_address_sign_message_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, sign_messagedto: Option<models::SignMessagedto>) -> Result<(), Error<ApiAddressSignMessagePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_sign_messagedto = sign_messagedto;

    let uri_str = format!("{}/api/Address/sign-message", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_sign_messagedto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressSignMessagePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_address_verify_message_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, verify_messagedto: Option<models::VerifyMessagedto>) -> Result<(), Error<ApiAddressVerifyMessagePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_verify_messagedto = verify_messagedto;

    let uri_str = format!("{}/api/Address/verify-message", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_verify_messagedto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAddressVerifyMessagePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

