// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IWalletApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        WalletApiEvents Events { get; }

        /// <summary>
        /// Get all addresses of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletAddressesGetApiResponse"/>&gt;</returns>
        Task<IApiWalletAddressesGetApiResponse> ApiWalletAddressesGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all addresses of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletAddressesGetApiResponse"/>?&gt;</returns>
        Task<IApiWalletAddressesGetApiResponse?> ApiWalletAddressesGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the balance of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletBalanceGetApiResponse"/>&gt;</returns>
        Task<IApiWalletBalanceGetApiResponse> ApiWalletBalanceGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the balance of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletBalanceGetApiResponse"/>?&gt;</returns>
        Task<IApiWalletBalanceGetApiResponse?> ApiWalletBalanceGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change the passphrase of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="changePassphrasedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletChangePassphrasePostApiResponse"/>&gt;</returns>
        Task<IApiWalletChangePassphrasePostApiResponse> ApiWalletChangePassphrasePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<ChangePassphrasedto> changePassphrasedto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change the passphrase of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="changePassphrasedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletChangePassphrasePostApiResponse"/>?&gt;</returns>
        Task<IApiWalletChangePassphrasePostApiResponse?> ApiWalletChangePassphrasePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<ChangePassphrasedto> changePassphrasedto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateEncryptedWalletPostApiResponse"/>&gt;</returns>
        Task<IApiWalletCreateEncryptedWalletPostApiResponse> ApiWalletCreateEncryptedWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateEncryptedWalletPostApiResponse"/>?&gt;</returns>
        Task<IApiWalletCreateEncryptedWalletPostApiResponse?> ApiWalletCreateEncryptedWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateImportableEncryptedWalletPostApiResponse"/>&gt;</returns>
        Task<IApiWalletCreateImportableEncryptedWalletPostApiResponse> ApiWalletCreateImportableEncryptedWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateImportableEncryptedWalletPostApiResponse"/>?&gt;</returns>
        Task<IApiWalletCreateImportableEncryptedWalletPostApiResponse?> ApiWalletCreateImportableEncryptedWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateImportableWalletPostApiResponse"/>&gt;</returns>
        Task<IApiWalletCreateImportableWalletPostApiResponse> ApiWalletCreateImportableWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateImportableWalletPostApiResponse"/>?&gt;</returns>
        Task<IApiWalletCreateImportableWalletPostApiResponse?> ApiWalletCreateImportableWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreatePostApiResponse"/>&gt;</returns>
        Task<IApiWalletCreatePostApiResponse> ApiWalletCreatePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreatePostApiResponse"/>?&gt;</returns>
        Task<IApiWalletCreatePostApiResponse?> ApiWalletCreatePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the details of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletDetailsGetApiResponse"/>&gt;</returns>
        Task<IApiWalletDetailsGetApiResponse> ApiWalletDetailsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the details of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletDetailsGetApiResponse"/>?&gt;</returns>
        Task<IApiWalletDetailsGetApiResponse?> ApiWalletDetailsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Encrypt a wallet. this wallet created  cannot be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptWalletDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletEncryptWalletPostApiResponse"/>&gt;</returns>
        Task<IApiWalletEncryptWalletPostApiResponse> ApiWalletEncryptWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<EncryptWalletDto> encryptWalletDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Encrypt a wallet. this wallet created  cannot be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptWalletDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletEncryptWalletPostApiResponse"/>?&gt;</returns>
        Task<IApiWalletEncryptWalletPostApiResponse?> ApiWalletEncryptWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<EncryptWalletDto> encryptWalletDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="importWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletImportWalletPostApiResponse"/>&gt;</returns>
        Task<IApiWalletImportWalletPostApiResponse> ApiWalletImportWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<ImportWalletdto> importWalletdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="importWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletImportWalletPostApiResponse"/>?&gt;</returns>
        Task<IApiWalletImportWalletPostApiResponse?> ApiWalletImportWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<ImportWalletdto> importWalletdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the official address of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletOfficialAddressGetApiResponse"/>&gt;</returns>
        Task<IApiWalletOfficialAddressGetApiResponse> ApiWalletOfficialAddressGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the official address of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletOfficialAddressGetApiResponse"/>?&gt;</returns>
        Task<IApiWalletOfficialAddressGetApiResponse?> ApiWalletOfficialAddressGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set the mnemonics of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="setWalletMnemonicsdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletSetWalletMnemonicsPostApiResponse"/>&gt;</returns>
        Task<IApiWalletSetWalletMnemonicsPostApiResponse> ApiWalletSetWalletMnemonicsPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<SetWalletMnemonicsdto> setWalletMnemonicsdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set the mnemonics of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="setWalletMnemonicsdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletSetWalletMnemonicsPostApiResponse"/>?&gt;</returns>
        Task<IApiWalletSetWalletMnemonicsPostApiResponse?> ApiWalletSetWalletMnemonicsPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<SetWalletMnemonicsdto> setWalletMnemonicsdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sign a message using the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="signMessageUsingWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletSignWalletMessagePostApiResponse"/>&gt;</returns>
        Task<IApiWalletSignWalletMessagePostApiResponse> ApiWalletSignWalletMessagePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<SignMessageUsingWalletdto> signMessageUsingWalletdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sign a message using the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="signMessageUsingWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletSignWalletMessagePostApiResponse"/>?&gt;</returns>
        Task<IApiWalletSignWalletMessagePostApiResponse?> ApiWalletSignWalletMessagePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<SignMessageUsingWalletdto> signMessageUsingWalletdto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the transactions of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="skip"> (optional, default to 10)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletTransactionsGetApiResponse"/>&gt;</returns>
        Task<IApiWalletTransactionsGetApiResponse> ApiWalletTransactionsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<int> skip = default, Option<int> count = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the transactions of a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="skip"> (optional, default to 10)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletTransactionsGetApiResponse"/>?&gt;</returns>
        Task<IApiWalletTransactionsGetApiResponse?> ApiWalletTransactionsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<int> skip = default, Option<int> count = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the balance of a specific address in a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletAddressBalanceGetApiResponse"/>&gt;</returns>
        Task<IApiWalletWalletAddressBalanceGetApiResponse> ApiWalletWalletAddressBalanceGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the balance of a specific address in a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletAddressBalanceGetApiResponse"/>?&gt;</returns>
        Task<IApiWalletWalletAddressBalanceGetApiResponse?> ApiWalletWalletAddressBalanceGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the transactions of a specific address in a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletAddressTransactionsGetApiResponse"/>&gt;</returns>
        Task<IApiWalletWalletAddressTransactionsGetApiResponse> ApiWalletWalletAddressTransactionsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the transactions of a specific address in a wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletAddressTransactionsGetApiResponse"/>?&gt;</returns>
        Task<IApiWalletWalletAddressTransactionsGetApiResponse?> ApiWalletWalletAddressTransactionsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// default addresss of a wallet without private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="addressType"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletDefaultAddressGetApiResponse"/>&gt;</returns>
        Task<IApiWalletWalletDefaultAddressGetApiResponse> ApiWalletWalletDefaultAddressGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> mnemonics = default, Option<int> addressType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// default addresss of a wallet without private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="addressType"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletDefaultAddressGetApiResponse"/>?&gt;</returns>
        Task<IApiWalletWalletDefaultAddressGetApiResponse?> ApiWalletWalletDefaultAddressGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> mnemonics = default, Option<int> addressType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// default addresss of a wallet with private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="addressType"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletDefaultAddressV2GetApiResponse"/>&gt;</returns>
        Task<IApiWalletWalletDefaultAddressV2GetApiResponse> ApiWalletWalletDefaultAddressV2GetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> mnemonics = default, Option<int> addressType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// default addresss of a wallet with private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="addressType"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletDefaultAddressV2GetApiResponse"/>?&gt;</returns>
        Task<IApiWalletWalletDefaultAddressV2GetApiResponse?> ApiWalletWalletDefaultAddressV2GetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> mnemonics = default, Option<int> addressType = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IApiWalletAddressesGetApiResponse"/>
    /// </summary>
    public interface IApiWalletAddressesGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletBalanceGetApiResponse"/>
    /// </summary>
    public interface IApiWalletBalanceGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletChangePassphrasePostApiResponse"/>
    /// </summary>
    public interface IApiWalletChangePassphrasePostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletCreateEncryptedWalletPostApiResponse"/>
    /// </summary>
    public interface IApiWalletCreateEncryptedWalletPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletCreateImportableEncryptedWalletPostApiResponse"/>
    /// </summary>
    public interface IApiWalletCreateImportableEncryptedWalletPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletCreateImportableWalletPostApiResponse"/>
    /// </summary>
    public interface IApiWalletCreateImportableWalletPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletCreatePostApiResponse"/>
    /// </summary>
    public interface IApiWalletCreatePostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletDetailsGetApiResponse"/>
    /// </summary>
    public interface IApiWalletDetailsGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletEncryptWalletPostApiResponse"/>
    /// </summary>
    public interface IApiWalletEncryptWalletPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletImportWalletPostApiResponse"/>
    /// </summary>
    public interface IApiWalletImportWalletPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletOfficialAddressGetApiResponse"/>
    /// </summary>
    public interface IApiWalletOfficialAddressGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletSetWalletMnemonicsPostApiResponse"/>
    /// </summary>
    public interface IApiWalletSetWalletMnemonicsPostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletSignWalletMessagePostApiResponse"/>
    /// </summary>
    public interface IApiWalletSignWalletMessagePostApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletTransactionsGetApiResponse"/>
    /// </summary>
    public interface IApiWalletTransactionsGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletWalletAddressBalanceGetApiResponse"/>
    /// </summary>
    public interface IApiWalletWalletAddressBalanceGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletWalletAddressTransactionsGetApiResponse"/>
    /// </summary>
    public interface IApiWalletWalletAddressTransactionsGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletWalletDefaultAddressGetApiResponse"/>
    /// </summary>
    public interface IApiWalletWalletDefaultAddressGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiWalletWalletDefaultAddressV2GetApiResponse"/>
    /// </summary>
    public interface IApiWalletWalletDefaultAddressV2GetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WalletApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletAddressesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletAddressesGet;

        internal void ExecuteOnApiWalletAddressesGet(WalletApi.ApiWalletAddressesGetApiResponse apiResponse)
        {
            OnApiWalletAddressesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletAddressesGet(Exception exception)
        {
            OnErrorApiWalletAddressesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletBalanceGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletBalanceGet;

        internal void ExecuteOnApiWalletBalanceGet(WalletApi.ApiWalletBalanceGetApiResponse apiResponse)
        {
            OnApiWalletBalanceGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletBalanceGet(Exception exception)
        {
            OnErrorApiWalletBalanceGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletChangePassphrasePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletChangePassphrasePost;

        internal void ExecuteOnApiWalletChangePassphrasePost(WalletApi.ApiWalletChangePassphrasePostApiResponse apiResponse)
        {
            OnApiWalletChangePassphrasePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletChangePassphrasePost(Exception exception)
        {
            OnErrorApiWalletChangePassphrasePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletCreateEncryptedWalletPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletCreateEncryptedWalletPost;

        internal void ExecuteOnApiWalletCreateEncryptedWalletPost(WalletApi.ApiWalletCreateEncryptedWalletPostApiResponse apiResponse)
        {
            OnApiWalletCreateEncryptedWalletPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletCreateEncryptedWalletPost(Exception exception)
        {
            OnErrorApiWalletCreateEncryptedWalletPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletCreateImportableEncryptedWalletPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletCreateImportableEncryptedWalletPost;

        internal void ExecuteOnApiWalletCreateImportableEncryptedWalletPost(WalletApi.ApiWalletCreateImportableEncryptedWalletPostApiResponse apiResponse)
        {
            OnApiWalletCreateImportableEncryptedWalletPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletCreateImportableEncryptedWalletPost(Exception exception)
        {
            OnErrorApiWalletCreateImportableEncryptedWalletPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletCreateImportableWalletPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletCreateImportableWalletPost;

        internal void ExecuteOnApiWalletCreateImportableWalletPost(WalletApi.ApiWalletCreateImportableWalletPostApiResponse apiResponse)
        {
            OnApiWalletCreateImportableWalletPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletCreateImportableWalletPost(Exception exception)
        {
            OnErrorApiWalletCreateImportableWalletPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletCreatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletCreatePost;

        internal void ExecuteOnApiWalletCreatePost(WalletApi.ApiWalletCreatePostApiResponse apiResponse)
        {
            OnApiWalletCreatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletCreatePost(Exception exception)
        {
            OnErrorApiWalletCreatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletDetailsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletDetailsGet;

        internal void ExecuteOnApiWalletDetailsGet(WalletApi.ApiWalletDetailsGetApiResponse apiResponse)
        {
            OnApiWalletDetailsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletDetailsGet(Exception exception)
        {
            OnErrorApiWalletDetailsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletEncryptWalletPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletEncryptWalletPost;

        internal void ExecuteOnApiWalletEncryptWalletPost(WalletApi.ApiWalletEncryptWalletPostApiResponse apiResponse)
        {
            OnApiWalletEncryptWalletPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletEncryptWalletPost(Exception exception)
        {
            OnErrorApiWalletEncryptWalletPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletImportWalletPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletImportWalletPost;

        internal void ExecuteOnApiWalletImportWalletPost(WalletApi.ApiWalletImportWalletPostApiResponse apiResponse)
        {
            OnApiWalletImportWalletPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletImportWalletPost(Exception exception)
        {
            OnErrorApiWalletImportWalletPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletOfficialAddressGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletOfficialAddressGet;

        internal void ExecuteOnApiWalletOfficialAddressGet(WalletApi.ApiWalletOfficialAddressGetApiResponse apiResponse)
        {
            OnApiWalletOfficialAddressGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletOfficialAddressGet(Exception exception)
        {
            OnErrorApiWalletOfficialAddressGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletSetWalletMnemonicsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletSetWalletMnemonicsPost;

        internal void ExecuteOnApiWalletSetWalletMnemonicsPost(WalletApi.ApiWalletSetWalletMnemonicsPostApiResponse apiResponse)
        {
            OnApiWalletSetWalletMnemonicsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletSetWalletMnemonicsPost(Exception exception)
        {
            OnErrorApiWalletSetWalletMnemonicsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletSignWalletMessagePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletSignWalletMessagePost;

        internal void ExecuteOnApiWalletSignWalletMessagePost(WalletApi.ApiWalletSignWalletMessagePostApiResponse apiResponse)
        {
            OnApiWalletSignWalletMessagePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletSignWalletMessagePost(Exception exception)
        {
            OnErrorApiWalletSignWalletMessagePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletTransactionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletTransactionsGet;

        internal void ExecuteOnApiWalletTransactionsGet(WalletApi.ApiWalletTransactionsGetApiResponse apiResponse)
        {
            OnApiWalletTransactionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletTransactionsGet(Exception exception)
        {
            OnErrorApiWalletTransactionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletWalletAddressBalanceGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletWalletAddressBalanceGet;

        internal void ExecuteOnApiWalletWalletAddressBalanceGet(WalletApi.ApiWalletWalletAddressBalanceGetApiResponse apiResponse)
        {
            OnApiWalletWalletAddressBalanceGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletWalletAddressBalanceGet(Exception exception)
        {
            OnErrorApiWalletWalletAddressBalanceGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletWalletAddressTransactionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletWalletAddressTransactionsGet;

        internal void ExecuteOnApiWalletWalletAddressTransactionsGet(WalletApi.ApiWalletWalletAddressTransactionsGetApiResponse apiResponse)
        {
            OnApiWalletWalletAddressTransactionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletWalletAddressTransactionsGet(Exception exception)
        {
            OnErrorApiWalletWalletAddressTransactionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletWalletDefaultAddressGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletWalletDefaultAddressGet;

        internal void ExecuteOnApiWalletWalletDefaultAddressGet(WalletApi.ApiWalletWalletDefaultAddressGetApiResponse apiResponse)
        {
            OnApiWalletWalletDefaultAddressGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletWalletDefaultAddressGet(Exception exception)
        {
            OnErrorApiWalletWalletDefaultAddressGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiWalletWalletDefaultAddressV2Get;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiWalletWalletDefaultAddressV2Get;

        internal void ExecuteOnApiWalletWalletDefaultAddressV2Get(WalletApi.ApiWalletWalletDefaultAddressV2GetApiResponse apiResponse)
        {
            OnApiWalletWalletDefaultAddressV2Get?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiWalletWalletDefaultAddressV2Get(Exception exception)
        {
            OnErrorApiWalletWalletDefaultAddressV2Get?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class WalletApi : IWalletApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<WalletApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public WalletApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi(ILogger<WalletApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, WalletApiEvents walletApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<WalletApi>();
            HttpClient = httpClient;
            Events = walletApiEvents;
        }

        partial void FormatApiWalletAddressesGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <returns></returns>
        private void ValidateApiWalletAddressesGet(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        private void AfterApiWalletAddressesGetDefaultImplementation(IApiWalletAddressesGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletAddressesGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        partial void AfterApiWalletAddressesGet(ref bool suppressDefaultLog, IApiWalletAddressesGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        private void OnErrorApiWalletAddressesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletAddressesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        partial void OnErrorApiWalletAddressesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName);

        /// <summary>
        /// Get all addresses of a wallet. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletAddressesGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletAddressesGetApiResponse?> ApiWalletAddressesGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletAddressesGetAsync(nodeUrlOrApiAccessKey, walletName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all addresses of a wallet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletAddressesGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletAddressesGetApiResponse> ApiWalletAddressesGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletAddressesGet(nodeUrlOrApiAccessKey, walletName);

                FormatApiWalletAddressesGet(ref nodeUrlOrApiAccessKey, ref walletName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/addresses"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/addresses");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletAddressesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletAddressesGetApiResponse>();

                        ApiWalletAddressesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/addresses", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletAddressesGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName);

                        Events.ExecuteOnApiWalletAddressesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletAddressesGetDefaultImplementation(e, "/api/Wallet/addresses", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName);
                Events.ExecuteOnErrorApiWalletAddressesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletAddressesGetApiResponse"/>
        /// </summary>
        public partial class ApiWalletAddressesGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletAddressesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletAddressesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletAddressesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletAddressesGetApiResponse(ILogger<ApiWalletAddressesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletBalanceGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <returns></returns>
        private void ValidateApiWalletBalanceGet(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        private void AfterApiWalletBalanceGetDefaultImplementation(IApiWalletBalanceGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletBalanceGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        partial void AfterApiWalletBalanceGet(ref bool suppressDefaultLog, IApiWalletBalanceGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        private void OnErrorApiWalletBalanceGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletBalanceGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        partial void OnErrorApiWalletBalanceGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName);

        /// <summary>
        /// Get the balance of a wallet. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletBalanceGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletBalanceGetApiResponse?> ApiWalletBalanceGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletBalanceGetAsync(nodeUrlOrApiAccessKey, walletName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the balance of a wallet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletBalanceGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletBalanceGetApiResponse> ApiWalletBalanceGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletBalanceGet(nodeUrlOrApiAccessKey, walletName);

                FormatApiWalletBalanceGet(ref nodeUrlOrApiAccessKey, ref walletName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/balance"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/balance");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletBalanceGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletBalanceGetApiResponse>();

                        ApiWalletBalanceGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/balance", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletBalanceGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName);

                        Events.ExecuteOnApiWalletBalanceGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletBalanceGetDefaultImplementation(e, "/api/Wallet/balance", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName);
                Events.ExecuteOnErrorApiWalletBalanceGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletBalanceGetApiResponse"/>
        /// </summary>
        public partial class ApiWalletBalanceGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletBalanceGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletBalanceGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletBalanceGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletBalanceGetApiResponse(ILogger<ApiWalletBalanceGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletChangePassphrasePost(ref Option<string> nodeUrlOrApiAccessKey, Option<ChangePassphrasedto> changePassphrasedto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="changePassphrasedto"></param>
        /// <returns></returns>
        private void ValidateApiWalletChangePassphrasePost(Option<string> nodeUrlOrApiAccessKey, Option<ChangePassphrasedto> changePassphrasedto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (changePassphrasedto.IsSet && changePassphrasedto.Value == null)
                throw new ArgumentNullException(nameof(changePassphrasedto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="changePassphrasedto"></param>
        private void AfterApiWalletChangePassphrasePostDefaultImplementation(IApiWalletChangePassphrasePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<ChangePassphrasedto> changePassphrasedto)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletChangePassphrasePost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, changePassphrasedto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="changePassphrasedto"></param>
        partial void AfterApiWalletChangePassphrasePost(ref bool suppressDefaultLog, IApiWalletChangePassphrasePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<ChangePassphrasedto> changePassphrasedto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="changePassphrasedto"></param>
        private void OnErrorApiWalletChangePassphrasePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<ChangePassphrasedto> changePassphrasedto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletChangePassphrasePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, changePassphrasedto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="changePassphrasedto"></param>
        partial void OnErrorApiWalletChangePassphrasePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<ChangePassphrasedto> changePassphrasedto);

        /// <summary>
        /// Change the passphrase of a wallet. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="changePassphrasedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletChangePassphrasePostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletChangePassphrasePostApiResponse?> ApiWalletChangePassphrasePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<ChangePassphrasedto> changePassphrasedto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletChangePassphrasePostAsync(nodeUrlOrApiAccessKey, changePassphrasedto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change the passphrase of a wallet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="changePassphrasedto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletChangePassphrasePostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletChangePassphrasePostApiResponse> ApiWalletChangePassphrasePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<ChangePassphrasedto> changePassphrasedto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletChangePassphrasePost(nodeUrlOrApiAccessKey, changePassphrasedto);

                FormatApiWalletChangePassphrasePost(ref nodeUrlOrApiAccessKey, changePassphrasedto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/change-passphrase"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/change-passphrase");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (changePassphrasedto.IsSet)
                        httpRequestMessageLocalVar.Content = (changePassphrasedto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(changePassphrasedto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletChangePassphrasePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletChangePassphrasePostApiResponse>();

                        ApiWalletChangePassphrasePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/change-passphrase", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletChangePassphrasePostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, changePassphrasedto);

                        Events.ExecuteOnApiWalletChangePassphrasePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletChangePassphrasePostDefaultImplementation(e, "/api/Wallet/change-passphrase", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, changePassphrasedto);
                Events.ExecuteOnErrorApiWalletChangePassphrasePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletChangePassphrasePostApiResponse"/>
        /// </summary>
        public partial class ApiWalletChangePassphrasePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletChangePassphrasePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletChangePassphrasePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletChangePassphrasePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletChangePassphrasePostApiResponse(ILogger<ApiWalletChangePassphrasePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletCreateEncryptedWalletPost(ref Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        /// <returns></returns>
        private void ValidateApiWalletCreateEncryptedWalletPost(Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (createWalletRequest.IsSet && createWalletRequest.Value == null)
                throw new ArgumentNullException(nameof(createWalletRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        private void AfterApiWalletCreateEncryptedWalletPostDefaultImplementation(IApiWalletCreateEncryptedWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletCreateEncryptedWalletPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        partial void AfterApiWalletCreateEncryptedWalletPost(ref bool suppressDefaultLog, IApiWalletCreateEncryptedWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        private void OnErrorApiWalletCreateEncryptedWalletPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletCreateEncryptedWalletPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        partial void OnErrorApiWalletCreateEncryptedWalletPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateEncryptedWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletCreateEncryptedWalletPostApiResponse?> ApiWalletCreateEncryptedWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletCreateEncryptedWalletPostAsync(nodeUrlOrApiAccessKey, createWalletRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateEncryptedWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletCreateEncryptedWalletPostApiResponse> ApiWalletCreateEncryptedWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletCreateEncryptedWalletPost(nodeUrlOrApiAccessKey, createWalletRequest);

                FormatApiWalletCreateEncryptedWalletPost(ref nodeUrlOrApiAccessKey, createWalletRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/create-encrypted-wallet"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/create-encrypted-wallet");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (createWalletRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createWalletRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createWalletRequest.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletCreateEncryptedWalletPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletCreateEncryptedWalletPostApiResponse>();

                        ApiWalletCreateEncryptedWalletPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/create-encrypted-wallet", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletCreateEncryptedWalletPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);

                        Events.ExecuteOnApiWalletCreateEncryptedWalletPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletCreateEncryptedWalletPostDefaultImplementation(e, "/api/Wallet/create-encrypted-wallet", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, createWalletRequest);
                Events.ExecuteOnErrorApiWalletCreateEncryptedWalletPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletCreateEncryptedWalletPostApiResponse"/>
        /// </summary>
        public partial class ApiWalletCreateEncryptedWalletPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletCreateEncryptedWalletPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletCreateEncryptedWalletPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletCreateEncryptedWalletPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletCreateEncryptedWalletPostApiResponse(ILogger<ApiWalletCreateEncryptedWalletPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletCreateImportableEncryptedWalletPost(ref Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        /// <returns></returns>
        private void ValidateApiWalletCreateImportableEncryptedWalletPost(Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (createWalletRequest.IsSet && createWalletRequest.Value == null)
                throw new ArgumentNullException(nameof(createWalletRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        private void AfterApiWalletCreateImportableEncryptedWalletPostDefaultImplementation(IApiWalletCreateImportableEncryptedWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletCreateImportableEncryptedWalletPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        partial void AfterApiWalletCreateImportableEncryptedWalletPost(ref bool suppressDefaultLog, IApiWalletCreateImportableEncryptedWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        private void OnErrorApiWalletCreateImportableEncryptedWalletPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletCreateImportableEncryptedWalletPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        partial void OnErrorApiWalletCreateImportableEncryptedWalletPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateImportableEncryptedWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletCreateImportableEncryptedWalletPostApiResponse?> ApiWalletCreateImportableEncryptedWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletCreateImportableEncryptedWalletPostAsync(nodeUrlOrApiAccessKey, createWalletRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateImportableEncryptedWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletCreateImportableEncryptedWalletPostApiResponse> ApiWalletCreateImportableEncryptedWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletCreateImportableEncryptedWalletPost(nodeUrlOrApiAccessKey, createWalletRequest);

                FormatApiWalletCreateImportableEncryptedWalletPost(ref nodeUrlOrApiAccessKey, createWalletRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/create-importable-encrypted-wallet"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/create-importable-encrypted-wallet");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (createWalletRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createWalletRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createWalletRequest.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletCreateImportableEncryptedWalletPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletCreateImportableEncryptedWalletPostApiResponse>();

                        ApiWalletCreateImportableEncryptedWalletPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/create-importable-encrypted-wallet", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletCreateImportableEncryptedWalletPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);

                        Events.ExecuteOnApiWalletCreateImportableEncryptedWalletPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletCreateImportableEncryptedWalletPostDefaultImplementation(e, "/api/Wallet/create-importable-encrypted-wallet", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, createWalletRequest);
                Events.ExecuteOnErrorApiWalletCreateImportableEncryptedWalletPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletCreateImportableEncryptedWalletPostApiResponse"/>
        /// </summary>
        public partial class ApiWalletCreateImportableEncryptedWalletPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletCreateImportableEncryptedWalletPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletCreateImportableEncryptedWalletPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletCreateImportableEncryptedWalletPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletCreateImportableEncryptedWalletPostApiResponse(ILogger<ApiWalletCreateImportableEncryptedWalletPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletCreateImportableWalletPost(ref Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        /// <returns></returns>
        private void ValidateApiWalletCreateImportableWalletPost(Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (createWalletRequest.IsSet && createWalletRequest.Value == null)
                throw new ArgumentNullException(nameof(createWalletRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        private void AfterApiWalletCreateImportableWalletPostDefaultImplementation(IApiWalletCreateImportableWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletCreateImportableWalletPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        partial void AfterApiWalletCreateImportableWalletPost(ref bool suppressDefaultLog, IApiWalletCreateImportableWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        private void OnErrorApiWalletCreateImportableWalletPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletCreateImportableWalletPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        partial void OnErrorApiWalletCreateImportableWalletPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateImportableWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletCreateImportableWalletPostApiResponse?> ApiWalletCreateImportableWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletCreateImportableWalletPostAsync(nodeUrlOrApiAccessKey, createWalletRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreateImportableWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletCreateImportableWalletPostApiResponse> ApiWalletCreateImportableWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletCreateImportableWalletPost(nodeUrlOrApiAccessKey, createWalletRequest);

                FormatApiWalletCreateImportableWalletPost(ref nodeUrlOrApiAccessKey, createWalletRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/create-importable-wallet"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/create-importable-wallet");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (createWalletRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createWalletRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createWalletRequest.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletCreateImportableWalletPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletCreateImportableWalletPostApiResponse>();

                        ApiWalletCreateImportableWalletPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/create-importable-wallet", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletCreateImportableWalletPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);

                        Events.ExecuteOnApiWalletCreateImportableWalletPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletCreateImportableWalletPostDefaultImplementation(e, "/api/Wallet/create-importable-wallet", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, createWalletRequest);
                Events.ExecuteOnErrorApiWalletCreateImportableWalletPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletCreateImportableWalletPostApiResponse"/>
        /// </summary>
        public partial class ApiWalletCreateImportableWalletPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletCreateImportableWalletPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletCreateImportableWalletPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletCreateImportableWalletPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletCreateImportableWalletPostApiResponse(ILogger<ApiWalletCreateImportableWalletPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletCreatePost(ref Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        /// <returns></returns>
        private void ValidateApiWalletCreatePost(Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (createWalletRequest.IsSet && createWalletRequest.Value == null)
                throw new ArgumentNullException(nameof(createWalletRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        private void AfterApiWalletCreatePostDefaultImplementation(IApiWalletCreatePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletCreatePost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        partial void AfterApiWalletCreatePost(ref bool suppressDefaultLog, IApiWalletCreatePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        private void OnErrorApiWalletCreatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletCreatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="createWalletRequest"></param>
        partial void OnErrorApiWalletCreatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<CreateWalletRequest> createWalletRequest);

        /// <summary>
        /// Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreatePostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletCreatePostApiResponse?> ApiWalletCreatePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletCreatePostAsync(nodeUrlOrApiAccessKey, createWalletRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="createWalletRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletCreatePostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletCreatePostApiResponse> ApiWalletCreatePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<CreateWalletRequest> createWalletRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletCreatePost(nodeUrlOrApiAccessKey, createWalletRequest);

                FormatApiWalletCreatePost(ref nodeUrlOrApiAccessKey, createWalletRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/create"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/create");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (createWalletRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createWalletRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createWalletRequest.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletCreatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletCreatePostApiResponse>();

                        ApiWalletCreatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletCreatePostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, createWalletRequest);

                        Events.ExecuteOnApiWalletCreatePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletCreatePostDefaultImplementation(e, "/api/Wallet/create", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, createWalletRequest);
                Events.ExecuteOnErrorApiWalletCreatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletCreatePostApiResponse"/>
        /// </summary>
        public partial class ApiWalletCreatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletCreatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletCreatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletCreatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletCreatePostApiResponse(ILogger<ApiWalletCreatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletDetailsGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <returns></returns>
        private void ValidateApiWalletDetailsGet(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        private void AfterApiWalletDetailsGetDefaultImplementation(IApiWalletDetailsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletDetailsGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        partial void AfterApiWalletDetailsGet(ref bool suppressDefaultLog, IApiWalletDetailsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        private void OnErrorApiWalletDetailsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletDetailsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        partial void OnErrorApiWalletDetailsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName);

        /// <summary>
        /// Get the details of a wallet. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletDetailsGetApiResponse?> ApiWalletDetailsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletDetailsGetAsync(nodeUrlOrApiAccessKey, walletName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the details of a wallet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletDetailsGetApiResponse> ApiWalletDetailsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletDetailsGet(nodeUrlOrApiAccessKey, walletName);

                FormatApiWalletDetailsGet(ref nodeUrlOrApiAccessKey, ref walletName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/details"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/details");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (nodeUrlOrApiAccessKey.IsSet)
                        parseQueryStringLocalVar["nodeUrlOrApiAccessKey"] = ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value);

                    if (walletName.IsSet)
                        parseQueryStringLocalVar["walletName"] = ClientUtils.ParameterToString(walletName.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletDetailsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletDetailsGetApiResponse>();

                        ApiWalletDetailsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/details", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletDetailsGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName);

                        Events.ExecuteOnApiWalletDetailsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletDetailsGetDefaultImplementation(e, "/api/Wallet/details", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName);
                Events.ExecuteOnErrorApiWalletDetailsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletDetailsGetApiResponse"/>
        /// </summary>
        public partial class ApiWalletDetailsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletDetailsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletDetailsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletDetailsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletDetailsGetApiResponse(ILogger<ApiWalletDetailsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletEncryptWalletPost(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, Option<EncryptWalletDto> encryptWalletDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptWalletDto"></param>
        /// <returns></returns>
        private void ValidateApiWalletEncryptWalletPost(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<EncryptWalletDto> encryptWalletDto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (encryptWalletDto.IsSet && encryptWalletDto.Value == null)
                throw new ArgumentNullException(nameof(encryptWalletDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptWalletDto"></param>
        private void AfterApiWalletEncryptWalletPostDefaultImplementation(IApiWalletEncryptWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<EncryptWalletDto> encryptWalletDto)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletEncryptWalletPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptWalletDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptWalletDto"></param>
        partial void AfterApiWalletEncryptWalletPost(ref bool suppressDefaultLog, IApiWalletEncryptWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<EncryptWalletDto> encryptWalletDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptWalletDto"></param>
        private void OnErrorApiWalletEncryptWalletPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<EncryptWalletDto> encryptWalletDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletEncryptWalletPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, encryptWalletDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptWalletDto"></param>
        partial void OnErrorApiWalletEncryptWalletPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<EncryptWalletDto> encryptWalletDto);

        /// <summary>
        /// Encrypt a wallet. this wallet created  cannot be imported to other wallets. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptWalletDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletEncryptWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletEncryptWalletPostApiResponse?> ApiWalletEncryptWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<EncryptWalletDto> encryptWalletDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletEncryptWalletPostAsync(nodeUrlOrApiAccessKey, walletName, encryptWalletDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Encrypt a wallet. this wallet created  cannot be imported to other wallets. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptWalletDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletEncryptWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletEncryptWalletPostApiResponse> ApiWalletEncryptWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<EncryptWalletDto> encryptWalletDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletEncryptWalletPost(nodeUrlOrApiAccessKey, walletName, encryptWalletDto);

                FormatApiWalletEncryptWalletPost(ref nodeUrlOrApiAccessKey, ref walletName, encryptWalletDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/encrypt-wallet"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/encrypt-wallet");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    if (encryptWalletDto.IsSet)
                        httpRequestMessageLocalVar.Content = (encryptWalletDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(encryptWalletDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletEncryptWalletPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletEncryptWalletPostApiResponse>();

                        ApiWalletEncryptWalletPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/encrypt-wallet", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletEncryptWalletPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptWalletDto);

                        Events.ExecuteOnApiWalletEncryptWalletPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletEncryptWalletPostDefaultImplementation(e, "/api/Wallet/encrypt-wallet", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, encryptWalletDto);
                Events.ExecuteOnErrorApiWalletEncryptWalletPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletEncryptWalletPostApiResponse"/>
        /// </summary>
        public partial class ApiWalletEncryptWalletPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletEncryptWalletPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletEncryptWalletPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletEncryptWalletPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletEncryptWalletPostApiResponse(ILogger<ApiWalletEncryptWalletPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletImportWalletPost(ref Option<string> nodeUrlOrApiAccessKey, Option<ImportWalletdto> importWalletdto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="importWalletdto"></param>
        /// <returns></returns>
        private void ValidateApiWalletImportWalletPost(Option<string> nodeUrlOrApiAccessKey, Option<ImportWalletdto> importWalletdto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (importWalletdto.IsSet && importWalletdto.Value == null)
                throw new ArgumentNullException(nameof(importWalletdto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="importWalletdto"></param>
        private void AfterApiWalletImportWalletPostDefaultImplementation(IApiWalletImportWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<ImportWalletdto> importWalletdto)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletImportWalletPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, importWalletdto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="importWalletdto"></param>
        partial void AfterApiWalletImportWalletPost(ref bool suppressDefaultLog, IApiWalletImportWalletPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<ImportWalletdto> importWalletdto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="importWalletdto"></param>
        private void OnErrorApiWalletImportWalletPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<ImportWalletdto> importWalletdto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletImportWalletPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, importWalletdto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="importWalletdto"></param>
        partial void OnErrorApiWalletImportWalletPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<ImportWalletdto> importWalletdto);

        /// <summary>
        /// Import a wallet. this wallet created will be encrypted and can be imported to other wallets. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="importWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletImportWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletImportWalletPostApiResponse?> ApiWalletImportWalletPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<ImportWalletdto> importWalletdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletImportWalletPostAsync(nodeUrlOrApiAccessKey, importWalletdto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Import a wallet. this wallet created will be encrypted and can be imported to other wallets. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="importWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletImportWalletPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletImportWalletPostApiResponse> ApiWalletImportWalletPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<ImportWalletdto> importWalletdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletImportWalletPost(nodeUrlOrApiAccessKey, importWalletdto);

                FormatApiWalletImportWalletPost(ref nodeUrlOrApiAccessKey, importWalletdto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/import-wallet"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/import-wallet");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (importWalletdto.IsSet)
                        httpRequestMessageLocalVar.Content = (importWalletdto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(importWalletdto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletImportWalletPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletImportWalletPostApiResponse>();

                        ApiWalletImportWalletPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/import-wallet", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletImportWalletPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, importWalletdto);

                        Events.ExecuteOnApiWalletImportWalletPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletImportWalletPostDefaultImplementation(e, "/api/Wallet/import-wallet", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, importWalletdto);
                Events.ExecuteOnErrorApiWalletImportWalletPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletImportWalletPostApiResponse"/>
        /// </summary>
        public partial class ApiWalletImportWalletPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletImportWalletPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletImportWalletPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletImportWalletPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletImportWalletPostApiResponse(ILogger<ApiWalletImportWalletPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletOfficialAddressGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <returns></returns>
        private void ValidateApiWalletOfficialAddressGet(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        private void AfterApiWalletOfficialAddressGetDefaultImplementation(IApiWalletOfficialAddressGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletOfficialAddressGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        partial void AfterApiWalletOfficialAddressGet(ref bool suppressDefaultLog, IApiWalletOfficialAddressGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        private void OnErrorApiWalletOfficialAddressGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletOfficialAddressGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        partial void OnErrorApiWalletOfficialAddressGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName);

        /// <summary>
        /// Get the official address of a wallet. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletOfficialAddressGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletOfficialAddressGetApiResponse?> ApiWalletOfficialAddressGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletOfficialAddressGetAsync(nodeUrlOrApiAccessKey, walletName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the official address of a wallet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletOfficialAddressGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletOfficialAddressGetApiResponse> ApiWalletOfficialAddressGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletOfficialAddressGet(nodeUrlOrApiAccessKey, walletName);

                FormatApiWalletOfficialAddressGet(ref nodeUrlOrApiAccessKey, ref walletName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/official-address"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/official-address");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletOfficialAddressGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletOfficialAddressGetApiResponse>();

                        ApiWalletOfficialAddressGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/official-address", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletOfficialAddressGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName);

                        Events.ExecuteOnApiWalletOfficialAddressGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletOfficialAddressGetDefaultImplementation(e, "/api/Wallet/official-address", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName);
                Events.ExecuteOnErrorApiWalletOfficialAddressGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletOfficialAddressGetApiResponse"/>
        /// </summary>
        public partial class ApiWalletOfficialAddressGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletOfficialAddressGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletOfficialAddressGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletOfficialAddressGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletOfficialAddressGetApiResponse(ILogger<ApiWalletOfficialAddressGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletSetWalletMnemonicsPost(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, ref Option<string> encryptedPassphrase, Option<SetWalletMnemonicsdto> setWalletMnemonicsdto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="setWalletMnemonicsdto"></param>
        /// <returns></returns>
        private void ValidateApiWalletSetWalletMnemonicsPost(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<SetWalletMnemonicsdto> setWalletMnemonicsdto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (encryptedPassphrase.IsSet && encryptedPassphrase.Value == null)
                throw new ArgumentNullException(nameof(encryptedPassphrase));

            if (setWalletMnemonicsdto.IsSet && setWalletMnemonicsdto.Value == null)
                throw new ArgumentNullException(nameof(setWalletMnemonicsdto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="setWalletMnemonicsdto"></param>
        private void AfterApiWalletSetWalletMnemonicsPostDefaultImplementation(IApiWalletSetWalletMnemonicsPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<SetWalletMnemonicsdto> setWalletMnemonicsdto)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletSetWalletMnemonicsPost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="setWalletMnemonicsdto"></param>
        partial void AfterApiWalletSetWalletMnemonicsPost(ref bool suppressDefaultLog, IApiWalletSetWalletMnemonicsPostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<SetWalletMnemonicsdto> setWalletMnemonicsdto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="setWalletMnemonicsdto"></param>
        private void OnErrorApiWalletSetWalletMnemonicsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<SetWalletMnemonicsdto> setWalletMnemonicsdto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletSetWalletMnemonicsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="encryptedPassphrase"></param>
        /// <param name="setWalletMnemonicsdto"></param>
        partial void OnErrorApiWalletSetWalletMnemonicsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> encryptedPassphrase, Option<SetWalletMnemonicsdto> setWalletMnemonicsdto);

        /// <summary>
        /// Set the mnemonics of a wallet. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="setWalletMnemonicsdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletSetWalletMnemonicsPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletSetWalletMnemonicsPostApiResponse?> ApiWalletSetWalletMnemonicsPostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<SetWalletMnemonicsdto> setWalletMnemonicsdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletSetWalletMnemonicsPostAsync(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set the mnemonics of a wallet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="encryptedPassphrase"> (optional)</param>
        /// <param name="setWalletMnemonicsdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletSetWalletMnemonicsPostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletSetWalletMnemonicsPostApiResponse> ApiWalletSetWalletMnemonicsPostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> encryptedPassphrase = default, Option<SetWalletMnemonicsdto> setWalletMnemonicsdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletSetWalletMnemonicsPost(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto);

                FormatApiWalletSetWalletMnemonicsPost(ref nodeUrlOrApiAccessKey, ref walletName, ref encryptedPassphrase, setWalletMnemonicsdto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/set-wallet-mnemonics"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/set-wallet-mnemonics");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    if (encryptedPassphrase.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("encryptedPassphrase", ClientUtils.ParameterToString(encryptedPassphrase.Value));

                    if (setWalletMnemonicsdto.IsSet)
                        httpRequestMessageLocalVar.Content = (setWalletMnemonicsdto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(setWalletMnemonicsdto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletSetWalletMnemonicsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletSetWalletMnemonicsPostApiResponse>();

                        ApiWalletSetWalletMnemonicsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/set-wallet-mnemonics", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletSetWalletMnemonicsPostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto);

                        Events.ExecuteOnApiWalletSetWalletMnemonicsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletSetWalletMnemonicsPostDefaultImplementation(e, "/api/Wallet/set-wallet-mnemonics", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, setWalletMnemonicsdto);
                Events.ExecuteOnErrorApiWalletSetWalletMnemonicsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletSetWalletMnemonicsPostApiResponse"/>
        /// </summary>
        public partial class ApiWalletSetWalletMnemonicsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletSetWalletMnemonicsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletSetWalletMnemonicsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletSetWalletMnemonicsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletSetWalletMnemonicsPostApiResponse(ILogger<ApiWalletSetWalletMnemonicsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletSignWalletMessagePost(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, Option<SignMessageUsingWalletdto> signMessageUsingWalletdto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="signMessageUsingWalletdto"></param>
        /// <returns></returns>
        private void ValidateApiWalletSignWalletMessagePost(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<SignMessageUsingWalletdto> signMessageUsingWalletdto)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (signMessageUsingWalletdto.IsSet && signMessageUsingWalletdto.Value == null)
                throw new ArgumentNullException(nameof(signMessageUsingWalletdto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="signMessageUsingWalletdto"></param>
        private void AfterApiWalletSignWalletMessagePostDefaultImplementation(IApiWalletSignWalletMessagePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<SignMessageUsingWalletdto> signMessageUsingWalletdto)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletSignWalletMessagePost(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="signMessageUsingWalletdto"></param>
        partial void AfterApiWalletSignWalletMessagePost(ref bool suppressDefaultLog, IApiWalletSignWalletMessagePostApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<SignMessageUsingWalletdto> signMessageUsingWalletdto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="signMessageUsingWalletdto"></param>
        private void OnErrorApiWalletSignWalletMessagePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<SignMessageUsingWalletdto> signMessageUsingWalletdto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletSignWalletMessagePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="signMessageUsingWalletdto"></param>
        partial void OnErrorApiWalletSignWalletMessagePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<SignMessageUsingWalletdto> signMessageUsingWalletdto);

        /// <summary>
        /// Sign a message using the wallet. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="signMessageUsingWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletSignWalletMessagePostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletSignWalletMessagePostApiResponse?> ApiWalletSignWalletMessagePostOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<SignMessageUsingWalletdto> signMessageUsingWalletdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletSignWalletMessagePostAsync(nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Sign a message using the wallet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="signMessageUsingWalletdto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletSignWalletMessagePostApiResponse"/>&gt;</returns>
        public async Task<IApiWalletSignWalletMessagePostApiResponse> ApiWalletSignWalletMessagePostAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<SignMessageUsingWalletdto> signMessageUsingWalletdto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletSignWalletMessagePost(nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto);

                FormatApiWalletSignWalletMessagePost(ref nodeUrlOrApiAccessKey, ref walletName, signMessageUsingWalletdto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/sign-wallet-message"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/sign-wallet-message");

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    if (signMessageUsingWalletdto.IsSet)
                        httpRequestMessageLocalVar.Content = (signMessageUsingWalletdto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(signMessageUsingWalletdto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletSignWalletMessagePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletSignWalletMessagePostApiResponse>();

                        ApiWalletSignWalletMessagePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/sign-wallet-message", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletSignWalletMessagePostDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto);

                        Events.ExecuteOnApiWalletSignWalletMessagePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletSignWalletMessagePostDefaultImplementation(e, "/api/Wallet/sign-wallet-message", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, signMessageUsingWalletdto);
                Events.ExecuteOnErrorApiWalletSignWalletMessagePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletSignWalletMessagePostApiResponse"/>
        /// </summary>
        public partial class ApiWalletSignWalletMessagePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletSignWalletMessagePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletSignWalletMessagePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletSignWalletMessagePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletSignWalletMessagePostApiResponse(ILogger<ApiWalletSignWalletMessagePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletTransactionsGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, ref Option<int> skip, ref Option<int> count);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <returns></returns>
        private void ValidateApiWalletTransactionsGet(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="skip"></param>
        /// <param name="count"></param>
        private void AfterApiWalletTransactionsGetDefaultImplementation(IApiWalletTransactionsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<int> skip, Option<int> count)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletTransactionsGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, skip, count);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="skip"></param>
        /// <param name="count"></param>
        partial void AfterApiWalletTransactionsGet(ref bool suppressDefaultLog, IApiWalletTransactionsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<int> skip, Option<int> count);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="skip"></param>
        /// <param name="count"></param>
        private void OnErrorApiWalletTransactionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<int> skip, Option<int> count)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletTransactionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, skip, count);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="skip"></param>
        /// <param name="count"></param>
        partial void OnErrorApiWalletTransactionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<int> skip, Option<int> count);

        /// <summary>
        /// Get the transactions of a wallet. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="skip"> (optional, default to 10)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletTransactionsGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletTransactionsGetApiResponse?> ApiWalletTransactionsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<int> skip = default, Option<int> count = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletTransactionsGetAsync(nodeUrlOrApiAccessKey, walletName, skip, count, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the transactions of a wallet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="skip"> (optional, default to 10)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletTransactionsGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletTransactionsGetApiResponse> ApiWalletTransactionsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<int> skip = default, Option<int> count = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletTransactionsGet(nodeUrlOrApiAccessKey, walletName);

                FormatApiWalletTransactionsGet(ref nodeUrlOrApiAccessKey, ref walletName, ref skip, ref count);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/transactions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/transactions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (count.IsSet)
                        parseQueryStringLocalVar["count"] = ClientUtils.ParameterToString(count.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletTransactionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletTransactionsGetApiResponse>();

                        ApiWalletTransactionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/transactions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletTransactionsGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, skip, count);

                        Events.ExecuteOnApiWalletTransactionsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletTransactionsGetDefaultImplementation(e, "/api/Wallet/transactions", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, skip, count);
                Events.ExecuteOnErrorApiWalletTransactionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletTransactionsGetApiResponse"/>
        /// </summary>
        public partial class ApiWalletTransactionsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletTransactionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletTransactionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletTransactionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletTransactionsGetApiResponse(ILogger<ApiWalletTransactionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletWalletAddressBalanceGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, ref Option<string> address);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        private void ValidateApiWalletWalletAddressBalanceGet(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        private void AfterApiWalletWalletAddressBalanceGetDefaultImplementation(IApiWalletWalletAddressBalanceGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletWalletAddressBalanceGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, address);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        partial void AfterApiWalletWalletAddressBalanceGet(ref bool suppressDefaultLog, IApiWalletWalletAddressBalanceGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        private void OnErrorApiWalletWalletAddressBalanceGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletWalletAddressBalanceGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, address);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        partial void OnErrorApiWalletWalletAddressBalanceGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address);

        /// <summary>
        /// Get the balance of a specific address in a wallet. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletAddressBalanceGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletWalletAddressBalanceGetApiResponse?> ApiWalletWalletAddressBalanceGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletWalletAddressBalanceGetAsync(nodeUrlOrApiAccessKey, walletName, address, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the balance of a specific address in a wallet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletAddressBalanceGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletWalletAddressBalanceGetApiResponse> ApiWalletWalletAddressBalanceGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletWalletAddressBalanceGet(nodeUrlOrApiAccessKey, walletName, address);

                FormatApiWalletWalletAddressBalanceGet(ref nodeUrlOrApiAccessKey, ref walletName, ref address);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/wallet-address-balance"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/wallet-address-balance");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (address.IsSet)
                        parseQueryStringLocalVar["address"] = ClientUtils.ParameterToString(address.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (walletName.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("walletName", ClientUtils.ParameterToString(walletName.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletWalletAddressBalanceGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletWalletAddressBalanceGetApiResponse>();

                        ApiWalletWalletAddressBalanceGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/wallet-address-balance", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletWalletAddressBalanceGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, address);

                        Events.ExecuteOnApiWalletWalletAddressBalanceGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletWalletAddressBalanceGetDefaultImplementation(e, "/api/Wallet/wallet-address-balance", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, address);
                Events.ExecuteOnErrorApiWalletWalletAddressBalanceGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletWalletAddressBalanceGetApiResponse"/>
        /// </summary>
        public partial class ApiWalletWalletAddressBalanceGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletWalletAddressBalanceGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletWalletAddressBalanceGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletWalletAddressBalanceGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletWalletAddressBalanceGetApiResponse(ILogger<ApiWalletWalletAddressBalanceGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletWalletAddressTransactionsGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> walletName, ref Option<string> address);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        private void ValidateApiWalletWalletAddressTransactionsGet(Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (walletName.IsSet && walletName.Value == null)
                throw new ArgumentNullException(nameof(walletName));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        private void AfterApiWalletWalletAddressTransactionsGetDefaultImplementation(IApiWalletWalletAddressTransactionsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletWalletAddressTransactionsGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, address);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        partial void AfterApiWalletWalletAddressTransactionsGet(ref bool suppressDefaultLog, IApiWalletWalletAddressTransactionsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        private void OnErrorApiWalletWalletAddressTransactionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletWalletAddressTransactionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, walletName, address);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="walletName"></param>
        /// <param name="address"></param>
        partial void OnErrorApiWalletWalletAddressTransactionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> walletName, Option<string> address);

        /// <summary>
        /// Get the transactions of a specific address in a wallet. 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletAddressTransactionsGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletWalletAddressTransactionsGetApiResponse?> ApiWalletWalletAddressTransactionsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletWalletAddressTransactionsGetAsync(nodeUrlOrApiAccessKey, walletName, address, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the transactions of a specific address in a wallet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="walletName"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletAddressTransactionsGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletWalletAddressTransactionsGetApiResponse> ApiWalletWalletAddressTransactionsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> walletName = default, Option<string> address = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletWalletAddressTransactionsGet(nodeUrlOrApiAccessKey, walletName, address);

                FormatApiWalletWalletAddressTransactionsGet(ref nodeUrlOrApiAccessKey, ref walletName, ref address);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/wallet-address-transactions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/wallet-address-transactions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (walletName.IsSet)
                        parseQueryStringLocalVar["walletName"] = ClientUtils.ParameterToString(walletName.Value);

                    if (address.IsSet)
                        parseQueryStringLocalVar["address"] = ClientUtils.ParameterToString(address.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletWalletAddressTransactionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletWalletAddressTransactionsGetApiResponse>();

                        ApiWalletWalletAddressTransactionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/wallet-address-transactions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletWalletAddressTransactionsGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, walletName, address);

                        Events.ExecuteOnApiWalletWalletAddressTransactionsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletWalletAddressTransactionsGetDefaultImplementation(e, "/api/Wallet/wallet-address-transactions", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, walletName, address);
                Events.ExecuteOnErrorApiWalletWalletAddressTransactionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletWalletAddressTransactionsGetApiResponse"/>
        /// </summary>
        public partial class ApiWalletWalletAddressTransactionsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletWalletAddressTransactionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletWalletAddressTransactionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletWalletAddressTransactionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletWalletAddressTransactionsGetApiResponse(ILogger<ApiWalletWalletAddressTransactionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletWalletDefaultAddressGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> mnemonics, ref Option<int> addressType);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="mnemonics"></param>
        /// <returns></returns>
        private void ValidateApiWalletWalletDefaultAddressGet(Option<string> nodeUrlOrApiAccessKey, Option<string> mnemonics)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (mnemonics.IsSet && mnemonics.Value == null)
                throw new ArgumentNullException(nameof(mnemonics));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="mnemonics"></param>
        /// <param name="addressType"></param>
        private void AfterApiWalletWalletDefaultAddressGetDefaultImplementation(IApiWalletWalletDefaultAddressGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> mnemonics, Option<int> addressType)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletWalletDefaultAddressGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, mnemonics, addressType);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="mnemonics"></param>
        /// <param name="addressType"></param>
        partial void AfterApiWalletWalletDefaultAddressGet(ref bool suppressDefaultLog, IApiWalletWalletDefaultAddressGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> mnemonics, Option<int> addressType);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="mnemonics"></param>
        /// <param name="addressType"></param>
        private void OnErrorApiWalletWalletDefaultAddressGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> mnemonics, Option<int> addressType)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletWalletDefaultAddressGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, mnemonics, addressType);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="mnemonics"></param>
        /// <param name="addressType"></param>
        partial void OnErrorApiWalletWalletDefaultAddressGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> mnemonics, Option<int> addressType);

        /// <summary>
        /// default addresss of a wallet without private key 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="addressType"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletDefaultAddressGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletWalletDefaultAddressGetApiResponse?> ApiWalletWalletDefaultAddressGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> mnemonics = default, Option<int> addressType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletWalletDefaultAddressGetAsync(nodeUrlOrApiAccessKey, mnemonics, addressType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// default addresss of a wallet without private key 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="addressType"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletDefaultAddressGetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletWalletDefaultAddressGetApiResponse> ApiWalletWalletDefaultAddressGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> mnemonics = default, Option<int> addressType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletWalletDefaultAddressGet(nodeUrlOrApiAccessKey, mnemonics);

                FormatApiWalletWalletDefaultAddressGet(ref nodeUrlOrApiAccessKey, ref mnemonics, ref addressType);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/wallet-default-address"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/wallet-default-address");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (addressType.IsSet)
                        parseQueryStringLocalVar["addressType"] = ClientUtils.ParameterToString(addressType.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (mnemonics.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("mnemonics", ClientUtils.ParameterToString(mnemonics.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletWalletDefaultAddressGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletWalletDefaultAddressGetApiResponse>();

                        ApiWalletWalletDefaultAddressGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/wallet-default-address", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletWalletDefaultAddressGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, mnemonics, addressType);

                        Events.ExecuteOnApiWalletWalletDefaultAddressGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletWalletDefaultAddressGetDefaultImplementation(e, "/api/Wallet/wallet-default-address", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, mnemonics, addressType);
                Events.ExecuteOnErrorApiWalletWalletDefaultAddressGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletWalletDefaultAddressGetApiResponse"/>
        /// </summary>
        public partial class ApiWalletWalletDefaultAddressGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletWalletDefaultAddressGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletWalletDefaultAddressGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletWalletDefaultAddressGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletWalletDefaultAddressGetApiResponse(ILogger<ApiWalletWalletDefaultAddressGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiWalletWalletDefaultAddressV2Get(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> mnemonics, ref Option<int> addressType);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="mnemonics"></param>
        /// <returns></returns>
        private void ValidateApiWalletWalletDefaultAddressV2Get(Option<string> nodeUrlOrApiAccessKey, Option<string> mnemonics)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (mnemonics.IsSet && mnemonics.Value == null)
                throw new ArgumentNullException(nameof(mnemonics));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="mnemonics"></param>
        /// <param name="addressType"></param>
        private void AfterApiWalletWalletDefaultAddressV2GetDefaultImplementation(IApiWalletWalletDefaultAddressV2GetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> mnemonics, Option<int> addressType)
        {
            bool suppressDefaultLog = false;
            AfterApiWalletWalletDefaultAddressV2Get(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, mnemonics, addressType);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="mnemonics"></param>
        /// <param name="addressType"></param>
        partial void AfterApiWalletWalletDefaultAddressV2Get(ref bool suppressDefaultLog, IApiWalletWalletDefaultAddressV2GetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> mnemonics, Option<int> addressType);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="mnemonics"></param>
        /// <param name="addressType"></param>
        private void OnErrorApiWalletWalletDefaultAddressV2GetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> mnemonics, Option<int> addressType)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiWalletWalletDefaultAddressV2Get(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, mnemonics, addressType);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="mnemonics"></param>
        /// <param name="addressType"></param>
        partial void OnErrorApiWalletWalletDefaultAddressV2Get(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> mnemonics, Option<int> addressType);

        /// <summary>
        /// default addresss of a wallet with private key 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="addressType"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletDefaultAddressV2GetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletWalletDefaultAddressV2GetApiResponse?> ApiWalletWalletDefaultAddressV2GetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> mnemonics = default, Option<int> addressType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiWalletWalletDefaultAddressV2GetAsync(nodeUrlOrApiAccessKey, mnemonics, addressType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// default addresss of a wallet with private key 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="mnemonics"> (optional)</param>
        /// <param name="addressType"> (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiWalletWalletDefaultAddressV2GetApiResponse"/>&gt;</returns>
        public async Task<IApiWalletWalletDefaultAddressV2GetApiResponse> ApiWalletWalletDefaultAddressV2GetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> mnemonics = default, Option<int> addressType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiWalletWalletDefaultAddressV2Get(nodeUrlOrApiAccessKey, mnemonics);

                FormatApiWalletWalletDefaultAddressV2Get(ref nodeUrlOrApiAccessKey, ref mnemonics, ref addressType);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Wallet/wallet-default-address-v2"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Wallet/wallet-default-address-v2");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (addressType.IsSet)
                        parseQueryStringLocalVar["addressType"] = ClientUtils.ParameterToString(addressType.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    if (mnemonics.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("mnemonics", ClientUtils.ParameterToString(mnemonics.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiWalletWalletDefaultAddressV2GetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiWalletWalletDefaultAddressV2GetApiResponse>();

                        ApiWalletWalletDefaultAddressV2GetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Wallet/wallet-default-address-v2", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiWalletWalletDefaultAddressV2GetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, mnemonics, addressType);

                        Events.ExecuteOnApiWalletWalletDefaultAddressV2Get(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiWalletWalletDefaultAddressV2GetDefaultImplementation(e, "/api/Wallet/wallet-default-address-v2", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, mnemonics, addressType);
                Events.ExecuteOnErrorApiWalletWalletDefaultAddressV2Get(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiWalletWalletDefaultAddressV2GetApiResponse"/>
        /// </summary>
        public partial class ApiWalletWalletDefaultAddressV2GetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiWalletWalletDefaultAddressV2GetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiWalletWalletDefaultAddressV2GetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiWalletWalletDefaultAddressV2GetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiWalletWalletDefaultAddressV2GetApiResponse(ILogger<ApiWalletWalletDefaultAddressV2GetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
