// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ILitecoinApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        LitecoinApiEvents Events { get; }

        /// <summary>
        /// Litecoin UTXO details - returns the details of a UTXO using the transaction id and vout index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="txid"> (optional)</param>
        /// <param name="voutN"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiLitecoinGetUtxoDetailsGetApiResponse"/>&gt;</returns>
        Task<IApiLitecoinGetUtxoDetailsGetApiResponse> ApiLitecoinGetUtxoDetailsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> txid = default, Option<int> voutN = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Litecoin UTXO details - returns the details of a UTXO using the transaction id and vout index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="txid"> (optional)</param>
        /// <param name="voutN"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiLitecoinGetUtxoDetailsGetApiResponse"/>?&gt;</returns>
        Task<IApiLitecoinGetUtxoDetailsGetApiResponse?> ApiLitecoinGetUtxoDetailsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> txid = default, Option<int> voutN = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Litecoin transaction details - returns the full details of a transaction id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="txid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiLitecoinTransactionDetailsGetApiResponse"/>&gt;</returns>
        Task<IApiLitecoinTransactionDetailsGetApiResponse> ApiLitecoinTransactionDetailsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> txid = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Litecoin transaction details - returns the full details of a transaction id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="txid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiLitecoinTransactionDetailsGetApiResponse"/>?&gt;</returns>
        Task<IApiLitecoinTransactionDetailsGetApiResponse?> ApiLitecoinTransactionDetailsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> txid = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IApiLitecoinGetUtxoDetailsGetApiResponse"/>
    /// </summary>
    public interface IApiLitecoinGetUtxoDetailsGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IApiLitecoinTransactionDetailsGetApiResponse"/>
    /// </summary>
    public interface IApiLitecoinTransactionDetailsGetApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class LitecoinApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiLitecoinGetUtxoDetailsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiLitecoinGetUtxoDetailsGet;

        internal void ExecuteOnApiLitecoinGetUtxoDetailsGet(LitecoinApi.ApiLitecoinGetUtxoDetailsGetApiResponse apiResponse)
        {
            OnApiLitecoinGetUtxoDetailsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiLitecoinGetUtxoDetailsGet(Exception exception)
        {
            OnErrorApiLitecoinGetUtxoDetailsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiLitecoinTransactionDetailsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiLitecoinTransactionDetailsGet;

        internal void ExecuteOnApiLitecoinTransactionDetailsGet(LitecoinApi.ApiLitecoinTransactionDetailsGetApiResponse apiResponse)
        {
            OnApiLitecoinTransactionDetailsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiLitecoinTransactionDetailsGet(Exception exception)
        {
            OnErrorApiLitecoinTransactionDetailsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class LitecoinApi : ILitecoinApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<LitecoinApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public LitecoinApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LitecoinApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LitecoinApi(ILogger<LitecoinApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, LitecoinApiEvents litecoinApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<LitecoinApi>();
            HttpClient = httpClient;
            Events = litecoinApiEvents;
        }

        partial void FormatApiLitecoinGetUtxoDetailsGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> txid, ref Option<int> voutN);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="txid"></param>
        /// <returns></returns>
        private void ValidateApiLitecoinGetUtxoDetailsGet(Option<string> nodeUrlOrApiAccessKey, Option<string> txid)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (txid.IsSet && txid.Value == null)
                throw new ArgumentNullException(nameof(txid));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="txid"></param>
        /// <param name="voutN"></param>
        private void AfterApiLitecoinGetUtxoDetailsGetDefaultImplementation(IApiLitecoinGetUtxoDetailsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> txid, Option<int> voutN)
        {
            bool suppressDefaultLog = false;
            AfterApiLitecoinGetUtxoDetailsGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, txid, voutN);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="txid"></param>
        /// <param name="voutN"></param>
        partial void AfterApiLitecoinGetUtxoDetailsGet(ref bool suppressDefaultLog, IApiLitecoinGetUtxoDetailsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> txid, Option<int> voutN);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="txid"></param>
        /// <param name="voutN"></param>
        private void OnErrorApiLitecoinGetUtxoDetailsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> txid, Option<int> voutN)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiLitecoinGetUtxoDetailsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, txid, voutN);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="txid"></param>
        /// <param name="voutN"></param>
        partial void OnErrorApiLitecoinGetUtxoDetailsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> txid, Option<int> voutN);

        /// <summary>
        /// Litecoin UTXO details - returns the details of a UTXO using the transaction id and vout index 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="txid"> (optional)</param>
        /// <param name="voutN"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiLitecoinGetUtxoDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IApiLitecoinGetUtxoDetailsGetApiResponse?> ApiLitecoinGetUtxoDetailsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> txid = default, Option<int> voutN = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiLitecoinGetUtxoDetailsGetAsync(nodeUrlOrApiAccessKey, txid, voutN, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Litecoin UTXO details - returns the details of a UTXO using the transaction id and vout index 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="txid"> (optional)</param>
        /// <param name="voutN"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiLitecoinGetUtxoDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IApiLitecoinGetUtxoDetailsGetApiResponse> ApiLitecoinGetUtxoDetailsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> txid = default, Option<int> voutN = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiLitecoinGetUtxoDetailsGet(nodeUrlOrApiAccessKey, txid);

                FormatApiLitecoinGetUtxoDetailsGet(ref nodeUrlOrApiAccessKey, ref txid, ref voutN);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Litecoin/get-utxo-details"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Litecoin/get-utxo-details");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (txid.IsSet)
                        parseQueryStringLocalVar["txid"] = ClientUtils.ParameterToString(txid.Value);

                    if (voutN.IsSet)
                        parseQueryStringLocalVar["vout_n"] = ClientUtils.ParameterToString(voutN.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiLitecoinGetUtxoDetailsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiLitecoinGetUtxoDetailsGetApiResponse>();

                        ApiLitecoinGetUtxoDetailsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Litecoin/get-utxo-details", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiLitecoinGetUtxoDetailsGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, txid, voutN);

                        Events.ExecuteOnApiLitecoinGetUtxoDetailsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiLitecoinGetUtxoDetailsGetDefaultImplementation(e, "/api/Litecoin/get-utxo-details", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, txid, voutN);
                Events.ExecuteOnErrorApiLitecoinGetUtxoDetailsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiLitecoinGetUtxoDetailsGetApiResponse"/>
        /// </summary>
        public partial class ApiLitecoinGetUtxoDetailsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiLitecoinGetUtxoDetailsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiLitecoinGetUtxoDetailsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiLitecoinGetUtxoDetailsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiLitecoinGetUtxoDetailsGetApiResponse(ILogger<ApiLitecoinGetUtxoDetailsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiLitecoinTransactionDetailsGet(ref Option<string> nodeUrlOrApiAccessKey, ref Option<string> txid);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="txid"></param>
        /// <returns></returns>
        private void ValidateApiLitecoinTransactionDetailsGet(Option<string> nodeUrlOrApiAccessKey, Option<string> txid)
        {
            if (nodeUrlOrApiAccessKey.IsSet && nodeUrlOrApiAccessKey.Value == null)
                throw new ArgumentNullException(nameof(nodeUrlOrApiAccessKey));

            if (txid.IsSet && txid.Value == null)
                throw new ArgumentNullException(nameof(txid));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="txid"></param>
        private void AfterApiLitecoinTransactionDetailsGetDefaultImplementation(IApiLitecoinTransactionDetailsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> txid)
        {
            bool suppressDefaultLog = false;
            AfterApiLitecoinTransactionDetailsGet(ref suppressDefaultLog, apiResponseLocalVar, nodeUrlOrApiAccessKey, txid);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="txid"></param>
        partial void AfterApiLitecoinTransactionDetailsGet(ref bool suppressDefaultLog, IApiLitecoinTransactionDetailsGetApiResponse apiResponseLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> txid);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="txid"></param>
        private void OnErrorApiLitecoinTransactionDetailsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> txid)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiLitecoinTransactionDetailsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeUrlOrApiAccessKey, txid);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeUrlOrApiAccessKey"></param>
        /// <param name="txid"></param>
        partial void OnErrorApiLitecoinTransactionDetailsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> nodeUrlOrApiAccessKey, Option<string> txid);

        /// <summary>
        /// Litecoin transaction details - returns the full details of a transaction id 
        /// </summary>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="txid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiLitecoinTransactionDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IApiLitecoinTransactionDetailsGetApiResponse?> ApiLitecoinTransactionDetailsGetOrDefaultAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> txid = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiLitecoinTransactionDetailsGetAsync(nodeUrlOrApiAccessKey, txid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Litecoin transaction details - returns the full details of a transaction id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeUrlOrApiAccessKey"> (optional)</param>
        /// <param name="txid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiLitecoinTransactionDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IApiLitecoinTransactionDetailsGetApiResponse> ApiLitecoinTransactionDetailsGetAsync(Option<string> nodeUrlOrApiAccessKey = default, Option<string> txid = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiLitecoinTransactionDetailsGet(nodeUrlOrApiAccessKey, txid);

                FormatApiLitecoinTransactionDetailsGet(ref nodeUrlOrApiAccessKey, ref txid);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Litecoin/transaction-details"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Litecoin/transaction-details");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (txid.IsSet)
                        parseQueryStringLocalVar["txid"] = ClientUtils.ParameterToString(txid.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (nodeUrlOrApiAccessKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("nodeUrlOrApiAccessKey", ClientUtils.ParameterToString(nodeUrlOrApiAccessKey.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiLitecoinTransactionDetailsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiLitecoinTransactionDetailsGetApiResponse>();

                        ApiLitecoinTransactionDetailsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Litecoin/transaction-details", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiLitecoinTransactionDetailsGetDefaultImplementation(apiResponseLocalVar, nodeUrlOrApiAccessKey, txid);

                        Events.ExecuteOnApiLitecoinTransactionDetailsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiLitecoinTransactionDetailsGetDefaultImplementation(e, "/api/Litecoin/transaction-details", uriBuilderLocalVar.Path, nodeUrlOrApiAccessKey, txid);
                Events.ExecuteOnErrorApiLitecoinTransactionDetailsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiLitecoinTransactionDetailsGetApiResponse"/>
        /// </summary>
        public partial class ApiLitecoinTransactionDetailsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IApiLitecoinTransactionDetailsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiLitecoinTransactionDetailsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiLitecoinTransactionDetailsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiLitecoinTransactionDetailsGetApiResponse(ILogger<ApiLitecoinTransactionDetailsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
