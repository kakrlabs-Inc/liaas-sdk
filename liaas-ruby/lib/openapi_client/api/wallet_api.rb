=begin
#KakrLabs-SDK-Creator

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module OpenapiClient
  class WalletApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all addresses of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @return [nil]
    def api_wallet_addresses_get(opts = {})
      api_wallet_addresses_get_with_http_info(opts)
      nil
    end

    # Get all addresses of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_addresses_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_addresses_get ...'
      end
      # resource path
      local_var_path = '/api/Wallet/addresses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_addresses_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_addresses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the balance of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @return [nil]
    def api_wallet_balance_get(opts = {})
      api_wallet_balance_get_with_http_info(opts)
      nil
    end

    # Get the balance of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_balance_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_balance_get ...'
      end
      # resource path
      local_var_path = '/api/Wallet/balance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_balance_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_balance_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change the passphrase of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [ChangePassphrasedto] :change_passphrasedto 
    # @return [nil]
    def api_wallet_change_passphrase_post(opts = {})
      api_wallet_change_passphrase_post_with_http_info(opts)
      nil
    end

    # Change the passphrase of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [ChangePassphrasedto] :change_passphrasedto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_change_passphrase_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_change_passphrase_post ...'
      end
      # resource path
      local_var_path = '/api/Wallet/change-passphrase'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'change_passphrasedto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_change_passphrase_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_change_passphrase_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [CreateWalletRequest] :create_wallet_request 
    # @return [nil]
    def api_wallet_create_encrypted_wallet_post(opts = {})
      api_wallet_create_encrypted_wallet_post_with_http_info(opts)
      nil
    end

    # Create an encrypted wallet. this wallet created will be encrypted but cannot be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [CreateWalletRequest] :create_wallet_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_create_encrypted_wallet_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_create_encrypted_wallet_post ...'
      end
      # resource path
      local_var_path = '/api/Wallet/create-encrypted-wallet'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_wallet_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_create_encrypted_wallet_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_create_encrypted_wallet_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [CreateWalletRequest] :create_wallet_request 
    # @return [nil]
    def api_wallet_create_importable_encrypted_wallet_post(opts = {})
      api_wallet_create_importable_encrypted_wallet_post_with_http_info(opts)
      nil
    end

    # Create an importable encrypted wallet. this wallet created will be encrypted and can be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [CreateWalletRequest] :create_wallet_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_create_importable_encrypted_wallet_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_create_importable_encrypted_wallet_post ...'
      end
      # resource path
      local_var_path = '/api/Wallet/create-importable-encrypted-wallet'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_wallet_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_create_importable_encrypted_wallet_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_create_importable_encrypted_wallet_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [CreateWalletRequest] :create_wallet_request 
    # @return [nil]
    def api_wallet_create_importable_wallet_post(opts = {})
      api_wallet_create_importable_wallet_post_with_http_info(opts)
      nil
    end

    # Create an importable wallet. this wallet created will be encrypted and can be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [CreateWalletRequest] :create_wallet_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_create_importable_wallet_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_create_importable_wallet_post ...'
      end
      # resource path
      local_var_path = '/api/Wallet/create-importable-wallet'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_wallet_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_create_importable_wallet_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_create_importable_wallet_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [CreateWalletRequest] :create_wallet_request 
    # @return [nil]
    def api_wallet_create_post(opts = {})
      api_wallet_create_post_with_http_info(opts)
      nil
    end

    # Create a new wallet. this wallet created but not encrypted and cannot be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [CreateWalletRequest] :create_wallet_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_create_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_create_post ...'
      end
      # resource path
      local_var_path = '/api/Wallet/create'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_wallet_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_create_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_create_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @return [nil]
    def api_wallet_details_get(opts = {})
      api_wallet_details_get_with_http_info(opts)
      nil
    end

    # Get the details of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_details_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_details_get ...'
      end
      # resource path
      local_var_path = '/api/Wallet/details'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      query_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Encrypt a wallet. this wallet created  cannot be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [EncryptWalletDto] :encrypt_wallet_dto 
    # @return [nil]
    def api_wallet_encrypt_wallet_post(opts = {})
      api_wallet_encrypt_wallet_post_with_http_info(opts)
      nil
    end

    # Encrypt a wallet. this wallet created  cannot be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [EncryptWalletDto] :encrypt_wallet_dto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_encrypt_wallet_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_encrypt_wallet_post ...'
      end
      # resource path
      local_var_path = '/api/Wallet/encrypt-wallet'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'encrypt_wallet_dto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_encrypt_wallet_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_encrypt_wallet_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [ImportWalletdto] :import_walletdto 
    # @return [nil]
    def api_wallet_import_wallet_post(opts = {})
      api_wallet_import_wallet_post_with_http_info(opts)
      nil
    end

    # Import a wallet. this wallet created will be encrypted and can be imported to other wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [ImportWalletdto] :import_walletdto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_import_wallet_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_import_wallet_post ...'
      end
      # resource path
      local_var_path = '/api/Wallet/import-wallet'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'import_walletdto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_import_wallet_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_import_wallet_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the official address of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @return [nil]
    def api_wallet_official_address_get(opts = {})
      api_wallet_official_address_get_with_http_info(opts)
      nil
    end

    # Get the official address of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_official_address_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_official_address_get ...'
      end
      # resource path
      local_var_path = '/api/Wallet/official-address'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_official_address_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_official_address_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the mnemonics of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :encrypted_passphrase 
    # @option opts [SetWalletMnemonicsdto] :set_wallet_mnemonicsdto 
    # @return [nil]
    def api_wallet_set_wallet_mnemonics_post(opts = {})
      api_wallet_set_wallet_mnemonics_post_with_http_info(opts)
      nil
    end

    # Set the mnemonics of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :encrypted_passphrase 
    # @option opts [SetWalletMnemonicsdto] :set_wallet_mnemonicsdto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_set_wallet_mnemonics_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_set_wallet_mnemonics_post ...'
      end
      # resource path
      local_var_path = '/api/Wallet/set-wallet-mnemonics'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?
      header_params[:'encryptedPassphrase'] = opts[:'encrypted_passphrase'] if !opts[:'encrypted_passphrase'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'set_wallet_mnemonicsdto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_set_wallet_mnemonics_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_set_wallet_mnemonics_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign a message using the wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [SignMessageUsingWalletdto] :sign_message_using_walletdto 
    # @return [nil]
    def api_wallet_sign_wallet_message_post(opts = {})
      api_wallet_sign_wallet_message_post_with_http_info(opts)
      nil
    end

    # Sign a message using the wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [SignMessageUsingWalletdto] :sign_message_using_walletdto 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_sign_wallet_message_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_sign_wallet_message_post ...'
      end
      # resource path
      local_var_path = '/api/Wallet/sign-wallet-message'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'sign_message_using_walletdto'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_sign_wallet_message_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_sign_wallet_message_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the transactions of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [Integer] :skip  (default to 10)
    # @option opts [Integer] :count  (default to 1)
    # @return [nil]
    def api_wallet_transactions_get(opts = {})
      api_wallet_transactions_get_with_http_info(opts)
      nil
    end

    # Get the transactions of a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [Integer] :skip  (default to 10)
    # @option opts [Integer] :count  (default to 1)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_transactions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_transactions_get ...'
      end
      # resource path
      local_var_path = '/api/Wallet/transactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the balance of a specific address in a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :address 
    # @return [nil]
    def api_wallet_wallet_address_balance_get(opts = {})
      api_wallet_wallet_address_balance_get_with_http_info(opts)
      nil
    end

    # Get the balance of a specific address in a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :address 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_wallet_address_balance_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_wallet_address_balance_get ...'
      end
      # resource path
      local_var_path = '/api/Wallet/wallet-address-balance'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_wallet_address_balance_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_wallet_address_balance_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the transactions of a specific address in a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :address 
    # @return [nil]
    def api_wallet_wallet_address_transactions_get(opts = {})
      api_wallet_wallet_address_transactions_get_with_http_info(opts)
      nil
    end

    # Get the transactions of a specific address in a wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :wallet_name 
    # @option opts [String] :address 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_wallet_address_transactions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_wallet_address_transactions_get ...'
      end
      # resource path
      local_var_path = '/api/Wallet/wallet-address-transactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'walletName'] = opts[:'wallet_name'] if !opts[:'wallet_name'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_wallet_address_transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_wallet_address_transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # default addresss of a wallet without private key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :mnemonics 
    # @option opts [Integer] :address_type  (default to 1)
    # @return [nil]
    def api_wallet_wallet_default_address_get(opts = {})
      api_wallet_wallet_default_address_get_with_http_info(opts)
      nil
    end

    # default addresss of a wallet without private key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :mnemonics 
    # @option opts [Integer] :address_type  (default to 1)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_wallet_default_address_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_wallet_default_address_get ...'
      end
      # resource path
      local_var_path = '/api/Wallet/wallet-default-address'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'addressType'] = opts[:'address_type'] if !opts[:'address_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'mnemonics'] = opts[:'mnemonics'] if !opts[:'mnemonics'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_wallet_default_address_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_wallet_default_address_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # default addresss of a wallet with private key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :mnemonics 
    # @option opts [Integer] :address_type  (default to 1)
    # @return [nil]
    def api_wallet_wallet_default_address_v2_get(opts = {})
      api_wallet_wallet_default_address_v2_get_with_http_info(opts)
      nil
    end

    # default addresss of a wallet with private key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :node_url_or_api_access_key 
    # @option opts [String] :mnemonics 
    # @option opts [Integer] :address_type  (default to 1)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_wallet_wallet_default_address_v2_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletApi.api_wallet_wallet_default_address_v2_get ...'
      end
      # resource path
      local_var_path = '/api/Wallet/wallet-default-address-v2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'addressType'] = opts[:'address_type'] if !opts[:'address_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'nodeUrlOrApiAccessKey'] = opts[:'node_url_or_api_access_key'] if !opts[:'node_url_or_api_access_key'].nil?
      header_params[:'mnemonics'] = opts[:'mnemonics'] if !opts[:'mnemonics'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WalletApi.api_wallet_wallet_default_address_v2_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletApi#api_wallet_wallet_default_address_v2_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
