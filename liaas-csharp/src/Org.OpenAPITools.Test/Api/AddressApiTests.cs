/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AddressApi
    /// </summary>
    public sealed class AddressApiTests : ApiTestsBase
    {
        private readonly IAddressApi _instance;

        public AddressApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAddressApi>();
        }

        /// <summary>
        /// Test ApiAddressAddressBalanceGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressAddressBalanceGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> address = default!;
            await _instance.ApiAddressAddressBalanceGetAsync(nodeUrlOrApiAccessKey, address);
        }

        /// <summary>
        /// Test ApiAddressAddressDetailsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressAddressDetailsGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<string> address = default!;
            await _instance.ApiAddressAddressDetailsGetAsync(nodeUrlOrApiAccessKey, walletName, address);
        }

        /// <summary>
        /// Test ApiAddressAddressPrivateKeyGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressAddressPrivateKeyGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> wallet = default!;
            Client.Option<string> encryptedPassphrase = default!;
            Client.Option<string> address = default!;
            await _instance.ApiAddressAddressPrivateKeyGetAsync(nodeUrlOrApiAccessKey, wallet, encryptedPassphrase, address);
        }

        /// <summary>
        /// Test ApiAddressAddressPrivateKeyV2Get
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressAddressPrivateKeyV2GetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> wallet = default!;
            Client.Option<string> mnemonics = default!;
            Client.Option<string> address = default!;
            await _instance.ApiAddressAddressPrivateKeyV2GetAsync(nodeUrlOrApiAccessKey, wallet, mnemonics, address);
        }

        /// <summary>
        /// Test ApiAddressAddressTransactionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressAddressTransactionGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> address = default!;
            Client.Option<int> take = default!;
            Client.Option<int> skip = default!;
            await _instance.ApiAddressAddressTransactionGetAsync(nodeUrlOrApiAccessKey, address, take, skip);
        }

        /// <summary>
        /// Test ApiAddressCreateMutiSigAddressPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressCreateMutiSigAddressPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<string> encryptedPassphrase = default!;
            Client.Option<CreateMultiSignatureAddressdto> createMultiSignatureAddressdto = default!;
            await _instance.ApiAddressCreateMutiSigAddressPostAsync(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createMultiSignatureAddressdto);
        }

        /// <summary>
        /// Test ApiAddressCreatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressCreatePostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<string> encryptedPassphrase = default!;
            Client.Option<CreateAddressdto> createAddressdto = default!;
            await _instance.ApiAddressCreatePostAsync(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, createAddressdto);
        }

        /// <summary>
        /// Test ApiAddressGenerateDefaultAddressPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressGenerateDefaultAddressPostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> walletName = default!;
            Client.Option<string> encryptedPassphrase = default!;
            Client.Option<GenerateDefaultAddressdto> generateDefaultAddressdto = default!;
            await _instance.ApiAddressGenerateDefaultAddressPostAsync(nodeUrlOrApiAccessKey, walletName, encryptedPassphrase, generateDefaultAddressdto);
        }

        /// <summary>
        /// Test ApiAddressScreenAddressGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressScreenAddressGetAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<string> wallet = default!;
            Client.Option<string> mnemonics = default!;
            Client.Option<string> address = default!;
            await _instance.ApiAddressScreenAddressGetAsync(nodeUrlOrApiAccessKey, wallet, mnemonics, address);
        }

        /// <summary>
        /// Test ApiAddressSignMessagePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressSignMessagePostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<SignMessagedto> signMessagedto = default!;
            await _instance.ApiAddressSignMessagePostAsync(nodeUrlOrApiAccessKey, signMessagedto);
        }

        /// <summary>
        /// Test ApiAddressVerifyMessagePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiAddressVerifyMessagePostAsyncTest()
        {
            Client.Option<string> nodeUrlOrApiAccessKey = default!;
            Client.Option<VerifyMessagedto> verifyMessagedto = default!;
            await _instance.ApiAddressVerifyMessagePostAsync(nodeUrlOrApiAccessKey, verifyMessagedto);
        }
    }
}
