/*
KakrLabs-SDK-Creator

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangePassphrasedto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangePassphrasedto{}

// ChangePassphrasedto struct for ChangePassphrasedto
type ChangePassphrasedto struct {
	Wallet string `json:"wallet"`
	OldPassphrase string `json:"old_passphrase"`
	NewPassphrase string `json:"new_passphrase"`
}

type _ChangePassphrasedto ChangePassphrasedto

// NewChangePassphrasedto instantiates a new ChangePassphrasedto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangePassphrasedto(wallet string, oldPassphrase string, newPassphrase string) *ChangePassphrasedto {
	this := ChangePassphrasedto{}
	this.Wallet = wallet
	this.OldPassphrase = oldPassphrase
	this.NewPassphrase = newPassphrase
	return &this
}

// NewChangePassphrasedtoWithDefaults instantiates a new ChangePassphrasedto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangePassphrasedtoWithDefaults() *ChangePassphrasedto {
	this := ChangePassphrasedto{}
	return &this
}

// GetWallet returns the Wallet field value
func (o *ChangePassphrasedto) GetWallet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Wallet
}

// GetWalletOk returns a tuple with the Wallet field value
// and a boolean to check if the value has been set.
func (o *ChangePassphrasedto) GetWalletOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wallet, true
}

// SetWallet sets field value
func (o *ChangePassphrasedto) SetWallet(v string) {
	o.Wallet = v
}

// GetOldPassphrase returns the OldPassphrase field value
func (o *ChangePassphrasedto) GetOldPassphrase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldPassphrase
}

// GetOldPassphraseOk returns a tuple with the OldPassphrase field value
// and a boolean to check if the value has been set.
func (o *ChangePassphrasedto) GetOldPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldPassphrase, true
}

// SetOldPassphrase sets field value
func (o *ChangePassphrasedto) SetOldPassphrase(v string) {
	o.OldPassphrase = v
}

// GetNewPassphrase returns the NewPassphrase field value
func (o *ChangePassphrasedto) GetNewPassphrase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassphrase
}

// GetNewPassphraseOk returns a tuple with the NewPassphrase field value
// and a boolean to check if the value has been set.
func (o *ChangePassphrasedto) GetNewPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassphrase, true
}

// SetNewPassphrase sets field value
func (o *ChangePassphrasedto) SetNewPassphrase(v string) {
	o.NewPassphrase = v
}

func (o ChangePassphrasedto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangePassphrasedto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet"] = o.Wallet
	toSerialize["old_passphrase"] = o.OldPassphrase
	toSerialize["new_passphrase"] = o.NewPassphrase
	return toSerialize, nil
}

func (o *ChangePassphrasedto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet",
		"old_passphrase",
		"new_passphrase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangePassphrasedto := _ChangePassphrasedto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangePassphrasedto)

	if err != nil {
		return err
	}

	*o = ChangePassphrasedto(varChangePassphrasedto)

	return err
}

type NullableChangePassphrasedto struct {
	value *ChangePassphrasedto
	isSet bool
}

func (v NullableChangePassphrasedto) Get() *ChangePassphrasedto {
	return v.value
}

func (v *NullableChangePassphrasedto) Set(val *ChangePassphrasedto) {
	v.value = val
	v.isSet = true
}

func (v NullableChangePassphrasedto) IsSet() bool {
	return v.isSet
}

func (v *NullableChangePassphrasedto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangePassphrasedto(val *ChangePassphrasedto) *NullableChangePassphrasedto {
	return &NullableChangePassphrasedto{value: val, isSet: true}
}

func (v NullableChangePassphrasedto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangePassphrasedto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


