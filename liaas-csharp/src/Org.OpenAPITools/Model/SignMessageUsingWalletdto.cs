// <auto-generated>
/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SignMessageUsingWalletdto
    /// </summary>
    public partial class SignMessageUsingWalletdto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignMessageUsingWalletdto" /> class.
        /// </summary>
        /// <param name="message">message</param>
        /// <param name="passphrase">passphrase</param>
        /// <param name="address">address</param>
        [JsonConstructor]
        public SignMessageUsingWalletdto(string message, string passphrase, string address)
        {
            Message = message;
            Passphrase = passphrase;
            Address = address;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Passphrase
        /// </summary>
        [JsonPropertyName("passphrase")]
        public string Passphrase { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignMessageUsingWalletdto {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Passphrase: ").Append(Passphrase).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Message (string) minLength
            if (this.Message != null && this.Message.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Message, length must be greater than 1.", new [] { "Message" });
            }

            // Passphrase (string) minLength
            if (this.Passphrase != null && this.Passphrase.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Passphrase, length must be greater than 1.", new [] { "Passphrase" });
            }

            // Address (string) minLength
            if (this.Address != null && this.Address.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Address, length must be greater than 1.", new [] { "Address" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SignMessageUsingWalletdto" />
    /// </summary>
    public class SignMessageUsingWalletdtoJsonConverter : JsonConverter<SignMessageUsingWalletdto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SignMessageUsingWalletdto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SignMessageUsingWalletdto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> message = default;
            Option<string?> passphrase = default;
            Option<string?> address = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "passphrase":
                            passphrase = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class SignMessageUsingWalletdto.", nameof(message));

            if (!passphrase.IsSet)
                throw new ArgumentException("Property is required for class SignMessageUsingWalletdto.", nameof(passphrase));

            if (!address.IsSet)
                throw new ArgumentException("Property is required for class SignMessageUsingWalletdto.", nameof(address));

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class SignMessageUsingWalletdto.");

            if (passphrase.IsSet && passphrase.Value == null)
                throw new ArgumentNullException(nameof(passphrase), "Property is not nullable for class SignMessageUsingWalletdto.");

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class SignMessageUsingWalletdto.");

            return new SignMessageUsingWalletdto(message.Value!, passphrase.Value!, address.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SignMessageUsingWalletdto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="signMessageUsingWalletdto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SignMessageUsingWalletdto signMessageUsingWalletdto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, signMessageUsingWalletdto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SignMessageUsingWalletdto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="signMessageUsingWalletdto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SignMessageUsingWalletdto signMessageUsingWalletdto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (signMessageUsingWalletdto.Message == null)
                throw new ArgumentNullException(nameof(signMessageUsingWalletdto.Message), "Property is required for class SignMessageUsingWalletdto.");

            if (signMessageUsingWalletdto.Passphrase == null)
                throw new ArgumentNullException(nameof(signMessageUsingWalletdto.Passphrase), "Property is required for class SignMessageUsingWalletdto.");

            if (signMessageUsingWalletdto.Address == null)
                throw new ArgumentNullException(nameof(signMessageUsingWalletdto.Address), "Property is required for class SignMessageUsingWalletdto.");

            writer.WriteString("message", signMessageUsingWalletdto.Message);

            writer.WriteString("passphrase", signMessageUsingWalletdto.Passphrase);

            writer.WriteString("address", signMessageUsingWalletdto.Address);
        }
    }
}
