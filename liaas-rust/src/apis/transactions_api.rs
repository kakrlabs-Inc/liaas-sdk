/*
 * KakrLabs-SDK-Creator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`api_transactions_broadcast_transaction_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiTransactionsBroadcastTransactionPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_transactions_create_raw_transaction_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiTransactionsCreateRawTransactionPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_transactions_create_raw_transaction_v2_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiTransactionsCreateRawTransactionV2PostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_transactions_create_raw_transaction_v3_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiTransactionsCreateRawTransactionV3PostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_transactions_send_funds_from_wallet_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiTransactionsSendFundsFromWalletPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_transactions_sign_transaction_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiTransactionsSignTransactionPostError {
    UnknownValue(serde_json::Value),
}


pub async fn api_transactions_broadcast_transaction_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, broadcast_transactiondto: Option<models::BroadcastTransactiondto>) -> Result<(), Error<ApiTransactionsBroadcastTransactionPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_broadcast_transactiondto = broadcast_transactiondto;

    let uri_str = format!("{}/api/Transactions/broadcast-transaction", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_broadcast_transactiondto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiTransactionsBroadcastTransactionPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_transactions_create_raw_transaction_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, create_raw_transactiondto: Option<models::CreateRawTransactiondto>) -> Result<(), Error<ApiTransactionsCreateRawTransactionPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_create_raw_transactiondto = create_raw_transactiondto;

    let uri_str = format!("{}/api/Transactions/create-raw-transaction", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_raw_transactiondto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiTransactionsCreateRawTransactionPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_transactions_create_raw_transaction_v2_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, create_raw_transactiondto_v2: Option<models::CreateRawTransactiondtoV2>) -> Result<(), Error<ApiTransactionsCreateRawTransactionV2PostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_create_raw_transactiondto_v2 = create_raw_transactiondto_v2;

    let uri_str = format!("{}/api/Transactions/create-raw-transaction-v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_raw_transactiondto_v2);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiTransactionsCreateRawTransactionV2PostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_transactions_create_raw_transaction_v3_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, create_raw_transactiondto_v3: Option<models::CreateRawTransactiondtoV3>) -> Result<(), Error<ApiTransactionsCreateRawTransactionV3PostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_create_raw_transactiondto_v3 = create_raw_transactiondto_v3;

    let uri_str = format!("{}/api/Transactions/create-raw-transaction-v3", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_raw_transactiondto_v3);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiTransactionsCreateRawTransactionV3PostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_transactions_send_funds_from_wallet_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, encrypted_passphrase: Option<&str>, send_from_walletdto: Option<models::SendFromWalletdto>) -> Result<(), Error<ApiTransactionsSendFundsFromWalletPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_encrypted_passphrase = encrypted_passphrase;
    let p_send_from_walletdto = send_from_walletdto;

    let uri_str = format!("{}/api/Transactions/send-funds-from-wallet", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }
    if let Some(param_value) = p_encrypted_passphrase {
        req_builder = req_builder.header("encryptedPassphrase", param_value.to_string());
    }
    req_builder = req_builder.json(&p_send_from_walletdto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiTransactionsSendFundsFromWalletPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_transactions_sign_transaction_post(configuration: &configuration::Configuration, node_url_or_api_access_key: Option<&str>, wallet_name: Option<&str>, sign_raw_transactiondto: Option<models::SignRawTransactiondto>) -> Result<(), Error<ApiTransactionsSignTransactionPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_node_url_or_api_access_key = node_url_or_api_access_key;
    let p_wallet_name = wallet_name;
    let p_sign_raw_transactiondto = sign_raw_transactiondto;

    let uri_str = format!("{}/api/Transactions/sign-transaction", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_node_url_or_api_access_key {
        req_builder = req_builder.header("nodeUrlOrApiAccessKey", param_value.to_string());
    }
    if let Some(param_value) = p_wallet_name {
        req_builder = req_builder.header("walletName", param_value.to_string());
    }
    req_builder = req_builder.json(&p_sign_raw_transactiondto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiTransactionsSignTransactionPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

